[{"content":" https://github.com/THUDM/slime\n一个异步实现但是非完全异步的RL框架\n总体架构 从源码模块划分，有三大核心模块： training（Megatron）：主训练流程，负责模型参数更新。 rollout（SGLang + router）：负责采样、奖励/验证生成，产生训练数据。 data buffer：桥接训练与采样，管理数据流、缓存与生成方式。 分布式调度：关于资源分配、actor启动、任务调度都由于Ray管理，支持异步训练和采样 插件机制：支持自定义buffer、模型、模型格式转换（mbridge） flowchart LR subgraph Ray[Ray 分布式调度] A1[Actor Group\u0026lt;br\u0026gt;训练 Actor] A2[Rollout Group\u0026lt;br\u0026gt;采样/生成 Actor] A3[Placement Group\u0026lt;br\u0026gt;资源分配] end subgraph Training[Training \u0026lt;Megatron\u0026gt;] T1[模型训练] T2[权重同步] T3[评估/保存] end subgraph Rollout[Rollout \u0026lt;SGLang+Router\u0026gt;] R1[采样/生成] R2[奖励模型] R3[过滤器] end subgraph Buffer[Data Buffer] B1[数据缓存] B2[数据流转] B3[Offload/Onload] end subgraph Plugins[插件机制] P1[Buffer 插件] P2[Model 插件] P3[mbridge 格式转换] end A1--\u0026gt;|训练数据|B1 A2--\u0026gt;|生成数据|B1 B1--\u0026gt;|数据流|A1 B1--\u0026gt;|数据流|A2 A1--\u0026gt;|权重同步|A2 A1--\u0026gt;|评估/保存|T3 A2--\u0026gt;|采样/奖励/过滤|R1 R1--\u0026gt;|奖励|R2 R1--\u0026gt;|过滤|R3 B1--\u0026gt;|插件扩展|P1 A1--\u0026gt;|模型扩展|P2 A1--\u0026gt;|格式转换|P3 A3--\u0026gt;|资源分配|A1 A3--\u0026gt;|资源分配|A2 各模块视角的关系图 slime/rollout 组件图 rollout 负责采样、奖励、过滤，支持多种采样/奖励/过滤策略。\nflowchart TD AR[agent_rollout.py\u0026lt;br\u0026gt;采样主逻辑] SE[sglang_example.py\u0026lt;br\u0026gt;SGLang采样示例] SF[sft_example.py\u0026lt;br\u0026gt;有监督微调采样] RM[rm_hub/\u0026lt;br\u0026gt;奖励模型集] FH[filter_hub/\u0026lt;br\u0026gt;过滤器集] AR--\u0026gt;|调用|SE AR--\u0026gt;|调用|SF AR--\u0026gt;|奖励|RM AR--\u0026gt;|过滤|FH agent_rollout.py：采样主流程，调度 SGLang、奖励模型、过滤器。\nsglang_example.py/sft_example.py：采样实现示例。\nrm_hub/：奖励模型集合。\nfilter_hub/：过滤器集合。\nslime/ray 组件图 ray 负责分布式 actor、buffer、PPO 训练、资源分配。\nflowchart TD PG[placement_group.py\u0026lt;br\u0026gt;资源分配] AG[ray_actor.py\u0026lt;br\u0026gt;Actor基类] PA[ppo_actor.py\u0026lt;br\u0026gt;PPO训练Actor] RO[rollout.py\u0026lt;br\u0026gt;Rollout Actor] BU[buffer.py\u0026lt;br\u0026gt;数据Buffer] UT[utils.py\u0026lt;br\u0026gt;工具函数] PG--\u0026gt;|分配|AG AG--\u0026gt;|继承|PA AG--\u0026gt;|继承|RO PA--\u0026gt;|训练数据|BU RO--\u0026gt;|生成数据|BU BU--\u0026gt;|数据流|PA BU--\u0026gt;|数据流|RO slime/backends 组件图 后端适配，支持 Megatron、SGLang。\nflowchart TD MEG[megatron_utils/\u0026lt;br\u0026gt;Megatron适配] SGL[sglang_utils/\u0026lt;br\u0026gt;SGLang适配] MEG--\u0026gt;|接口|训练/采样 SGL--\u0026gt;|接口|训练/采样 slime/utils 组件图 工具、参数、类型、分布式、数据等通用功能。\nflowchart TD AR[arguments.py\u0026lt;br\u0026gt;参数解析] DT[data.py\u0026lt;br\u0026gt;数据工具] TY[types.py\u0026lt;br\u0026gt;类型定义] PU[ppo_utils.py\u0026lt;br\u0026gt;PPO工具] SU[seqlen_balancing.py\u0026lt;br\u0026gt;序列长度平衡] TU[timer.py\u0026lt;br\u0026gt;计时] DU[distributed_utils.py\u0026lt;br\u0026gt;分布式工具] FU[flops_utils.py\u0026lt;br\u0026gt;FLOPs工具] HU[http_utils.py\u0026lt;br\u0026gt;HTTP工具] MU[mask_utils.py\u0026lt;br\u0026gt;掩码工具] MEM[memory_utils.py\u0026lt;br\u0026gt;内存工具] MI[misc.py\u0026lt;br\u0026gt;杂项] AU[async_utils.py\u0026lt;br\u0026gt;异步工具] AR--\u0026gt;|参数|主流程 DT--\u0026gt;|数据|主流程 TY--\u0026gt;|类型|主流程 PU--\u0026gt;|PPO|训练 SU--\u0026gt;|平衡|训练 TU--\u0026gt;|计时|训练/采样 DU--\u0026gt;|分布式|训练/采样 FU--\u0026gt;|FLOPs|训练 HU--\u0026gt;|HTTP|采样 MU--\u0026gt;|掩码|训练 MEM--\u0026gt;|内存|训练 MI--\u0026gt;|杂项|主流程 AU--\u0026gt;|异步|主流程 slime_plugins/models 组件图 模型插件，支持不同模型适配.\nflowchart TD GLM[glm4.py\u0026lt;br\u0026gt;GLM4模型适配] GLM--\u0026gt;|模型接口|主流程 slime_plugins/mbridge 组件图 模型格式转换插件。\nflowchart TD GLM[glm4.py\u0026lt;br\u0026gt;GLM4格式转换] GLM--\u0026gt;|格式转换|主流程 关键类角度的实现关系 全局视角 classDiagram %% 主入口和配置 class MainTrain { +main() +create_placement_groups() +create_actor_group() +create_rollout_group() } class Arguments { +colocate: bool +offload: bool +actor_num_nodes: int +rollout_num_gpus: int +hf_checkpoint: str +rollout_function_path: str } %% Ray Actor 基类 class RayActor { +_get_current_node_ip_and_free_port() +get_master_addr_and_port() } %% 核心数据类 class Sample { +index: int +prompt: str +tokens: list[int] +response: str +response_length: int +reward: float +loss_mask: list[int] +status: Status +metadata: dict } class ParamInfo { +name: str +dtype: torch.dtype +shape: torch.Size +attrs: dict +size: int +src_rank: int } %% 训练相关类 class TrainRayActor { +args: Arguments +model: list +ref: list +old_actor: list +data_buffer: Buffer +rollout_engines: list +init() +train() +eval() +update_weights() +sleep() +wake_up() } class RayTrainGroup { +_actor_handlers: list[TrainRayActor] +async_init() +async_train() +async_eval() +async_update_weights() } %% 采样相关类 class RolloutRayActor { +args: Arguments +rank: int +infer_engine: SglangEngine +init() +update_weights_from_distributed() +update_weights_from_tensor() +reset_prefix_cache() +sleep() +wake_up() } class RolloutGroup { +args: Arguments +data_buffer: Buffer +rollout_engines: list[RolloutRayActor] +rollout_engine_lock: Lock +async_init() +async_generate() +async_reset_prefix_cache() } %% 数据管理类 class Buffer { +args: Arguments +dataset: JsonlDataset +buffer: list[list[Sample]] +train_data_pool: dict +eval_data_pool: dict +metadata: dict +get_samples() +add_samples() +generate() +get_data() +save() +load() } class JsonlDataset { +samples: list[Sample] +shuffle() +__len__() } %% 后端引擎类 class SglangEngine { +args: Arguments +rank: int +llm: HttpServerEngineAdapter +init_process_group() +update_weights_from_distributed() +update_weights_from_tensor() +reset_prefix_cache() +sleep() +wake_up() } class HttpServerEngineAdapter { +router_ip: str +router_port: int +init_weights_update_group() +update_weights_from_distributed() +update_weights_from_tensor() +flush_cache() } %% 插件类 class RolloutBuffer { +buffer: BufferQueue +lock: RLock +visualizer: BufferStatsVisualizer +write() +read() +peek() +get_stats() +close() } class BufferQueue { +group_size: int +max_buffer_size: int +append() +popleft() +get_batch() +__len__() } %% 工具类 class CuMemAllocator { +get_instance() +sleep() +wake_up() } class PlacementGroup { +bundles: list +strategy: str +ready() } %% 继承关系 RayActor \u0026lt;|-- TrainRayActor RayActor \u0026lt;|-- RolloutRayActor %% 聚合关系 MainTrain --\u0026gt; Arguments MainTrain --\u0026gt; RayTrainGroup MainTrain --\u0026gt; RolloutGroup MainTrain --\u0026gt; PlacementGroup RayTrainGroup --\u0026gt; TrainRayActor : contains RolloutGroup --\u0026gt; RolloutRayActor : contains RolloutGroup --\u0026gt; Buffer : contains TrainRayActor --\u0026gt; Buffer : uses TrainRayActor --\u0026gt; SglangEngine : connects to RolloutRayActor --\u0026gt; SglangEngine : contains SglangEngine --\u0026gt; HttpServerEngineAdapter : contains Buffer --\u0026gt; Sample : manages Buffer --\u0026gt; JsonlDataset : uses TrainRayActor --\u0026gt; CuMemAllocator : uses TrainRayActor --\u0026gt; ParamInfo : manages %% 插件关系 RolloutBuffer --\u0026gt; BufferQueue : contains RolloutBuffer --\u0026gt; BufferStatsVisualizer : contains %% 依赖关系 Arguments --\u0026gt; TrainRayActor : configures Arguments --\u0026gt; RolloutRayActor : configures Arguments --\u0026gt; Buffer : configures Arguments --\u0026gt; SglangEngine : configures %% 数据流关系 Sample --\u0026gt; Buffer : stored in Buffer --\u0026gt; TrainRayActor : provides data Buffer --\u0026gt; RolloutRayActor : receives data %% 权重同步关系 TrainRayActor --\u0026gt; RolloutRayActor : syncs weights SglangEngine --\u0026gt; HttpServerEngineAdapter : syncs weights 主流程精简版 classDiagram %% PPO 核心流程类 class MainTrain { +main() +create_placement_groups() +create_actor_group() +create_rollout_group() } class Arguments { +colocate: bool +offload: bool +actor_num_gpus_per_node: int +rollout_num_gpus: int +hf_checkpoint: str +rollout_function_path: str } %% 核心数据类 class Sample { +index: int +prompt: str +tokens: list[int] +response: str +response_length: int +reward: float +loss_mask: list[int] +status: Status } %% 训练 Actor class TrainRayActor { +model: list +ref: list +data_buffer: Buffer +rollout_engines: list +train() +eval() +update_weights() +sleep() +wake_up() } class RayTrainGroup { +_actor_handlers: list[TrainRayActor] +async_train() +async_eval() +async_update_weights() } %% 采样 Actor class RolloutRayActor { +infer_engine: SglangEngine +update_weights_from_distributed() +update_weights_from_tensor() +reset_prefix_cache() } class RolloutGroup { +data_buffer: Buffer +rollout_engines: list[RolloutRayActor] +async_generate() } %% 数据管理 class Buffer { +buffer: list[list[Sample]] +train_data_pool: dict +eval_data_pool: dict +get_samples() +add_samples() +generate() +get_data() +save() +load() } %% 推理引擎 class SglangEngine { +llm: HttpServerEngineAdapter +update_weights_from_distributed() +update_weights_from_tensor() +reset_prefix_cache() } %% 内存管理 class CuMemAllocator { +sleep() +wake_up() } %% 继承关系 TrainRayActor --\u0026gt; RayActor RolloutRayActor --\u0026gt; RayActor %% PPO 核心流程关系 MainTrain --\u0026gt; Arguments MainTrain --\u0026gt; RayTrainGroup MainTrain --\u0026gt; RolloutGroup RayTrainGroup --\u0026gt; TrainRayActor : contains RolloutGroup --\u0026gt; RolloutRayActor : contains RolloutGroup --\u0026gt; Buffer : contains TrainRayActor --\u0026gt; Buffer : uses TrainRayActor --\u0026gt; SglangEngine : syncs weights RolloutRayActor --\u0026gt; SglangEngine : contains TrainRayActor --\u0026gt; CuMemAllocator : uses %% 数据流关系 Sample --\u0026gt; Buffer : stored in Buffer --\u0026gt; TrainRayActor : provides training data Buffer --\u0026gt; RolloutRayActor : receives generated data 关于异步实现的方式 需要注意的问题：\nslime的RL训练是rollout_id同步，不是完全的异步训练（即推理可以不等待训练完成，或者训练可以不等待推理完成）。 权重同步在每个rollout训练完成后立刻执行，确保下一个rollout使用最新权重。 1 2 3 4 5 6 7 8 9 10 # train.py 主循环 - 实际上是同步的 for rollout_id in range(args.start_rollout_id, args.num_rollout): # 1. 等待采样完成 ray.get(rollout_generator.async_generate(rollout_id)) # 2. 等待训练完成 ray.get(actor_model.async_train(rollout_id)) # 3. 等待权重同步完成 ray.get(actor_model.async_update_weights()) 虽然使用 Ray actor 的异步方法，但主循环用 ray.get() 等待每个步骤完成\n每个 rollout_id 必须按顺序完成：采样 → 训练 → 权重同步\n不是 rollout 一直生成、train actor 一直消费的完全异步模式\n因此slime中异步的边界是内部的异步优化，多个actor分布式并行训练，但是主循环还是等待所有都要完成。\n权重如何同步 权重同步流程：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # RayTrainGroup.async_update_weights def async_update_weights(self): \u0026#34;\u0026#34;\u0026#34;Broadcast weights from rank 0 to all other ranks.\u0026#34;\u0026#34;\u0026#34; return [actor.update_weights.remote() for actor in self._actor_handlers] # TrainRayActor.update_weights @timer def update_weights(self): if self.args.debug_train_only or self.args.debug_rollout_only: return torch.cuda.empty_cache() if not self.args.colocate: self.update_weights_from_distributed() # 分布式模式 else: self.update_weights_from_tensor() # 张量模式 dist.barrier() clear_memory() print_memory(\u0026#34;after update_weights\u0026#34;) 以及权重同步的两种模式：\n其中分布式模式适用于多节点分布式训练，利用高效的集合通信，比如大规模模型训练、需要跨节点权重同步的。\n张量模式无网络依赖，延迟低。适合单机多进程训练，内存充足（利用共享内存，传输快）的场景。适合中小规模模型、且对网络延迟比较敏感的场景。\n分析一下不同场景的延迟来源:\n$$Latency_{distributed} = Latency_{net} + Time_{serialize} + Time_{broadcast}$$\n$$Latency_{tensor} = Time_{memcopy} + Time_{serialize} + Time_{ipctransfer}$$\n分布式模式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def update_weights_from_distributed(self): # 1. 暂停 rollout engines if dist.get_rank() == 0: ray.get([engine.pause_generation.remote() for engine in self.rollout_engines]) ray.get([engine.reset_prefix_cache.remote() for engine in self.rollout_engines]) dist.barrier() # 2. 通过 NCCL 广播权重 buffer_size = 0 converted_named_tensors = [] for name, param in update_weight_utils.named_parameters(self.args, self.model): param = update_weight_utils.all_gather_param(name, param) param = update_weight_utils.remove_padding(name, param, self.vocab_size) if buffer_size + param_size \u0026gt; self.args.update_weight_buffer_size: self._update_param_from_distributed(converted_named_tensors) buffer_size = 0 converted_named_tensors += update_weight_utils.convert_to_hf( self.args, self.model_name, name, param, self.quantization_config ) buffer_size += param_size # 3. 恢复 rollout engines if dist.get_rank() == 0: ray.get([engine.continue_generation.remote() for engine in self.rollout_engines]) dist.barrier() 张量模式 训练GPU -\u0026gt; PCIe -\u0026gt; CPU内存 -\u0026gt; 序列化 -\u0026gt; 共享内存 -\u0026gt; 反序列化 -\u0026gt; CPU内存 -\u0026gt; PCIe -\u0026gt; rollout GPU\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def update_weights_from_tensor(self): # 1. 重置 prefix cache if rank == 0: ray.get([engine.reset_prefix_cache.remote() for engine in self.rollout_engines]) dist.barrier() # 2. 通过 IPC 共享内存传输权重 for param_infos in self.param_info_buckets: params = [] for info in param_infos: if dist.get_rank() == info.src_rank: params.append(torch.nn.Parameter(self.params_dict[info.name].to(device=torch.cuda.current_device()))) else: params.append(torch.empty(info.shape, dtype=info.dtype, device=torch.cuda.current_device())) # 广播参数 if pp_size \u0026gt; 1: handles = [] for info, param in zip(param_infos, params): handles.append(torch.distributed.broadcast(param, src=info.src_rank, group=mpu.get_pipeline_model_parallel_group(), async_op=True)) for handle in handles: handle.wait() # 3. 通过 IPC 传输到 rollout engines converted_named_tensors = [] for info, param in zip(param_infos, params): param = update_weight_utils.all_gather_param(info.name, param) param = update_weight_utils.remove_padding(info.name, param, self.vocab_size) converted_named_tensors.extend(update_weight_utils.convert_to_hf( self.args, self.model_name, info.name, param, self.quantization_config )) self._update_converted_params_from_tensor(converted_named_tensors) def _update_converted_params_from_tensor(self, converted_named_tensors): # 序列化权重并通过 IPC 传输 ipc_handle = MultiprocessingSerializer.serialize(converted_named_tensors, output_str=True) ipc_handles = [None] * dist.get_world_size(self._ipc_gather_group) if self._ipc_gather_src == dist.get_rank() else None dist.gather_object(ipc_handle, object_gather_list=ipc_handles, dst=self._ipc_gather_src, group=self._ipc_gather_group) if dist.get_rank() == self._ipc_gather_src: ref = self._ipc_engine.update_weights_from_tensor.remote(ipc_handles=ipc_handles) ray.get(ref) 训练数据流转角度 train.py主流程中训练、采样数据流转、权重同步时序：\nsequenceDiagram participant User participant Main participant Ray participant ActorGroup participant RolloutGroup participant DataBuffer User-\u0026gt;\u0026gt;Main: start training Main-\u0026gt;\u0026gt;Ray: create placement groups Ray-\u0026gt;\u0026gt;ActorGroup: launch training actors Ray-\u0026gt;\u0026gt;RolloutGroup: launch rollout actors Main-\u0026gt;\u0026gt;ActorGroup: initialize model/weights Main-\u0026gt;\u0026gt;RolloutGroup: initialize rollout/data buffer loop for each rollout_id Main-\u0026gt;\u0026gt;RolloutGroup: async_generate(rollout_id) RolloutGroup-\u0026gt;\u0026gt;DataBuffer: write new data Main-\u0026gt;\u0026gt;ActorGroup: async_train(rollout_id) ActorGroup-\u0026gt;\u0026gt;DataBuffer: read training data ActorGroup--\u0026gt;\u0026gt;Main: training done Main-\u0026gt;\u0026gt;ActorGroup: async_update_weights() alt evaluation or save needed Main-\u0026gt;\u0026gt;ActorGroup: async_eval/async_save_model end end 关于data buffer 在slime/ray/buffer.py下，实现为Ray actor(@ray.remote class Buffer)，支持高效的本地缓存和流转，数据在传输时使用Ray的对象存储，数据结构保存在Ray actor的进程内存中。\n主要功能 数据缓存与流转：缓存采样生成的数据，供训练 actor 消费，实现采样与训练的解耦。\n支持多种数据源：可从全局数据集（如 prompt 数据）或采样生成数据中获取样本。\n数据分组与批处理：每组样本可包含多个 prompt/response，便于批量训练和采样。\n元数据与状态管理：支持元数据、epoch、样本索引等状态的保存与恢复。\n支持 offload/onload：可将 buffer 状态保存到本地/远程，支持断点续训和分布式场景。\n详细类图 classDiagram class Buffer { - args - buffer : list\u0026lt;list\u0026lt;Sample\u0026gt;\u0026gt; - buffer_filter - train_data_pool : dict - eval_data_pool : dict - epoch_id : int - sample_index : int - sample_offset : int - metadata : dict - dataset : JsonlDataset | None - generate_rollout - eval_generate_rollout + __init__(args) + get_num_rollout_per_epoch() + get_samples(num_samples) + add_samples(samples) + generate(rollout_id, evaluation) + get_data(rollout_id, evaluation) + save(rollout_id) + load(rollout_id) + update_metadata(metadata) + get_metadata() + get_buffer_length() } class Sample { +index +tokens +response_length +reward +rewards +status +loss_mask +metadata } class JsonlDataset { +samples : list\u0026lt;Sample\u0026gt; +shuffle(epoch_id) } Buffer o-- \u0026#34;list\u0026lt;list\u0026gt;\u0026#34; Sample Buffer o-- JsonlDataset Buffer ..\u0026gt; buffer_filter : uses Buffer ..\u0026gt; generate_rollout : uses Buffer ..\u0026gt; eval_generate_rollout : uses Buffer和主流程关键模块的关联图 flowchart TD subgraph RayActors TrainActor[训练 Actor \u0026lt;PPOActor\u0026gt;] RolloutActor[采样 Actor \u0026lt;RolloutGroup\u0026gt;] end BufferInst[Buffer \u0026lt;Ray actor\u0026gt;] Dataset[JsonlDataset] SampleObj[Sample] RolloutActor -- 生成数据 --\u0026gt; BufferInst BufferInst -- add_samples(samples) --\u0026gt; BufferInst TrainActor -- get_samples(num) --\u0026gt; BufferInst BufferInst -- get_samples 返回 list\u0026lt;list\u0026lt;Sample\u0026gt;\u0026gt; --\u0026gt; TrainActor BufferInst -- dataset.samples --\u0026gt; Dataset BufferInst -- 缓存/流转 --\u0026gt; SampleObj 数据流转过程举例 典型流程：采样生成 -\u0026gt; buffer缓存 -\u0026gt; 训练消费\n采样生成数据 RolloutActor（采样 actor）调用 buffer.generate(rollout_id)\ngenerate 方法会调用 generate_rollout 函数，生成一批样本（Sample 对象），如：\ndata = generate_rollout(args, rollout_id, buffer, evaluation=False) 生成的数据通过 set_data 写入 train_data_pool\n采样数据写入 buffer 采样 actor 也可以直接调用 buffer.add_samples(samples)\nsamples 是 list[list[Sample]]，每组样本对应一个 prompt 的多个采样\n训练 actor 获取数据 训练 actor（PPOActor）调用 buffer.get_samples(num_samples)\nget_samples 优先从 buffer（缓存队列）出队样本组，不足时从 dataset 生成\n返回 list[list[Sample]]，每组样本可直接用于训练\n训练 actor 消费数据 训练 actor 拿到样本后，进行训练、更新权重等操作 Buffer的generate职责以及如何实现弱耦合 Buffer 的 generate 方法本质上是调用外部采样/推理函数（如 SGLang、模型采样等），这些函数通过参数动态注入（如 args.rollout_function_path），所以只要采样接口一致，可以自己实现一个比如generate_rollout_vllm.py并在参数中指向它即可。 实现新的采样函数，其接口为： 1 2 3 4 def generate_rollout(args, rollout_id, buffer, evaluation=False): # 这里调用 vllm 的推理接口 samples = vllm_generate(args, rollout_id) return samples 在启动训练的时候，参数指定: --rollout_function_path path/to/generate_rollout_vllm.py:generate_rollout buffer中的伪代码可以表示为: 1 2 3 4 5 6 7 # buffer.py 内部 self.generate_rollout = load_function(self.args.rollout_function_path) def generate(self, rollout_id, evaluation=False): generate_fn = self.eval_generate_rollout if evaluation else self.generate_rollout data = generate_fn(self.args, rollout_id, self, evaluation=evaluation) self._set_data(data, evaluation=evaluation) 因此Buffer 只负责： 调用 generate_rollout（外部推理/采样后端）\n缓存采样得到的数据\n提供数据给训练 actor\n推理/采样的具体实现（如 SGLang、模型后端）完全在 generate_rollout 这样的外部函数里，Buffer 只是“调度者”和“缓存者”。 默认对SGLang的支持 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # sglang_example.py - 默认的 SGLang 采样实现 def generate_rollout(args, rollout_id, data_buffer, evaluation=False): \u0026#34;\u0026#34;\u0026#34;默认的 generate_rollout 函数，使用 SGLang 进行采样\u0026#34;\u0026#34;\u0026#34; assert args.rollout_global_dataset if evaluation: return run(eval_rollout(args, rollout_id)) return run(generate_rollout_async(args, rollout_id, data_buffer)) # 异步采样实现 async def generate_rollout_async(args, rollout_id: int, data_buffer) -\u0026gt; list[list[Sample]]: # 1. 从 buffer 获取 prompt 样本 samples = data_buffer.get_samples(args.over_sampling_batch_size) # 2. 提交 SGLang 生成任务 state.submit_generate_tasks(samples) # 3. 等待生成完成 done, state.pendings = await asyncio.wait(state.pendings, return_when=asyncio.FIRST_COMPLETED) # 4. 处理生成结果 for task in done: group = task.result() data.append(group) return data 训推与buffer的api层级的交互 rollout_id对应一次完整的采样-训练-评估循环\n数据流动方式为：\n采样：prompt 样本 → SGLang 生成 → 存入 pool\n训练：从 pool 获取 → 训练 → 删除\n评估：从 pool 获取 → 评估 → 删除\ndatabuffer中数据结构的作用区别：\nself.buffer：采样过程中的 prompt 缓存和样本管理\ntrain_data_pool/eval_data_pool：rollout 粒度的数据对齐和生命周期管理\n主流程(train.py) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def train(args): # 初始化 actor_model = create_actor_group(args, pgs[\u0026#34;actor\u0026#34;]) rollout_generator = create_rollout_group(args, pgs[\u0026#34;rollout\u0026#34;]) # 主循环 for rollout_id in range(args.start_rollout_id, args.num_rollout): # 训练采样 ray.get(rollout_generator.async_generate(rollout_id)) # 训练 ray.get(actor_model.async_train(rollout_id)) # 评估采样 ray.get(rollout_generator.async_generate(rollout_id, evaluation=True)) # 评估 ray.get(actor_model.async_eval(rollout_id)) Rollout Actor与Buffer交互 采样阶段 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # RolloutGroup.async_generate def async_generate(self, rollout_id, evaluation=False): return self.data_buffer.generate.remote(rollout_id, evaluation=evaluation) # Buffer.generate def generate(self, rollout_id, evaluation=False): # 调用外部采样函数 generate_fn = self.eval_generate_rollout if evaluation else self.generate_rollout data = generate_fn(self.args, rollout_id, self, evaluation=evaluation) # 写入对应的 pool self._set_data(data, evaluation=evaluation) # Buffer._set_data def _set_data(self, data, evaluation=False): data_pool = self.eval_data_pool if evaluation else self.train_data_pool if not evaluation: data = self._convert_samples_to_train_data(data) # 转换为训练格式 data_pool[self.rollout_id] = data # 存入 pool 其中外部采样函数（以 sglang_example.py 为例） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # generate_rollout (sglang_example.py) def generate_rollout(args, rollout_id, data_buffer, evaluation=False): if evaluation: return run(eval_rollout(args, rollout_id)) # 从 buffer 获取 prompt 样本 samples = data_buffer.get_samples(args.over_sampling_batch_size) # 使用 SGLang 生成 response # ... 生成逻辑 ... # 返回生成的样本 return data # 在生成过程中可能还会调用 data_buffer.add_samples(samples) # 添加中间结果到 buffer Train Actor与Buffer交互 训练阶段 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 # RayTrainGroup.async_train def async_train(self, rollout_id, with_data_fetching=True): return [actor.train.remote(rollout_id, with_data_fetching=with_data_fetching) for actor in self._actor_handlers] # TrainRayActor.train def train(self, rollout_id, with_data_fetching=True): if with_data_fetching: self.get_rollout_data(rollout_id) # 获取训练数据 # ... 训练逻辑 ... # TrainRayActor.get_rollout_data def get_rollout_data(self, rollout_id): megatron_utils.process_rollout_data(rollout_id, self.args, self.data_buffer) # process_rollout_data (megatron_utils/data.py) def process_rollout_data(rollout_id, args, data_buffer): if rank == 0: # 从 buffer 获取训练数据 data = ray.get(data_buffer.get_data.remote(rollout_id)) dist.broadcast_object_list([data], src=0) else: data = [None] dist.broadcast_object_list(data, src=0) data = data[0] # 处理数据用于训练 # ... 数据预处理逻辑 ... # Buffer.get_data def get_data(self, rollout_id, evaluation=False): data_pool = self.train_data_pool if not evaluation else self.eval_data_pool assert rollout_id in data_pool data = data_pool[rollout_id] del data_pool[rollout_id] # 取出后删除 return data 评估阶段 1 2 3 4 5 6 7 8 9 10 11 12 13 # RayTrainGroup.async_eval def async_eval(self, rollout_id): return [actor.eval.remote(rollout_id) for actor in self._actor_handlers] # TrainRayActor.eval def eval(self, rollout_id): megatron_utils.log_eval_data(rollout_id, self.args, self.data_buffer) # log_eval_data (megatron_utils/data.py) def log_eval_data(rollout_id, args, data_buffer): if rank == 0: data = ray.get(data_buffer.get_data.remote(rollout_id, evaluation=True)) # ... 评估和日志逻辑 ... 更细粒度的实现分析 构造参数 args：配置参数对象，通常由 argparse 解析得到，包含所有训练/采样/数据相关的配置项。 主要成员变量 名称 类型 作用与说明 self.args object 配置参数，包含所有 buffer 运行所需的参数。 self.buffer list[list[Sample]] 主缓存队列，存储样本组（每组为同一 prompt 的多个采样）。 self.buffer_filter function 样本出队策略函数，决定如何从 buffer 取出样本组。可自定义。 self.train_data_pool dict[int, Any] 训练数据池，key 为 rollout_id，value 为训练数据。 self.eval_data_pool dict[int, Any] 评估数据池，key 为 rollout_id，value 为评估数据。 self.epoch_id int 当前数据集 epoch 号，用于 shuffle。 self.sample_index int 样本全局索引，递增。 self.sample_offset int 当前数据集采样偏移量。 self.metadata dict 存储元数据（如采样状态、统计信息等）。 self.dataset JsonlDataset or None 全局数据集对象，支持 prompt 初始化、shuffle。 self.generate_rollout function 训练采样函数，外部注入，负责生成训练数据。 self.eval_generate_rollout function 评估采样函数，外部注入，负责生成评估数据。 self.rollout_id int 当前 rollout 的 id（仅 generate 时临时赋值）。 依赖对象与数据结构 Sample 采样/训练的基本数据单元，定义见 slime/utils/types.py。 典型字段：index, tokens, response_length, reward, rewards, status, loss_mask, metadata 等。 JsonlDataset 数据集对象，支持从 jsonl 文件加载样本，支持 shuffle、按 key 取 prompt/label/metadata。 主要属性：samples（list[Sample]），shuffle(epoch_id)。 buffer_filter 样本出队策略函数，签名为 buffer_filter(args, rollout_id, buffer, num_samples)。 默认实现为 pop_first（先进先出），可通过参数自定义。 generate_rollout / eval_generate_rollout 外部注入的采样/推理函数，签名为 generate_rollout(args, rollout_id, buffer, evaluation=False)。 负责实际调用推理后端（如 SGLang、vllm）生成样本。 主要方法定义与作用 init(self, args) 初始化 buffer，加载参数、数据集、采样/评估函数、buffer_filter 等。 get_num_rollout_per_epoch(self) 返回每个 epoch 可采样的 rollout 数量（仅全局数据集模式下有效）。 get_samples(self, num_samples) 获取指定数量的样本组（list[list[Sample]]）。 优先从 self.buffer 出队，不足时从 self.dataset 生成新样本组。 支持分组采样（每组 n_samples_per_prompt 个样本）。 _get_samples_from_buffer(self, num_samples) 内部方法，调用 buffer_filter 从 self.buffer 出队样本组。 add_samples(self, samples) 向 buffer 添加样本组（list[list[Sample]]）。 每组样本对应同一 prompt 的多个采样。 generate(self, rollout_id, evaluation=False) 调用 generate_rollout 或 eval_generate_rollout 生成数据，写入 train_data_pool 或 eval_data_pool。 采样逻辑由外部函数实现，buffer 只负责调度和缓存。 get_data(self, rollout_id, evaluation=False) 获取指定 rollout_id 的训练/评估数据（从 train_data_pool 或 eval_data_pool 取出并删除）。 _convert_samples_to_train_data(self, samples) 将采样得到的样本（Sample 列表）转换为训练数据格式（如 tokens、rewards、loss_masks 等）。 _set_data(self, data, evaluation=False) 将数据写入 train_data_pool 或 eval_data_pool。 支持 debug 数据保存。 update_metadata(self, metadata) 更新 buffer 的元数据。 get_metadata(self) 获取 buffer 的元数据。 get_buffer_length(self) 返回当前 buffer 中缓存的样本组数量。 save(self, rollout_id) 保存 buffer 状态（如 sample_offset、epoch_id、sample_index、metadata）到本地文件。 load(self, rollout_id=None) 加载 buffer 状态（如 sample_offset、epoch_id、sample_index、metadata）从本地文件。 主要数据结构 self.buffer 类型：list[list[Sample]] 结构：每个元素是一个样本组（同一 prompt 的多个采样），每组为 list[Sample]。 用途：缓存采样生成的数据，供训练 actor 批量消费。 self.train_data_pool 作用：缓存训练数据，供训练 actor 消费\n数据结构：dict[int, Any]，key 为 rollout_id，value 为训练数据（包含 tokens、rewards、loss_masks 等）\n用途：存储每个 rollout 的训练样本，用于 PPO 训练\nself.eval_data_pool 作用：缓存评估数据，供评估流程使用\n数据结构：dict[int, Any]，key 为 rollout_id，value 为评估数据\n用途：存储每个 rollout 的评估样本，用于模型性能评估\nself.dataset 类型：JsonlDataset\n结构：包含 samples（list[Sample]），支持 shuffle。\n用途：全局数据集模式下，按需生成新样本组。\nself.metadata 类型：dict\n结构：任意元数据（如采样状态、统计信息等）。\n用途：记录 buffer 的附加信息，便于状态恢复和监控。\n数据流转示意 采样 actor 生成数据\n调用 buffer.generate(rollout_id) generate_rollout(args, rollout_id, buffer) → 返回 list[Sample] buffer._set_data(data) → 写入 train_data_pool[rollout_id] 训练 actor 获取数据\n调用 buffer.get_samples(num_samples) 优先从 self.buffer 出队，不足时从 self.dataset 生成 返回 list[list[Sample]]，供训练使用 训练 actor 消费数据\n训练 actor 拿到样本组后，进行训练、权重更新等操作 具体的例子：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 # 1. 采样生成训练数据 rollout_id = 100 rollout_generator.async_generate(rollout_id) # evaluation=False # Buffer 内部： # - 调用 generate_rollout(args, 100, buffer, evaluation=False) # - 生成训练样本：[Sample1, Sample2, ...] # - 转换为训练格式：{\u0026#34;tokens\u0026#34;: [...], \u0026#34;rewards\u0026#34;: [...], \u0026#34;loss_masks\u0026#34;: [...]} # - 写入 train_data_pool[100] # 2. 训练消费数据 actor_model.async_train(rollout_id) # Buffer 内部： # - 从 train_data_pool[100] 取出训练数据 # - 返回给训练 actor # - 删除 train_data_pool[100] # 3. 评估生成数据 rollout_generator.async_generate(rollout_id, evaluation=True) # Buffer 内部： # - 调用 eval_generate_rollout(args, 100, buffer, evaluation=True) # - 生成评估样本 # - 写入 eval_data_pool[100] # 4. 评估消费数据 actor_model.async_eval(rollout_id) # Buffer 内部： # - 从 eval_data_pool[100] 取出评估数据 # - 返回给评估 actor # - 删除 eval_data_pool[100] 流水掩盖分析 目前slime框架计算ref log_p -\u0026gt; old log_p -\u0026gt; current log_p是顺序执行的，训练阶段需要等待所有log_p计算完成，且采样-\u0026gt;训练-\u0026gt;权重同步之间也是通过ray.get()进行同步的，因此单actor异步掩盖的部分是计算reward、数据转换、数据存储等，而且主要的优化不是主流程上的流水掩盖而是并行异步带来的优化，比如并行计算多个样本的奖励、生成响应的时候同时计算奖励，当然还有远程reward model的网络I/O可以掩盖掉。\n当前框架的约束 sequenceDiagram participant Main as Main Loop participant Rollout as Rollout Actor participant Buffer as Data Buffer participant Train as Train Actor participant RM as Reward Model Note over Main, RM: 时间线 T1 - Rollout 1 Main-\u0026gt;\u0026gt;Rollout: async_generate(rollout_id=1) Rollout-\u0026gt;\u0026gt;Buffer: 生成样本 Buffer-\u0026gt;\u0026gt;RM: 计算奖励（异步，可以掩盖） Rollout--\u0026gt;\u0026gt;Main: 完成 Note over Main, RM: 时间线 T2 - Train 1（必须等待 T1 完成） Main-\u0026gt;\u0026gt;Train: async_train(rollout_id=1) Train-\u0026gt;\u0026gt;Buffer: 获取数据 Train--\u0026gt;\u0026gt;Main: 完成 Note over Main, RM: 时间线 T3 - Update Weights（必须等待 T2 完成） Main-\u0026gt;\u0026gt;Train: async_update_weights() Train--\u0026gt;\u0026gt;Main: 完成 Note over Main, RM: 时间线 T4 - Rollout 2（必须等待 T3 完成） Main-\u0026gt;\u0026gt;Rollout: async_generate(rollout_id=2) 当前框架的掩盖效果 graph TD subgraph \u0026#34;Rollout 阶段内部掩盖\u0026#34; A1[生成响应] --\u0026gt; B1[计算奖励] A2[生成响应] --\u0026gt; B2[数据预处理] A3[生成响应] --\u0026gt; B3[格式转换] B1 --\u0026gt; C1[样本完成] B2 --\u0026gt; C1 B3 --\u0026gt; C1 style A1 fill:#e8f5e8 style B1 fill:#e8f5e8 style B2 fill:#e8f5e8 style B3 fill:#e8f5e8 end subgraph \u0026#34;多 Actor 并行\u0026#34; D1[Train Actor 1] --\u0026gt; E1[并行训练] D2[Train Actor 2] --\u0026gt; E2[并行训练] D3[Train Actor 3] --\u0026gt; E3[并行训练] style D1 fill:#e8f5e8 style D2 fill:#e8f5e8 style D3 fill:#e8f5e8 end subgraph \u0026#34;内存管理掩盖\u0026#34; F1[模型 offload] --\u0026gt; G1[内存释放] F2[数据持久化] --\u0026gt; G2[磁盘 I/O] style F1 fill:#e8f5e8 style F2 fill:#e8f5e8 end 不能掩盖的部分 graph TD subgraph \u0026#34;主流程同步约束\u0026#34; A[Rollout 1] --\u0026gt; B[Train 1] B --\u0026gt; C[Update Weights 1] C --\u0026gt; D[Rollout 2] D --\u0026gt; E[Train 2] E --\u0026gt; F[Update Weights 2] style A fill:#ffebee style B fill:#ffebee style C fill:#ffebee style D fill:#ffebee style E fill:#ffebee style F fill:#ffebee end subgraph \u0026#34;训练阶段同步\u0026#34; G[获取数据] --\u0026gt; H[计算 ref log_p] H --\u0026gt; I[计算 old log_p] I --\u0026gt; J[计算 current log_p] J --\u0026gt; K[执行训练] style G fill:#ffebee style H fill:#ffebee style I fill:#ffebee style J fill:#ffebee style K fill:#ffebee end data buffer当前的收益 sequenceDiagram participant Rollout as Rollout Actor participant Buffer as Data Buffer participant Train as Train Actor participant RM as Reward Model Note over Rollout, RM: 时间线 T1 - 并行操作 Rollout-\u0026gt;\u0026gt;Buffer: 添加样本（异步） Buffer-\u0026gt;\u0026gt;RM: 计算奖励（异步，与添加并行） Rollout-\u0026gt;\u0026gt;Buffer: 数据转换（异步） Note over Rollout, RM: 时间线 T2 - 数据获取 Train-\u0026gt;\u0026gt;Buffer: 获取训练数据（异步） Buffer-\u0026gt;\u0026gt;Train: 返回数据 Note over Rollout, RM: 时间线 T3 - 内存管理 Buffer-\u0026gt;\u0026gt;Buffer: 数据持久化（异步） Buffer-\u0026gt;\u0026gt;Buffer: 内存清理（异步） 异步数据操作：添加、获取、转换可以并行\n内存管理：持久化和清理可以异步\n多进程访问：多个 Actor 可以并发访问\n可以进一步掩盖的方案 log_p计算掩盖 以PPO流程为例，reference model的log_p计算，权重固定（不参与训练），不计算梯度，可以提前计算；old actor的log_p计算，使用训练前的模型状态，可以在数据生成时提前计算。不过因为reward计算和log_p计算都需要完整的采样生成，所以实际应该只是reward计算（以及其他可并行项）和log_p计算之间的流水掩盖。\ngraph TD subgraph \u0026#34;当前实现\u0026#34; A1[生成数据] --\u0026gt; B1[等待完成] B1 --\u0026gt; C1[计算 ref log_p] C1 --\u0026gt; D1[计算 old log_p] D1 --\u0026gt; E1[计算 current log_p] E1 --\u0026gt; F1[训练] style A1 fill:#ffebee style B1 fill:#ffebee style C1 fill:#ffebee style D1 fill:#ffebee style E1 fill:#ffebee style F1 fill:#ffebee end subgraph \u0026#34;优化方案\u0026#34; A2[生成数据] --\u0026gt; B2[并行计算 log_p] B2 --\u0026gt; C2[ref log_p 计算] B2 --\u0026gt; D2[old log_p 计算] C2 --\u0026gt; E2[数据准备完成] D2 --\u0026gt; E2 E2 --\u0026gt; F2[训练（只需 current log_p）] style A2 fill:#e8f5e8 style B2 fill:#e8f5e8 style C2 fill:#e8f5e8 style D2 fill:#e8f5e8 style E2 fill:#e8f5e8 style F2 fill:#e8f5e8 end sequenceDiagram participant Main as Main Loop participant Rollout as Rollout Actor participant Buffer as Data Buffer participant Train as Train Actor Note over Main, Train: 当前实现时间线 Main-\u0026gt;\u0026gt;Rollout: Rollout 1 Rollout-\u0026gt;\u0026gt;Buffer: 生成 + 奖励计算 Buffer--\u0026gt;\u0026gt;Rollout: 完成 Rollout--\u0026gt;\u0026gt;Main: 完成 Main-\u0026gt;\u0026gt;Train: Train 1 Train-\u0026gt;\u0026gt;Train: 计算所有 log_p（顺序） Train-\u0026gt;\u0026gt;Train: 训练 Train--\u0026gt;\u0026gt;Main: 完成 Note over Main, Train: 优化方案时间线 Main-\u0026gt;\u0026gt;Rollout: Rollout 1 Rollout-\u0026gt;\u0026gt;Buffer: 生成 + 奖励计算 + 并行 log_p Buffer--\u0026gt;\u0026gt;Rollout: 完成（更快） Rollout--\u0026gt;\u0026gt;Main: 完成 Main-\u0026gt;\u0026gt;Train: Train 1 Train-\u0026gt;\u0026gt;Train: 只需计算 current log_p Train-\u0026gt;\u0026gt;Train: 训练 Train--\u0026gt;\u0026gt;Main: 完成 sequenceDiagram participant Rollout as Rollout Actor participant Buffer as Data Buffer participant Ref as Reference Model participant Old as Old Actor participant Train as Train Actor Note over Rollout, Train: 时间线 T1 - 并行计算 Rollout-\u0026gt;\u0026gt;Buffer: 生成样本数据 Buffer-\u0026gt;\u0026gt;Ref: 计算 ref log_p（并行） Buffer-\u0026gt;\u0026gt;Old: 计算 old log_p（并行） Note over Rollout, Train: 时间线 T2 - 训练 Train-\u0026gt;\u0026gt;Buffer: 获取数据 + log_p Train-\u0026gt;\u0026gt;Train: 计算 current log_p Train-\u0026gt;\u0026gt;Train: 执行训练步骤 ","permalink":"http://localhost:64667/posts/aiinfra/02-slime/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/THUDM/slime\"\u003ehttps://github.com/THUDM/slime\u003c/a\u003e\u003cbr\u003e\n一个异步实现但是非完全异步的RL框架\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"总体架构\"\u003e总体架构\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e从源码模块划分，有三大核心模块：\n\u003cul\u003e\n\u003cli\u003etraining（Megatron）：主训练流程，负责模型参数更新。\u003c/li\u003e\n\u003cli\u003erollout（SGLang + router）：负责采样、奖励/验证生成，产生训练数据。\u003c/li\u003e\n\u003cli\u003edata buffer：桥接训练与采样，管理数据流、缓存与生成方式。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e分布式调度：关于资源分配、actor启动、任务调度都由于Ray管理，支持异步训练和采样\u003c/li\u003e\n\u003cli\u003e插件机制：支持自定义buffer、模型、模型格式转换（mbridge）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre class=\"mermaid\"\u003e\n  flowchart LR\n    subgraph Ray[Ray 分布式调度]\n        A1[Actor Group\u0026lt;br\u0026gt;训练 Actor]\n        A2[Rollout Group\u0026lt;br\u0026gt;采样/生成 Actor]\n        A3[Placement Group\u0026lt;br\u0026gt;资源分配]\n    end\n    subgraph Training[Training \u0026lt;Megatron\u0026gt;]\n        T1[模型训练]\n        T2[权重同步]\n        T3[评估/保存]\n    end\n    subgraph Rollout[Rollout \u0026lt;SGLang+Router\u0026gt;]\n        R1[采样/生成]\n        R2[奖励模型]\n        R3[过滤器]\n    end\n    subgraph Buffer[Data Buffer]\n        B1[数据缓存]\n        B2[数据流转]\n        B3[Offload/Onload]\n    end\n    subgraph Plugins[插件机制]\n        P1[Buffer 插件]\n        P2[Model 插件]\n        P3[mbridge 格式转换]\n    end\n\n    A1--\u0026gt;|训练数据|B1\n    A2--\u0026gt;|生成数据|B1\n    B1--\u0026gt;|数据流|A1\n    B1--\u0026gt;|数据流|A2\n    A1--\u0026gt;|权重同步|A2\n    A1--\u0026gt;|评估/保存|T3\n    A2--\u0026gt;|采样/奖励/过滤|R1\n    R1--\u0026gt;|奖励|R2\n    R1--\u0026gt;|过滤|R3\n    B1--\u0026gt;|插件扩展|P1\n    A1--\u0026gt;|模型扩展|P2\n    A1--\u0026gt;|格式转换|P3\n    A3--\u0026gt;|资源分配|A1\n    A3--\u0026gt;|资源分配|A2\n\u003c/pre\u003e\n\n\u003ch2 id=\"各模块视角的关系图\"\u003e各模块视角的关系图\u003c/h2\u003e\n\u003ch3 id=\"slimerollout-组件图\"\u003eslime/rollout 组件图\u003c/h3\u003e\n\u003cp\u003erollout 负责采样、奖励、过滤，支持多种采样/奖励/过滤策略。\u003c/p\u003e","title":"[LLM4RL] 异步RL框架: Slime"},{"content":" https://github.com/inclusionAI/AReaL\n纯异步RL方案\n异步PPO训练调用流程 graph TD A[用户执行: examples/run_async_ppo.sh] --\u0026gt; B[training/main_async_ppo.py] B --\u0026gt; C[AsyncPPOMATHConfig配置解析] C --\u0026gt; D[training/utils.py: run_experiment] D --\u0026gt; E[Ray初始化] E --\u0026gt; F[exp_cfg.initial_setup] F --\u0026gt; G[AsyncRLExperimentConfig.initial_setup] G --\u0026gt; H[创建ExperimentConfig] H --\u0026gt; I[启动Workers] I --\u0026gt; J[MasterWorker] I --\u0026gt; K[ModelWorker] I --\u0026gt; L[GenerationServer] I --\u0026gt; M[GserverManager] I --\u0026gt; N[RolloutWorker] %% MasterWorker训练流程 J --\u0026gt; J1[MasterWorker._poll_async] J1 --\u0026gt; J2[FunctionExecutor.execute_step] J2 --\u0026gt; J3[执行数据流图遍历] J3 --\u0026gt; J4[发送训练请求到ModelWorker] %% ModelWorker处理流程 K --\u0026gt; K1[ModelWorker._poll] K1 --\u0026gt; K2[接收MasterWorker请求] K2 --\u0026gt; K3[处理训练/推理请求] K3 --\u0026gt; K4[执行模型前向/反向传播] %% Rollout流程 N --\u0026gt; N1[RolloutWorker._poll_async] N1 --\u0026gt; N2[load_next_data] N2 --\u0026gt; N3[allocate_new_rollout] N3 --\u0026gt; N4[agent.collect_trajectory] N4 --\u0026gt; N5[env.step计算奖励] N5 --\u0026gt; N6[推送数据到训练端] %% 生成服务器流程 L --\u0026gt; L1[GenerationServer._poll] L1 --\u0026gt; L2[启动SGLang子进程] L2 --\u0026gt; L3[处理生成请求] %% 生成服务器管理器 M --\u0026gt; M1[GserverManager._poll] M1 --\u0026gt; M2[HTTP服务线程] M2 --\u0026gt; M3[请求调度和权重更新] %% 数据流 N6 --\u0026gt; O[stream_dataset.py] O --\u0026gt; J4 %% 异步通信 J4 -.-\u0026gt;|异步请求| K2 N3 -.-\u0026gt;|HTTP请求| M2 M2 -.-\u0026gt;|调度请求| L3 %% 权重更新 K4 --\u0026gt; P[参数更新] P --\u0026gt; Q[权重同步] Q --\u0026gt; M3 M3 --\u0026gt; R[更新生成服务器权重] style A fill:#e1f5fe style J fill:#f3e5f5 style K fill:#e8f5e8 style L fill:#fff3e0 style M fill:#fce4ec style N fill:#f1f8e9 用户入口到配置解析 examples/run_async_ppo.sh → training/main_async_ppo.py\n通过Hydra解析CLI参数为AsyncPPOMATHConfig\n调用initial_setup()生成ExperimentConfig\nWorker启动和初始化 training/utils.py:run_experiment()启动Ray集群\n根据scheduling_setup()创建各类Worker\n每个Worker执行_configure()和_poll()/_poll_async()\n训练端数据流 MasterWorker._poll_async() → FunctionExecutor.execute_step()\n通过request_reply_stream发送请求到ModelWorker\nModelWorker处理训练/推理请求，执行模型计算\nRollout端数据流 RolloutWorker._poll_async() → agent.collect_trajectory()\n通过GserverManager调度生成请求到GenerationServer\n通过stream_dataset.py推送轨迹数据到训练端\n异步通信机制 训练端和Rollout端通过TCP Socket通信\nGserverManager提供HTTP API进行请求调度\n权重更新通过文件系统同步\n全局架构 部署形态 进程部署架构 以单机8卡为例\nMasterWorker：1个CPU进程，协调训练流程\nModelWorker：6个GPU进程（GPU0-5），执行模型训练\nGenerationServer：2个GPU进程（GPU6-7），运行SGLang推理服务\nGserverManager：1个CPU进程，管理生成服务器\nRolloutWorker：多个CPU进程，执行智能体逻辑\n训推资源分配 框架支持分离部署和共享部署两种模式\n分离部署 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ┌─────────────────────────────────────────────────────────────┐ │ Ray Cluster (1 Node, 8 GPUs) │ ├─────────────────────────────────────────────────────────────┤ │ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ │ │ │MasterWorker │ │ModelWorker │ │ModelWorker │ │ │ │ (CPU) │ │ (GPU0) │ │ (GPU1) │ │ │ └─────────────┘ └─────────────┘ └─────────────┘ │ │ │ │ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ │ │ │ModelWorker │ │ModelWorker │ │ModelWorker │ │ │ │ (GPU2) │ │ (GPU3) │ │ (GPU4) │ │ │ └─────────────┘ └─────────────┘ └─────────────┘ │ │ │ │ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ │ │ │ModelWorker │ │GServerMgr │ │RolloutWorker│ │ │ │ (GPU5) │ │ (CPU) │ │ (CPU) │ │ │ └─────────────┘ └─────────────┘ └─────────────┘ │ │ │ │ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ │ │ │GenServer │ │GenServer │ │RolloutWorker│ │ │ │ (SGLang) │ │ (SGLang) │ │ (CPU) │ │ │ │ (GPU6) │ │ (GPU7) │ └─────────────┘ │ │ └─────────────┘ └─────────────┘ │ └─────────────────────────────────────────────────────────────┘ 训练端：使用4个GPU（d2p2m1 = 2×2×1）\n推理端：使用4个GPU（d4p1m1 = 4×1×1）\n优势：完全解耦，互不干扰，性能最优\n分层关系 graph TB subgraph \u0026#34;用户层\u0026#34; A[examples/run_async_ppo.sh] B[training/main_async_ppo.py] end subgraph \u0026#34;配置层\u0026#34; C[AsyncPPOMATHConfig] D[ExperimentConfig] E[WorkerConfigs] end subgraph \u0026#34;系统层\u0026#34; F[Ray集群管理] G[Name Resolution] H[日志系统] end subgraph \u0026#34;训练端 Workers\u0026#34; I[MasterWorker] J[ModelWorker] K[FunctionExecutor] end subgraph \u0026#34;Rollout端 Workers\u0026#34; L[RolloutWorker] M[GenerationServer] N[GserverManager] O[PartialRolloutManager] end subgraph \u0026#34;核心组件\u0026#34; P[Agent接口] Q[Environment接口] R[Model接口] S[Dataset接口] end subgraph \u0026#34;通信层\u0026#34; T[Request-Reply Stream] U[Push-Pull Stream] V[HTTP API] W[TCP Socket] end subgraph \u0026#34;模型层\u0026#34; X[SGLang Backend] Y[PyTorch Backend] Z[模型并行] end %% 连接关系 A --\u0026gt; B B --\u0026gt; C C --\u0026gt; D D --\u0026gt; E E --\u0026gt; F F --\u0026gt; G F --\u0026gt; H E --\u0026gt; I E --\u0026gt; J E --\u0026gt; L E --\u0026gt; M E --\u0026gt; N I --\u0026gt; K K --\u0026gt; T J --\u0026gt; T L --\u0026gt; O O --\u0026gt; V M --\u0026gt; V N --\u0026gt; V L --\u0026gt; P L --\u0026gt; Q J --\u0026gt; R I --\u0026gt; S T --\u0026gt; W U --\u0026gt; W V --\u0026gt; W J --\u0026gt; Y M --\u0026gt; X Y --\u0026gt; Z X --\u0026gt; Z style A fill:#e3f2fd style I fill:#f3e5f5 style L fill:#e8f5e8 style T fill:#fff3e0 style X fill:#fce4ec 全局类图 classDiagram %% 基类层 class AsyncWorker { \u0026lt;\u0026lt;abstract\u0026gt;\u0026gt; +_configure(config) +_poll_async() PollResult +run_async() } class Worker { \u0026lt;\u0026lt;abstract\u0026gt;\u0026gt; +_configure(config) +_poll() PollResult +run() } %% Worker实现层 - 训练端 class MasterWorker { -config: MasterWorkerConfig -func_executor: FunctionExecutor -__poll_async() -__lazy_init() } class ModelWorker { -config: ModelWorkerConfig -__request_queue: Queue -_poll() -handle_request() } %% Worker实现层 - Rollout端 class RolloutWorker { -config: RolloutWorkerConfig -agent: Agent -env: Environment -_poll_async() -rollout_task() } class GenerationServer { -config: GenerationServerConfig -server_process: Process -_poll() -launch_server_subprocess() } class GserverManager { -config: GserverManagerConfig -server_urls: List[str] -_poll() -_schedule_request() } %% 接口层 class Agent { \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; +collect_trajectory(prompt, env, obs_queue, act_queue) } class Environment { \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; +reset() +step(action) } class ModelInterface { \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; +inference(model, data, mb_spec) +generate(model, data, mb_spec) +train_step(model, data, mb_spec) } %% 配置层 class AsyncPPOMATHConfig { +agent: AgentAbstraction +env: EnvServiceAbstraction +initial_setup() ExperimentConfig +scheduling_setup() ExperimentScheduling } class ExperimentConfig { +model_rpcs: List[ModelRPC] +model_worker: ModelWorkerConfig +generation_server: GenerationServerConfig +rollout_worker: RolloutWorkerConfig } %% 继承关系 - 垂直排列减少交叉 AsyncWorker \u0026lt;|-- MasterWorker AsyncWorker \u0026lt;|-- RolloutWorker Worker \u0026lt;|-- ModelWorker Worker \u0026lt;|-- GenerationServer Worker \u0026lt;|-- GserverManager %% 组合关系 - 水平连接 MasterWorker --\u0026gt; ModelInterface : uses RolloutWorker --\u0026gt; Agent : uses RolloutWorker --\u0026gt; Environment : uses ModelWorker --\u0026gt; ModelInterface : implements %% 配置关系 - 底部连接 AsyncPPOMATHConfig --\u0026gt; ExperimentConfig : creates ExperimentConfig --\u0026gt; MasterWorker : configures ExperimentConfig --\u0026gt; ModelWorker : configures ExperimentConfig --\u0026gt; RolloutWorker : configures ExperimentConfig --\u0026gt; GenerationServer : configures ExperimentConfig --\u0026gt; GserverManager : configures 核心模块类图 classDiagram %% 基类 class AsyncWorker { \u0026lt;\u0026lt;abstract\u0026gt;\u0026gt; +_poll_async() PollResult } class Worker { \u0026lt;\u0026lt;abstract\u0026gt;\u0026gt; +_poll() PollResult } %% 训练端Workers class MasterWorker { -func_executor: FunctionExecutor -__poll_async() } class ModelWorker { -__request_queue: Queue -_poll() } %% Rollout端Workers class RolloutWorker { -agent: Agent -env: Environment -_poll_async() } class GenerationServer { -server_process: Process -_poll() } class GserverManager { -server_urls: List[str] -_poll() } %% 核心接口 class Agent { \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; +collect_trajectory() } class Environment { \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; +step(action) } class ModelInterface { \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; +train_step() +generate() } %% 配置 class AsyncPPOMATHConfig { +initial_setup() +scheduling_setup() } %% 继承关系 AsyncWorker \u0026lt;|-- MasterWorker AsyncWorker \u0026lt;|-- RolloutWorker Worker \u0026lt;|-- ModelWorker Worker \u0026lt;|-- GenerationServer Worker \u0026lt;|-- GserverManager %% 关键关系 MasterWorker --\u0026gt; ModelInterface RolloutWorker --\u0026gt; Agent RolloutWorker --\u0026gt; Environment ModelWorker --\u0026gt; ModelInterface AsyncPPOMATHConfig --\u0026gt; MasterWorker AsyncPPOMATHConfig --\u0026gt; ModelWorker AsyncPPOMATHConfig --\u0026gt; RolloutWorker 异步流程机制细节 异步完整流程图 sequenceDiagram participant User as 用户 participant MW as MasterWorker participant RW as RolloutWorker participant GS as GenerationServer participant GSM as GserverManager participant ZMQ as ZMQ Stream participant SD as StreamDataset participant MW2 as ModelWorker participant NR as NameResolving participant FS as 文件系统 Note over User: 启动异步PPO训练 User-\u0026gt;\u0026gt;User: examples/run_async_ppo.sh\u0026lt;br/\u0026gt;输入：GPU数量、并行策略、模型路径 User-\u0026gt;\u0026gt;MW: training/main_async_ppo.py\u0026lt;br/\u0026gt;输入：AsyncPPOMATHConfig Note over MW: 初始化阶段 MW-\u0026gt;\u0026gt;MW: run_experiment(config)\u0026lt;br/\u0026gt;输入：实验配置 MW-\u0026gt;\u0026gt;MW: initial_setup()\u0026lt;br/\u0026gt;输入：worker配置 MW-\u0026gt;\u0026gt;NR: 注册各Worker地址\u0026lt;br/\u0026gt;变量：worker_info, msid2mwid Note over MW: 设置版本差异控制参数\u0026lt;br/\u0026gt;变量：max_head_offpolicyness Note over RW,GS: Rollout端启动 RW-\u0026gt;\u0026gt;RW: _configure(config)\u0026lt;br/\u0026gt;输入：RolloutWorkerConfig RW-\u0026gt;\u0026gt;ZMQ: 初始化NameResolvingZmqPusher\u0026lt;br/\u0026gt;变量：experiment_name, trial_name, worker_index GS-\u0026gt;\u0026gt;GS: _configure(config)\u0026lt;br/\u0026gt;输入：GenerationServerConfig GS-\u0026gt;\u0026gt;GS: 初始化SGLang后端\u0026lt;br/\u0026gt;变量：model_path, tokenizer_path GSM-\u0026gt;\u0026gt;GSM: _configure(config)\u0026lt;br/\u0026gt;输入：GserverManagerConfig GSM-\u0026gt;\u0026gt;GSM: 初始化权重版本跟踪\u0026lt;br/\u0026gt;变量：_last_param_realloc_step Note over MW2: 训练端启动 MW2-\u0026gt;\u0026gt;MW2: _configure(config)\u0026lt;br/\u0026gt;输入：ModelWorkerConfig MW2-\u0026gt;\u0026gt;SD: 初始化PullerStreamDataset\u0026lt;br/\u0026gt;变量：dataset_size, pull_timeout_ms MW2-\u0026gt;\u0026gt;MW2: 初始化模型和优化器\u0026lt;br/\u0026gt;变量：model_config, optimizer_config Note over MW: 训练循环开始 MW-\u0026gt;\u0026gt;MW: __poll_async()\u0026lt;br/\u0026gt;输入：训练控制参数 MW-\u0026gt;\u0026gt;MW: func_executor.execute_step()\u0026lt;br/\u0026gt;输入：数据流图 Note over RW,GS: 并行生成轨迹 loop 持续生成轨迹 RW-\u0026gt;\u0026gt;GS: 发送生成请求\u0026lt;br/\u0026gt;输入：prompt, max_tokens Note over GS: 使用当前加载的权重版本\u0026lt;br/\u0026gt;变量：current_model_version GS-\u0026gt;\u0026gt;GS: SGLang生成\u0026lt;br/\u0026gt;输入：模型权重、生成参数 GS--\u0026gt;\u0026gt;RW: 返回生成结果\u0026lt;br/\u0026gt;输出：generated_text RW-\u0026gt;\u0026gt;RW: agent.collect_trajectory()\u0026lt;br/\u0026gt;输入：生成结果 RW-\u0026gt;\u0026gt;RW: 计算奖励、构建轨迹\u0026lt;br/\u0026gt;变量：trajectory, reward Note over RW: 为轨迹添加版本信息\u0026lt;br/\u0026gt;变量：trajectory.model_version = current_model_version RW-\u0026gt;\u0026gt;ZMQ: push_stream.push(traj)\u0026lt;br/\u0026gt;输入：轨迹数据(JSON格式) end Note over ZMQ,SD: 数据传递 ZMQ-\u0026gt;\u0026gt;SD: 接收轨迹数据\u0026lt;br/\u0026gt;输入：JSON序列化数据 SD-\u0026gt;\u0026gt;SD: _pull_data_worker()\u0026lt;br/\u0026gt;后台线程持续拉取 SD-\u0026gt;\u0026gt;SD: 转换为SequenceSample\u0026lt;br/\u0026gt;变量：data_queue, processed_data Note over MW2: 训练执行 - 版本差异控制 MW2-\u0026gt;\u0026gt;SD: 获取训练数据\u0026lt;br/\u0026gt;输入：batch_size SD--\u0026gt;\u0026gt;MW2: 返回SequenceSample\u0026lt;br/\u0026gt;输出：训练样本 Note over MW2: 检查数据版本差异\u0026lt;br/\u0026gt;变量：data_version, current_version, max_head_offpolicyness MW2-\u0026gt;\u0026gt;MW2: validate_data_version(data_version, current_version)\u0026lt;br/\u0026gt;输入：数据版本、当前版本、最大允许差异 alt 版本差异在允许范围内 Note over MW2: 接受数据，继续训练\u0026lt;br/\u0026gt;变量：version_diff \u0026lt;= max_head_offpolicyness MW2-\u0026gt;\u0026gt;MW2: train_step(data)\u0026lt;br/\u0026gt;输入：训练数据、优化器状态 MW2-\u0026gt;\u0026gt;MW2: 计算PPO损失\u0026lt;br/\u0026gt;变量：policy_loss, value_loss, entropy_loss MW2-\u0026gt;\u0026gt;MW2: 更新模型参数\u0026lt;br/\u0026gt;变量：optimizer.step(), global_step else 版本差异过大 Note over MW2: 丢弃过期数据\u0026lt;br/\u0026gt;变量：version_diff \u0026gt; max_head_offpolicyness MW2-\u0026gt;\u0026gt;MW2: discard_stale_data(data)\u0026lt;br/\u0026gt;输入：过期数据 Note over MW2: 记录数据丢弃统计\u0026lt;br/\u0026gt;变量：stale_data_count++ MW2-\u0026gt;\u0026gt;SD: 请求新的训练数据\u0026lt;br/\u0026gt;输入：batch_size end Note over MW2,FS: 权重同步 - 版本控制 MW2-\u0026gt;\u0026gt;FS: __save_model(save_meta)\u0026lt;br/\u0026gt;输入：model, save_dir, global_step Note over FS: 保存权重分片到磁盘\u0026lt;br/\u0026gt;变量：param_realloc_path/model_name/step/ MW2-\u0026gt;\u0026gt;NR: name_resolve.add(model_version, global_step)\u0026lt;br/\u0026gt;输入：experiment, trial, model_name, step Note over NR: 原子性更新版本号\u0026lt;br/\u0026gt;变量：model_version = global_step Note over GSM,GS: 推理端权重更新 - 数据陈旧性控制 loop 定期检查新权重 GSM-\u0026gt;\u0026gt;NR: check_new_params()\u0026lt;br/\u0026gt;输入：experiment, trial, model_name NR--\u0026gt;\u0026gt;GSM: 返回最新global_step alt 有新权重版本 GSM-\u0026gt;\u0026gt;GSM: 发现版本更新\u0026lt;br/\u0026gt;变量：realloc_version \u0026gt; _last_param_realloc_step GSM-\u0026gt;\u0026gt;GS: flush_requests_and_update_weights(load_dir)\u0026lt;br/\u0026gt;输入：新权重路径 Note over GS: 中断当前所有推理请求\u0026lt;br/\u0026gt;变量：_interrupt_requests() GS-\u0026gt;\u0026gt;FS: 读取新权重文件\u0026lt;br/\u0026gt;输入：load_dir GS-\u0026gt;\u0026gt;GS: update_weights_from_disk(load_dir)\u0026lt;br/\u0026gt;变量：分片rank, 权重文件 Note over GS: 按TP/PP分片加载权重\u0026lt;br/\u0026gt;变量：新model_version生效 GS--\u0026gt;\u0026gt;GSM: 权重更新完成 GSM-\u0026gt;\u0026gt;GSM: 更新版本跟踪\u0026lt;br/\u0026gt;变量：_last_param_realloc_step = realloc_version Note over GS: 恢复推理服务\u0026lt;br/\u0026gt;变量：使用新权重版本 else 无新权重 GSM-\u0026gt;\u0026gt;GSM: 继续使用当前权重\u0026lt;br/\u0026gt;变量：_last_param_realloc_step end end Note over MW: 训练控制 - 版本差异监控 MW-\u0026gt;\u0026gt;MW: 检查训练终止条件\u0026lt;br/\u0026gt;输入：epoch, global_step, loss MW-\u0026gt;\u0026gt;MW: 监控版本差异统计\u0026lt;br/\u0026gt;变量：stale_data_count, version_diff_stats Note over MW: 记录版本差异对训练的影响\u0026lt;br/\u0026gt;变量：training_efficiency, data_freshness alt 继续训练 MW-\u0026gt;\u0026gt;MW: 更新训练状态\u0026lt;br/\u0026gt;变量：step_info, epoch_step Note over MW: 返回训练循环开始 else 训练完成 MW-\u0026gt;\u0026gt;User: 训练结束\u0026lt;br/\u0026gt;输出：最终模型、训练日志、版本差异统计 end 异步带来的算法修正 同步PPO完整流程 先回顾一下ppo的计算流程：\n我们有一个策略π(a|s)，它决定在状态s下选择动作a的概率。PPO的目标是优化这个策略，使其能够获得更高的累积奖励。\n数据收集（rollout） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 使用当前策略π_θ生成轨迹 for episode in range(num_episodes): state = env.reset() trajectory = [] while not done: # 使用当前策略选择动作 action_probs = π_θ(state) # 当前策略的概率分布 action = sample(action_probs) # 采样动作 # 记录动作概率（用于后续计算重要性比率） old_logp = log(action_probs[action]) # 这就是old_logp # 执行动作 next_state, reward, done = env.step(action) trajectory.append((state, action, reward, old_logp)) state = next_state 计算优势函数 1 2 3 # 使用GAE计算优势函数 advantages = compute_gae(trajectory, γ=0.99, λ=0.95) returns = compute_returns(trajectory, γ=0.99) 策略更新 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # 对收集的数据进行多次更新 for epoch in range(num_epochs): for batch in data_loader: # 重新计算当前策略的概率 current_action_probs = π_θ(batch.states) # 当前策略 cur_logp = log(current_action_probs[batch.actions]) # 这就是cur_logp # 计算重要性比率 ratio = exp(cur_logp - old_logp) # PPO损失函数 surr1 = ratio * advantages surr2 = clip(ratio, 1-ε, 1+ε) * advantages loss = -min(surr1, surr2) # 更新策略参数 optimizer.zero_grad() loss.backward() optimizer.step() 为什么需要重要性采样 ratio = π_θ(a|s) / π_θ_old(a|s) = exp(cur_logp - old_logp)\n我们想用当前策略π_θ来评估旧策略π_θ_old生成的数据 重要性采样修正了这种分布偏移 框架的异步PPO修正机制 异步带来的问题，数据生成和训练并行 1 2 3 4 5 # 时间线 t=0: 策略π_θ_0生成数据 t=1: 策略π_θ_1生成数据，同时训练π_θ_0的数据 t=2: 策略π_θ_2生成数据，同时训练π_θ_1的数据 ... 这导致：\n训练数据来自较旧的策略版本\n重要性比率可能变得很大或很小\n策略更新可能不稳定\n框架引入的修正机制如下：\n机制1： 版本控制\n1 2 3 4 5 6 7 8 # 记录数据生成时的策略版本 data = { \u0026#34;version_start\u0026#34;: model_version_when_generation_started, \u0026#34;version_end\u0026#34;: model_version_when_generation_ended, \u0026#34;old_logp\u0026#34;: logprobs_from_generation, \u0026#34;actions\u0026#34;: actions, \u0026#34;rewards\u0026#34;: rewards } 机制2：数据过滤\n1 2 3 4 5 # 检查版本差异 version_diff = current_version - data.version_start if version_diff \u0026gt; max_head_offpolicyness: # 数据太旧，丢弃 continue 机制3：解耦损失（Decoupled Loss）\n1 2 3 4 5 6 7 8 9 10 11 # 标准PPO损失 def standard_ppo_loss(cur_logp, old_logp, advantages): ratio = exp(cur_logp - old_logp) return -min(ratio * advantages, clip(ratio, 1-ε, 1+ε) * advantages) # AReaL解耦损失 def decoupled_loss(cur_logp, old_logp, prox_logp, advantages): # 使用prox_logp作为中间策略 ratio = exp(cur_logp - prox_logp) behav_weight = exp(prox_logp - old_logp) return -min(ratio * advantages, clip(ratio, 1-ε, 1+ε) * advantages) * behav_weight 修正的合理性分析 数学基础\n解耦损失可以分解为:\n1 2 3 4 5 6 7 8 9 # 标准PPO ratio = π_θ(a|s) / π_θ_old(a|s) # AReaL解耦 ratio = π_θ(a|s) / π_prox(a|s) behav_weight = π_prox(a|s) / π_θ_old(a|s) # 等价性 ratio * behav_weight = π_θ(a|s) / π_θ_old(a|s) # 与标准PPO相同 稳定性提升\n1 2 3 4 5 6 7 8 9 # 异步场景下的问题 # 如果π_θ与π_θ_old差异很大 ratio = π_θ(a|s) / π_θ_old(a|s) # 可能很大或很小 # AReaL的解决方案 # 引入中间策略π_prox，使得： # π_θ ≈ π_prox ≈ π_θ_old ratio = π_θ(a|s) / π_prox(a|s) # 更稳定 behav_weight = π_prox(a|s) / π_θ_old(a|s) # 更稳定 渐进式更新\n1 2 # 标准异步PPO：直接从π_θ_old跳到π_θ # AReaL：π_θ_old → π_prox → π_θ，分两步更新 具体实现 核心修正机制实现\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 # AReaL的解耦损失实现 if proximal_logprobs is not None: # 计算行为策略权重 behav_kl = proximal_logprobs - old_logprobs behav_imp_weight = behav_kl.exp() # 应用权重上限 if behav_imp_weight_cap is not None: behav_mask = (behav_imp_weight \u0026lt;= behav_imp_weight_cap).logical_and(loss_mask) else: behav_mask = loss_mask # 应用行为策略权重 pg_loss = pg_loss * behav_imp_weight 数学等价性证明\n1 2 3 4 5 6 7 8 9 10 11 12 13 # 标准PPO损失 L_standard = -min(ratio * A, clip(ratio, 1-ε, 1+ε) * A) 其中 ratio = π_θ(a|s) / π_θ_old(a|s) # AReaL解耦损失 L_decoupled = -min(ratio * A, clip(ratio, 1-ε, 1+ε) * A) * behav_weight 其中 ratio = π_θ(a|s) / π_prox(a|s) behav_weight = π_prox(a|s) / π_θ_old(a|s) # 等价性证明 L_decoupled = -min(ratio * A, clip(ratio, 1-ε, 1+ε) * A) * behav_weight = -min((π_θ/π_prox) * A, clip(π_θ/π_prox, 1-ε, 1+ε) * A) * (π_prox/π_θ_old) = -min((π_θ/π_θ_old) * A, clip(π_θ/π_prox, 1-ε, 1+ε) * A * (π_prox/π_θ_old)) 流程图视角 graph TD %% 生成阶段 - SGLang推理服务 A[用户Prompt\u0026lt;br/\u0026gt;packed_prompts] --\u0026gt; B[SGLang推理服务\u0026lt;br/\u0026gt;actor_gen] B --\u0026gt; B1[PPOActorInterface.generate\u0026lt;br/\u0026gt;使用策略π_θ_old] B1 --\u0026gt; B2[模型前向传播\u0026lt;br/\u0026gt;genstep函数] B2 --\u0026gt; B3[采样token\u0026lt;br/\u0026gt;计算logprob] B3 --\u0026gt; B4[concat_prompt_to_generation_output\u0026lt;br/\u0026gt;拼接prompt和生成结果] B4 --\u0026gt; B5[输出: packed_input_ids\u0026lt;br/\u0026gt;packed_logprobs\u0026lt;old_logp\u0026gt;\u0026lt;br/\u0026gt;prompt_mask\u0026lt;br/\u0026gt;seq_no_eos_mask] %% 推理阶段 - 四个组件并行执行 B5 --\u0026gt; C[推理阶段开始] %% Actor推理 - 计算proximal_logp C --\u0026gt; D[actor_inf\u0026lt;br/\u0026gt;PPOActorInterface.inference\u0026lt;br/\u0026gt;使用策略π_θ_prox] D --\u0026gt; D1[输入: packed_input_ids] D1 --\u0026gt; D2[calc_logprobs post_hook\u0026lt;br/\u0026gt;gather_packed_shifted_log_probs] D2 --\u0026gt; D3[输出: proximal_logprobs\u0026lt;br/\u0026gt;π_θ_prox\u0026lt;a,s\u0026gt;] %% Reference推理 - 计算ref_logp C --\u0026gt; E[ref_inf\u0026lt;br/\u0026gt;PPOActorInterface.inference\u0026lt;br/\u0026gt;使用策略π_ref] E --\u0026gt; E1[输入: packed_input_ids] E1 --\u0026gt; E2[calc_logprobs post_hook\u0026lt;br/\u0026gt;gather_packed_shifted_log_probs] E2 --\u0026gt; E3[输出: packed_ref_logprobs\u0026lt;br/\u0026gt;π_ref\u0026lt;a,s\u0026gt;] %% Critic推理 - 计算values C --\u0026gt; F[critic_inf\u0026lt;br/\u0026gt;PPOCriticInterface.inference\u0026lt;br/\u0026gt;使用价值网络V_θ] F --\u0026gt; F1[输入: packed_input_ids\u0026lt;br/\u0026gt;seq_no_eos_mask] F1 --\u0026gt; F2[module.forward\u0026lt;br/\u0026gt;直接输出value] F2 --\u0026gt; F3[输出: values\u0026lt;br/\u0026gt;V_θ\u0026lt;s\u0026gt;] %% Reward推理 - 计算rewards C --\u0026gt; G[rew_inf\u0026lt;br/\u0026gt;MultiTaskRewardInterface.inference\u0026lt;br/\u0026gt;使用奖励函数R] G --\u0026gt; G1[输入: packed_input_ids\u0026lt;br/\u0026gt;packed_prompts\u0026lt;br/\u0026gt;task_ids] G1 --\u0026gt; G2[calculate_task_reward\u0026lt;br/\u0026gt;异步任务处理] G2 --\u0026gt; G3[输出: rewards\u0026lt;br/\u0026gt;R\u0026lt;s,a\u0026gt;] %% 数据汇聚 D3 --\u0026gt; H[推理结果汇聚] E3 --\u0026gt; H F3 --\u0026gt; H G3 --\u0026gt; H %% 训练阶段准备 H --\u0026gt; I[训练数据准备\u0026lt;br/\u0026gt;packed_input_ids\u0026lt;br/\u0026gt;packed_logprobs\u0026lt;old_logp\u0026gt;\u0026lt;br/\u0026gt;packed_ref_logprobs\u0026lt;br/\u0026gt;proximal_logprobs\u0026lt;br/\u0026gt;rewards\u0026lt;br/\u0026gt;values\u0026lt;br/\u0026gt;prompt_mask\u0026lt;br/\u0026gt;seq_no_eos_mask] %% 训练阶段 - 计算current_logp和loss I --\u0026gt; J[actor_train\u0026lt;br/\u0026gt;PPOActorInterface.train_step\u0026lt;br/\u0026gt;使用策略π_θ] J --\u0026gt; J1[模型前向传播\u0026lt;br/\u0026gt;module.forward] J1 --\u0026gt; J2[gather_packed_shifted_log_probs\u0026lt;br/\u0026gt;计算current_logp\u0026lt;br/\u0026gt;π_θ\u0026lt;a,s\u0026gt;] J2 --\u0026gt; J3[计算advantages\u0026lt;br/\u0026gt;GAE算法] J3 --\u0026gt; J4[计算rewards\u0026lt;br/\u0026gt;KL正则化] J4 --\u0026gt; J5[PPO Loss计算\u0026lt;br/\u0026gt;_ppo_actor_loss_from_model_outputs] %% PPO Loss详细计算 J5 --\u0026gt; K[PPO Loss计算详情] K --\u0026gt; K1[输入: current_logp, old_logp, proximal_logp\u0026lt;br/\u0026gt;advantages, rewards] K1 --\u0026gt; K2{use_decoupled_loss?} K2 --\u0026gt;|是| K3[解耦损失计算\u0026lt;br/\u0026gt;ratio = exp\u0026lt;current_logp - proximal_logp\u0026gt;\u0026lt;br/\u0026gt;behav_weight = exp\u0026lt;proximal_logp - old_logp\u0026gt;] K2 --\u0026gt;|否| K4[标准损失计算\u0026lt;br/\u0026gt;ratio = exp\u0026lt;current_logp - old_logp\u0026gt;] K3 --\u0026gt; K5[最终损失\u0026lt;br/\u0026gt;loss = -min ratio * advantages, clip ratio * advantages * behav_weight] K4 --\u0026gt; K6[最终损失\u0026lt;br/\u0026gt;loss = -min ratio * advantages, clip ratio * advantages] K5 --\u0026gt; L[输出: Actor Loss] K6 --\u0026gt; L %% Critic训练 J3 --\u0026gt; M[critic_train\u0026lt;br/\u0026gt;PPOCriticInterface.train_step\u0026lt;br/\u0026gt;使用价值网络V_θ] M --\u0026gt; M1[模型前向传播\u0026lt;br/\u0026gt;计算new_values] M1 --\u0026gt; M2[Critic Loss计算\u0026lt;br/\u0026gt;_ppo_critic_loss_from_model_outputs] M2 --\u0026gt; M3[输出: Critic Loss] %% 样式定义 classDef generateStyle fill:#e3f2fd,stroke:#1565c0,stroke-width:2px classDef inferenceStyle fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px classDef trainStyle fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px classDef lossStyle fill:#fff3e0,stroke:#ef6c00,stroke-width:2px class B,B1,B2,B3,B4,B5 generateStyle class D,D1,D2,D3,E,E1,E2,E3,F,F1,F2,F3,G,G1,G2,G3 inferenceStyle class J,J1,J2,J3,J4,J5,M,M1,M2,M3 trainStyle class K,K1,K2,K3,K4,K5,K6,L lossStyle old_logp (π_θ_old)\n1 2 3 4 5 # 生成阶段 - SGLang推理服务 # 模型：Actor模型 (策略π_θ_old) # 时机：生成token时实时计算 # 函数：genstep() -\u0026gt; distrb.log_prob(next_tokens) # 保存：concat_prompt_to_generation_output() -\u0026gt; packed_logprobs proximal_logp (π_θ_prox)\n1 2 3 4 5 # 推理阶段 - actor_inf组件 # 模型：Actor模型 (策略π_θ_prox，比π_θ_old新，比π_θ旧) # 时机：生成完成后，训练前 # 函数：PPOActorInterface.inference() -\u0026gt; calc_logprobs() # 条件：仅当use_decoupled_loss=True时计算 current_logp (π_θ)\n1 2 3 4 5 # 训练阶段 - actor_train组件 # 模型：Actor模型 (当前策略π_θ，最新) # 时机：训练时重新计算 # 函数：PPOActorInterface.train_step() -\u0026gt; gather_packed_shifted_log_probs() # 作用：用于计算重要性采样比率 权重同步机制 sequenceDiagram participant MW as ModelWorker participant FS as 文件系统 participant NR as NameResolving participant GSM as GserverManager participant GS as GenerationServer Note over MW: 训练完成一次step后 MW-\u0026gt;\u0026gt;MW: __save_model(save_meta)\u0026lt;br/\u0026gt;输入：model, save_dir, global_step MW-\u0026gt;\u0026gt;FS: 保存权重文件\u0026lt;br/\u0026gt;路径: param_realloc_path/model_name/step/ Note over MW,FS: 权重以分片形式落盘（TP/PP分片） MW-\u0026gt;\u0026gt;NR: name_resolve.add(model_version, global_step)\u0026lt;br/\u0026gt;输入：experiment, trial, model_name, step NR--\u0026gt;\u0026gt;GSM: model_version更新 loop 推理端定期检查 GSM-\u0026gt;\u0026gt;NR: check_new_params()\u0026lt;br/\u0026gt;输入：experiment, trial, model_name NR--\u0026gt;\u0026gt;GSM: 返回最新global_step alt 有新权重 GSM-\u0026gt;\u0026gt;FS: 获取新权重路径 GSM-\u0026gt;\u0026gt;GS: flush_requests_and_update_weights(load_dir) GS-\u0026gt;\u0026gt;FS: 读取权重分片文件 GS-\u0026gt;\u0026gt;GS: update_weights_from_disk(load_dir)\u0026lt;br/\u0026gt;变量: load_dir, 分片rank Note over GS: 按TP/PP分片加载到各自分片 else 无新权重 GSM-\u0026gt;\u0026gt;GSM: 不做更新 end end Note over GS: 新权重生效，推理端继续服务 核心机制：\n训练端：ModelWorker在每次train_step后保存权重到param_realloc_path，并调用name_resolve.add(model_version, global_step)，在NameResolving服务中记录最新的权重版本号（global_step）。\n推理端：GserverManager定期检查model_version，发现新版本（model_version和已经加载的对比）时通过HTTP API更新所有GenerationServer的权重。\ns\n同步动作：权重更新时会中断正在进行的生成请求，确保推理使用最新权重。\n关键函数与变量说明：\n__save_model(save_meta)\n输入：model_name, save_dir, global_step\n输出：权重文件（分片）落盘\nname_resolve.add(model_version, global_step)\n输入：实验名、trial名、模型名、step\n输出：NameResolving服务中记录最新step\ncheck_new_params()\n输入：实验名、trial名、模型名\n输出：最新step（如果有更新）\nflush_requests_and_update_weights(load_dir)\n输入：权重目录\n输出：推理端各分片加载新权重\nupdate_weights_from_disk(load_dir)\n输入：分片rank、load_dir\n输出：各分片权重加载到内存\n变量传递链路：\nglobal_step/model_version：用于标识权重版本\nparam_realloc_path/load_dir：权重磁盘路径\n分片rank：决定每个worker加载哪一份权重\n数据陈旧性控制 异步训推协调的核心机制，需要限制陈旧性保证训练稳定性\n1 2 3 4 # GserverManager中的陈旧性检查 def is_staled(self): # 检查当前运行的rollout是否过时 return self.rollout_stat.running \u0026gt; self.config.max_head_offpolicyness 协调机制：\n版本控制：每个生成请求都携带version_start和version_end，记录使用的权重版本\n陈旧性限制：通过max_head_offpolicyness参数控制允许的最大数据陈旧性\n请求调度：GserverManager在分配新rollout时检查容量和陈旧性，拒绝过时的请求\n确实存在使用老权重的情况：\n异步训练允许一定程度的权重陈旧性\n通过max_head_offpolicyness参数控制陈旧性上限\n这种设计在提高训练效率的同时，通过限制陈旧性保证训练稳定性\n数据传递机制 各个worker之间的通信核心是ZMQ：\n高性能：支持零拷贝和批量传输 多种模式：PUSH/PULL、PUB/SUB、REQ/REP等 异步通信：非阻塞I/O，适合高并发场景 跨语言：支持多种编程语言 网络透明：自动处理连接、重连、负载均衡 1 2 3 4 5 6 7 8 9 10 11 # zmq的配置举例 # 高性能配置 self.context = zmq.Context.instance(io_threads=8) self.context.set(zmq.MAX_SOCKETS, 65536) # 缓冲区优化 self.socket.setsockopt(zmq.SNDHWM, 1000) # 发送缓冲区 self.socket.setsockopt(zmq.RCVHWM, 1000) # 接收缓冲区 # 超时设置 self.socket.setsockopt(zmq.RCVTIMEO, timeout_ms) sequenceDiagram participant RW as RolloutWorker participant GS as GenerationServer participant GSM as GserverManager participant ZMQ as ZMQ Stream participant SD as StreamDataset participant MW as ModelWorker participant DM as DataManager Note over RW,DM: 1. 生成轨迹数据 RW-\u0026gt;\u0026gt;GS: 发送生成请求 GS-\u0026gt;\u0026gt;GS: SGLang生成结果 GS-\u0026gt;\u0026gt;RW: 返回生成结果 RW-\u0026gt;\u0026gt;RW: 计算奖励，构建轨迹 Note over RW,DM: 2. 推送数据到训练端 RW-\u0026gt;\u0026gt;ZMQ: 推送轨迹数据(JSON格式) ZMQ-\u0026gt;\u0026gt;SD: 接收数据 SD-\u0026gt;\u0026gt;SD: 转换为SequenceSample Note over RW,DM: 3. 训练端处理数据 SD-\u0026gt;\u0026gt;MW: 提供数据给ModelWorker MW-\u0026gt;\u0026gt;DM: 存储到DataManager(内存) MW-\u0026gt;\u0026gt;MW: 执行训练步骤 数据传递层次 Rollout端到训练端： 使用ZMQ Push-Pull Stream传输轨迹数据\nRolloutWorker → NameResolvingZmqPusher → NameResolvingZmqPuller → StreamDataset\ngraph TB subgraph \u0026#34;Rollout端\u0026#34; RW[RolloutWorker] --\u0026gt; NP[NameResolvingZmqPusher] NP --\u0026gt; ZMQ1[ZMQ PUSH Socket] end subgraph \u0026#34;训练端\u0026#34; ZMQ2[ZMQ PULL Socket] --\u0026gt; NP2[NameResolvingZmqPuller] NP2 --\u0026gt; SD[StreamDataset] SD --\u0026gt; MW[ModelWorker] end subgraph \u0026#34;Name Resolution\u0026#34; NR[name_resolve系统] end ZMQ1 -.-\u0026gt;|TCP连接| ZMQ2 NP --\u0026gt; NR NP2 --\u0026gt; NR 训练端内部： 使用Request-Reply Stream传输训练请求\nMasterWorker → ModelWorker通过ZMQ通信\ngraph TB subgraph \u0026#34;MasterWorker\u0026#34; MW[MasterWorker] --\u0026gt; NRC[NameResolvingRequestClient] NRC --\u0026gt; ZMQ1[ZMQ PUSH Sockets] ZMQ2[ZMQ PULL Socket] --\u0026gt; NRC end subgraph \u0026#34;ModelWorker\u0026#34; ZMQ3[ZMQ PULL Socket] --\u0026gt; NRS[NameResolvingReplyServer] NRS --\u0026gt; MW2[ModelWorker] MW2 --\u0026gt; ZMQ4[ZMQ PUSH Socket] end subgraph \u0026#34;通信协议\u0026#34; REQ[Request] --\u0026gt; ACK[ACK] ACK --\u0026gt; SYN[SYN] SYN --\u0026gt; RESP[Response] end ZMQ1 -.-\u0026gt;|TCP| ZMQ3 ZMQ4 -.-\u0026gt;|TCP| ZMQ2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # 请求发送 def request(self, handlers, handle_type, datas, no_syn=True): requests = [ Payload( handler=handler, handle_name=handle_type, data=data, no_syn=no_syn, ) for handler, data in zip(handlers, datas) ] # 发送请求 for payload in requests: idx = self._handler_routing[payload.handler] self.send_sockets[idx].send(pickle.dumps(payload)) 存储分离： 训练数据：存储在DataManager中，支持分布式存储和重分布\nDataManager为内存存储： 1 2 3 4 5 6 7 8 9 10 11 12 class DataManager: def __init__(self, model_topos, msid2mwid, data_transfer_pairs): # 核心存储：内存字典 self.storage: Dict[Hashable, SequenceSample] = {} def store(self, x: SequenceSample): # 存储到内存字典 self.storage[x.ids[0]] = x def get(self, data_id: Hashable): # 从内存获取 return self.storage[data_id] 支持数据重分布：\n1 2 3 4 5 6 7 8 9 def redistribute(self, data_info: SequenceSample, plan: List[RedistribStep]): \u0026#34;\u0026#34;\u0026#34;执行数据重分布\u0026#34;\u0026#34;\u0026#34; for step in plan: if step.comm_type == \u0026#34;bcast\u0026#34;: self._run_bcast(step, data_infos) elif step.comm_type == \u0026#34;gather\u0026#34;: self._run_gather(step, data_infos) elif step.comm_type == \u0026#34;scatter\u0026#34;: self._run_scatter(step, data_infos) 推理数据：存储在SGLang服务器的内存中\n元数据：通过name_resolve系统共享\n实现细节 RolloutWorker 数据发送 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # realhf/system/rollout_worker.py class RolloutWorker(AsyncWorker): def _configure(self, config): # 初始化ZMQ推送器 - 发送轨迹数据到训练端 self.push_stream = NameResolvingZmqPusher( self.experiment_name, self.trial_name, pusher_index=self.worker_index, pusher_cnt=self.worker_count, ) async def _poll_async(self): # 收集轨迹数据 traj = await self.agent.collect_trajectory() # 推送数据到训练端 self.push_stream.push([traj.as_json_serializable()]) GenerationServer 推理服务 1 2 3 4 5 6 7 8 9 10 # realhf/system/generation_server.py class GenerationServer(Worker): def launch_server_subprocess(self): # 启动SGLang推理服务器 self.server_process, self.server_port = launch_server_cmd(cmd, port=server_port) self.server_addr = f\u0026#34;http://{host}:{self.server_port}\u0026#34; # 注册服务地址到NameResolving name = names.gen_servers(self.experiment_name, self.trial_name) name_resolve.add_subentry(name, self.server_addr) GserverManager负载均衡 1 2 3 4 5 6 7 8 9 10 11 12 13 # realhf/system/gserver_manager.py class GserverManager(Worker): def _discover_servers(self, n_servers: int): # 通过NameResolving发现所有推理服务器 name = names.gen_servers(self.experiment_name, self.trial_name) urls = name_resolve.get_subtree(name) return urls def _run_routing_service(self): # HTTP服务，接收推理请求并路由到合适的服务器 async def schedule_request(req_meta): server_idx = self._least_requests_schedule(req_meta) return self.server_urls[server_idx] MasterWorker 训练协调 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # realhf/system/master_worker.py class MasterWorker(AsyncWorker): def _configure(self, config): # 初始化Request-Reply客户端 self.func_executor = FunctionExecutor( experiment_name=self.experiment_name, trial_name=self.trial_name, n_subscribers=self.config.n_model_workers, handler_routing=self.config.handler_routing, ) async def _poll_async(self): # 执行训练步骤，通过Request-Reply与ModelWorker通信 result = await self.func_executor.execute_step( step_name=\u0026#34;train_step\u0026#34;, step_kwargs={\u0026#34;batch\u0026#34;: batch} ) ModelWorker 模型训练 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # realhf/system/model_worker.py class ModelWorker(Worker): def _configure(self, config): # 初始化Request-Reply服务器 self.reply_server = NameResolvingReplyServer( experiment_name=self.experiment_name, trial_name=self.trial_name, idx=self.worker_index, ) # 注册训练处理函数 self.reply_server.register_handler(\u0026#34;train_step\u0026#34;, self._train_step) def _train_step(self, batch): # 执行训练步骤 loss = self.model.train_step(batch) # 保存权重并更新版本号 self.model.save_weights(self.param_realloc_path) name = names.model_version(self.experiment_name, self.trial_name, self.model_name.role) name_resolve.add(name, self.global_step) return {\u0026#34;loss\u0026#34;: loss, \u0026#34;global_step\u0026#34;: self.global_step} StreamDataset 数据接收 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # realhf/system/stream_dataset.py class StreamDataset: def __init__(self, args, puller_index): # 初始化ZMQ拉取器 - 接收RolloutWorker推送的数据 self.puller = NameResolvingZmqPuller(args, puller_index) def __iter__(self): while True: # 从ZMQ接收数据 data = self.puller.pull() # 转换为训练格式 sample = SequenceSample.from_json_serializable(data) yield sample ZMQ通信层 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # realhf/system/push_pull_stream.py class NameResolvingZmqPusher(ZMQJsonPusher): def __init__(self, experiment_name, trial_name, pusher_index, pusher_cnt): # 通过NameResolving获取目标地址 pullers = name_resolve.get_subtree(names.stream_pullers(experiment_name, trial_name)) # 计算路由关系 groups = grouping(pusher_cnt, len(pullers)) puller_index = self._find_target_puller(groups, pusher_index) # 获取目标地址并连接 name = names.push_pull_stream(experiment_name, trial_name, f\u0026#34;puller{puller_index}\u0026#34;) addr = name_resolve.wait(name) host, port = addr.split(\u0026#34;:\u0026#34;) super().__init__(host, int(port)) class NameResolvingZmqPuller(ZMQJsonPuller): def __init__(self, args, puller_index): # 绑定随机端口 host, port = network.gethostip(), network.find_free_port() addr = f\u0026#34;{host}:{port}\u0026#34; # 注册地址到NameResolving name = names.push_pull_stream(args.experiment_name, args.trial_name, f\u0026#34;puller{puller_index}\u0026#34;) name_resolve.add(name, addr) super().__init__(host, port) Request-Reply 通信层 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # realhf/system/request_reply_stream.py class NameResolvingRequestClient: def __init__(self, experiment_name, trial_name, n_subscribers, handler_routing): # 创建多个发送socket for i in range(n_subscribers): s = self.context.socket(zmq.PUSH) send_port = s.bind_to_random_port(f\u0026#34;tcp://{host_ip}\u0026#34;) # 注册发送地址 master_send_name = names.request_reply_stream(experiment_name, trial_name, f\u0026#34;master_send_{i}\u0026#34;) name_resolve.add(name=master_send_name, value=f\u0026#34;{host_ip}:{send_port}\u0026#34;) self.send_sockets.append(s) # 创建接收socket self.recv_socket = self.context.socket(zmq.PULL) recv_port = self.recv_socket.bind_to_random_port(f\u0026#34;tcp://{host_ip}\u0026#34;) master_recv_name = names.request_reply_stream(experiment_name, trial_name, \u0026#34;master_recv\u0026#34;) name_resolve.add(name=master_recv_name, value=f\u0026#34;{host_ip}:{recv_port}\u0026#34;) class NameResolvingReplyServer: def __init__(self, experiment_name, trial_name, idx): # 等待MasterWorker注册地址 send_name = names.request_reply_stream(experiment_name, trial_name, \u0026#34;master_recv\u0026#34;) master_recv_addr = name_resolve.wait(send_name, timeout=300) recv_name = names.request_reply_stream(experiment_name, trial_name, f\u0026#34;master_send_{idx}\u0026#34;) master_send_addr = name_resolve.wait(recv_name, timeout=300) # 连接到MasterWorker self.accept(master_send_addr, master_recv_addr) 轨迹数据序列化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 轨迹数据序列化 class Trajectory: def as_json_serializable(self): return { \u0026#34;observations\u0026#34;: self.observations, \u0026#34;actions\u0026#34;: self.actions, \u0026#34;rewards\u0026#34;: self.rewards, \u0026#34;dones\u0026#34;: self.dones, \u0026#34;values\u0026#34;: self.values, \u0026#34;log_probs\u0026#34;: self.log_probs, } # ZMQ传输 self.push_stream.push([traj.as_json_serializable()]) # 接收端反序列化 data = self.puller.pull() sample = SequenceSample.from_json_serializable(data) QA 为什么数据流不通过MasterWorker而是直接到ModelWorker？ ModelWorker直接创建PullerStreamDataset，通过zmq接收RolloutWorker推送的数据。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # realhf/system/model_worker.py class ModelWorker(Worker): def _lazy_setup(self): # 在ModelWorker中创建数据集 datasets = [ data_api.make_dataset( d, self.config.base_seed, self.__dataset_dp_rank, self.__dataset_dp_size, self.config.tokenizer_name_or_path, ) for d in self.config.datasets ] # 特殊处理StreamDataset if not isinstance(self.__datasets[dataset_id], PullerStreamDataset): dataloader_kwargs[\u0026#34;collate_fn\u0026#34;] = data_api.SequenceSample.gather dataloader_kwargs[\u0026#34;batch_size\u0026#34;] = 10240 else: dataloader_kwargs[\u0026#34;batch_size\u0026#34;] = None # StreamDataset不需要batch_size 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class PullerStreamDataset(Dataset): def __init__(self, util, args, dataset_cfgs, pull_timeout_ms=100): # 创建后台线程来拉取数据 self.worker_thread = threading.Thread(target=self._pull_data_worker) self.worker_thread.start() def _pull_data_worker(self): # 在后台线程中创建ZMQ拉取器 stream = NameResolvingZmqPuller( self.args, puller_index=self.util.dp_rank, ) while not self._stop_event.is_set(): # 从ZMQ接收RolloutWorker推送的数据 data = stream.pull(timeout_ms=self.pull_timeout_ms) processed_data = [SequenceSample.from_json_compatible(x) for x in data] # 放入队列供训练使用 self.data_queue.put_nowait(processed_data) def __getitem__(self, idx): # 从队列中获取数据用于训练 samples = [] while True: try: samples += self.data_queue.get_nowait() except queue.Empty: break return samples 目的是为了控制流和数据流的分离，且减少数据中转 。MasterWorker只是做协调训练步骤，而ModelWorker直接接收数据:\n1 2 3 4 5 # MasterWorker: 控制流 await self.func_executor.execute_step() # 协调训练步骤 # ModelWorker: 数据流 stream = NameResolvingZmqPuller(args, puller_index) # 直接接收数据 这里需要理解一点：StreamDataset是持续接收RolloutWorker的数据的，不是按需获取的。stream过程会把数据缓存在内存的queue中，MasterWorker协调训练发生后，ModelWorker从内存队列里直接取数据训练。\n此外，RolloutWorker是按照DP rank分组的，每个ModelWorker负责特定分组的RolloutWorker,通过NameResolving动态发现和链接。\nModelWorker如何和RolloutWorker分组建链？ 问题的本质rollout worker是按照dp分组，那么rollout worker怎么找到对应的model worker的，这其中的服务发现是怎么实现的。\n首先理解如何分组的，比如发送者和接受者的个数不同:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 def grouping(num_senders, num_receivers): groups = {} assert num_senders \u0026gt;= num_receivers # 每个接收者分配多个发送者 senders_per_receiver = num_senders // num_receivers for receiver_id in range(num_receivers): start = receiver_id * senders_per_receiver end = (receiver_id + 1) * senders_per_receiver groups[receiver_id] = list(range(start, end)) # 分配剩余的发送者 remaining = num_senders % num_receivers for i in range(remaining): groups[i].append(num_receivers * senders_per_receiver + i) return groups 1 2 3 4 5 6 7 8 # 假设有6个RolloutWorker，3个ModelWorker grouping(6, 3) # 6个发送者，3个接收者 # 结果： # { # 0: [0, 1], # ModelWorker 0 负责 RolloutWorker 0,1 # 1: [2, 3], # ModelWorker 1 负责 RolloutWorker 2,3 # 2: [4, 5] # ModelWorker 2 负责 RolloutWorker 4,5 # } 其次要理解ModelWorker如何确定自己的DP Rank:\n只有数据并行头节点（tp_rank == 0 and pp_rank == pp_size - 1）才负责接收数据。 每个DP rank对应一个ModelWorker。 DP rank通过拓扑结构确定。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # realhf/system/model_worker.py class ModelWorker(Worker): def _configure(self, cfg): # 遍历所有模型分片，找到数据并行头节点 for s in self.config.shards: _pp_size = s.id.topo.get_dim(\u0026#34;pipe\u0026#34;) # 只有pipeline的最后一个stage且tensor rank为0的才是数据并行头 if not (s.id.tp_rank == 0 and s.id.pp_rank == _pp_size - 1): continue if src_rpc.model_name == s.id.model_name: self.__has_dataset = True self.__dataset_dp_size = s.id.topo.get_dim(\u0026#34;data\u0026#34;) # 总DP数量 self.__dataset_dp_rank = s.id.dp_rank # 当前DP rank break # 注册到NameResolving系统 if self.__has_dataset: name = names.stream_pullers(self.__experiment_name, self.__trial_name) name_resolve.add_subentry(name, str(self.__dataset_dp_rank)) 还要理解RolloutWorker是如何找到对应的ModelWorker的：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # realhf/system/push_pull_stream.py class NameResolvingZmqPusher(ZMQJsonPusher): def __init__(self, experiment_name, trial_name, pusher_index, pusher_cnt, **kwargs): # 1. 获取所有可用的puller（ModelWorker） pullers = name_resolve.get_subtree( names.stream_pullers(experiment_name, trial_name) ) pullers = list(map(int, pullers)) # 转换为整数列表 puller_cnt = len(pullers) # 2. 执行分组算法 groups = grouping(pusher_cnt, puller_cnt) # 3. 找到当前pusher属于哪个puller组 puller_index = None for puller_index, pusher_indices in groups.items(): if pusher_index in pusher_indices: # 这里有个bug，应该是pusher_index break # 4. 通过NameResolving获取目标地址 name = names.push_pull_stream( experiment_name, trial_name, stream_name=f\u0026#34;puller{puller_index}\u0026#34; ) addr = name_resolve.wait(name) host, port = addr.split(\u0026#34;:\u0026#34;) super().__init__(host, int(port), **kwargs) 最后理解完整的匹配流程：\nModelWorker注册 1 2 3 4 5 # ModelWorker启动时 if self.__has_dataset: name = names.stream_pullers(self.__experiment_name, self.__trial_name) name_resolve.add_subentry(name, str(self.__dataset_dp_rank)) # 例如：注册 \u0026#34;puller0\u0026#34;, \u0026#34;puller1\u0026#34;, \u0026#34;puller2\u0026#34; RolloutWorker发现分组 1 2 3 4 5 6 # RolloutWorker启动时 pullers = name_resolve.get_subtree(names.stream_pullers(exp_name, trial_name)) # 获取到 [\u0026#34;0\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;] 表示有3个ModelWorker groups = grouping(6, 3) # 6个RolloutWorker，3个ModelWorker # 结果：{0: [0,1], 1: [2,3], 2: [4,5]} 建立链接 1 2 3 4 5 6 # RolloutWorker 0,1 连接到 ModelWorker 0 # RolloutWorker 2,3 连接到 ModelWorker 1 # RolloutWorker 4,5 连接到 ModelWorker 2 name = names.push_pull_stream(exp_name, trial_name, f\u0026#34;puller{puller_index}\u0026#34;) addr = name_resolve.wait(name) # 等待ModelWorker注册地址 MasterWorker如何和ModelWorker建链？ 与RolloutWorker-ModelWorker的Push-Pull模式（单向）不同，MasterWorker-ModelWorker使用Request-Reply模式（双向）。\nMasterWorker创建Request Client 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # realhf/system/master_worker.py def __lazy_init(self): # 构建handler路由表 handler_routing = copy.deepcopy(self.config.msid2mwid) # 为数据并行添加特殊路由 src_rpc = self.__rpc_srcs[0] src_rpc_topo = self.config.model_topos[src_rpc.model_name] src_rpc_dp_size = src_rpc_topo.get_dim(\u0026#34;data\u0026#34;) src_rpc_pp_size = src_rpc_topo.get_dim(\u0026#34;pipe\u0026#34;) for i in range(src_rpc_dp_size): # 找到每个DP rank对应的ModelWorker rank = src_rpc_topo.get_rank(data=i, pipe=src_rpc_pp_size - 1, tensor=0) handler_routing[f\u0026#34;__data{i}__\u0026#34;] = self.config.msid2mwid[ config_pkg.ModelShardID.from_parallelism_rank( model_name=src_rpc.model_name, topo=src_rpc_topo, parallelism_rank=rank, ) ] # 添加简单的worker_index映射 handler_routing.update({i: i for i in range(self.config.n_model_workers)}) # 创建Request-Reply Stream self.__stream = request_reply_stream.make_master_stream( self.config.worker_info, n_subscribers=self.config.n_model_workers, handler_routing=handler_routing, ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # realhf/system/request_reply_stream.py class NameResolvingRequestClient: def __init__(self, experiment_name, trial_name, n_subscribers, handler_routing): self.context = zmq.Context.instance(io_threads=ZMQ_IO_THREADS) host_ip = socket.gethostbyname(socket.gethostname()) # 1. 为每个ModelWorker创建发送socket self.send_sockets: List[zmq.Socket] = [] for i in range(n_subscribers): s = self.context.socket(zmq.PUSH) send_port = s.bind_to_random_port(f\u0026#34;tcp://{host_ip}\u0026#34;) s.setsockopt(zmq.LINGER, 0) # 注册发送地址到NameResolving master_send_name = names.request_reply_stream( experiment_name, trial_name, f\u0026#34;master_send_{i}\u0026#34; ) name_resolve.add(name=master_send_name, value=f\u0026#34;{host_ip}:{send_port}\u0026#34;) self.send_sockets.append(s) # 2. 创建接收socket self.recv_socket = self.context.socket(zmq.PULL) recv_port = self.recv_socket.bind_to_random_port(f\u0026#34;tcp://{host_ip}\u0026#34;) self.recv_socket.setsockopt(zmq.LINGER, 0) self.recv_address = f\u0026#34;{host_ip}:{recv_port}\u0026#34; # 注册接收地址 master_recv_name = names.request_reply_stream( experiment_name, trial_name, \u0026#34;master_recv\u0026#34; ) name_resolve.add(name=master_recv_name, value=self.recv_address) # 3. 等待所有ModelWorker连接 while ( len( name_resolve.get_subtree( names.request_reply_stream(experiment_name, trial_name, PUBSUB_BARRIER_NAME) ) ) \u0026lt; n_subscribers ): time.sleep(0.1) ModelWorker创建Reply Server 1 2 3 4 5 6 7 # realhf/system/model_worker.py def __lazy_setup(self): # 创建与MasterWorker的连接 self.__stream = request_reply_stream.make_worker_stream( self.config.worker_info, idx=self.__worker_index, ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 # realhf/system/request_reply_stream.py class NameResolvingReplyServer: def __init__(self, experiment_name, trial_name, idx): self.context = zmq.Context.instance(io_threads=ZMQ_IO_THREADS) # 1. 等待MasterWorker注册接收地址 send_name = names.request_reply_stream( experiment_name, trial_name, \u0026#34;master_recv\u0026#34; ) try: master_recv_addr = name_resolve.wait(send_name, timeout=300) except TimeoutError as e: logger.error(f\u0026#34;Worker timeout waiting for master receive stream.\u0026#34;) raise e # 2. 等待MasterWorker注册发送地址 recv_name = names.request_reply_stream( experiment_name, trial_name, f\u0026#34;master_send_{idx}\u0026#34; ) try: master_send_addr = name_resolve.wait(recv_name, timeout=300) except TimeoutError as e: logger.error(f\u0026#34;Worker timeout waiting for master send stream\u0026#34;) raise e # 3. 建立连接 self.accept(master_send_addr, master_recv_addr) # 4. 注册到barrier，通知MasterWorker已连接 name_resolve.add_subentry( name=names.request_reply_stream( experiment_name, trial_name, PUBSUB_BARRIER_NAME ), value=socket.gethostbyname(socket.gethostname()), keepalive_ttl=1200, ) def accept(self, server_send_addr: str, server_recv_addr: str): # 连接到MasterWorker的发送socket recv_socket = self.context.socket(zmq.PULL) recv_socket.connect(f\u0026#34;tcp://{server_send_addr}\u0026#34;) recv_socket.setsockopt(zmq.LINGER, 0) self.recv_socket = recv_socket # 连接到MasterWorker的接收socket send_socket = self.context.socket(zmq.PUSH) send_socket.connect(f\u0026#34;tcp://{server_recv_addr}\u0026#34;) send_socket.setsockopt(zmq.LINGER, 0) self.send_socket = send_socket 为什么Request-Reply模式要设计路由表？ 问题本质是Push-Pull模式直接用DP rank分组策略。而MasterWorker和ModelWorker之间的路由策略要设计特定的路由表。\n因为RolloutWorker-ModelWorker的数据流场景有以下特点：\n持续推送：RolloutWorker持续生成数据 负载均衡：只需要确保数据均匀分布 简单映射：一个RolloutWorker组对应一个ModelWorker 无状态：不需要跟踪具体的任务状态 而控制流场景的特点是：\n精确控制：需要精确指定哪个ModelWorker执行哪个任务 复杂拓扑：模型可能有DP、TP、PP等多种并行维度 状态管理：需要跟踪请求-响应的状态 动态分配：任务可能需要根据负载动态分配 核心还是复杂模型的并行拓扑问题，比如还有细粒度的模型分片(tp, pp)等，不是push-pull场景的1：N映射，而是复杂的N:M映射，还需要考虑拓扑、负载、依赖关系等。所以路由表可以确保：\n每个ModelShardID精确映射到对应的ModelWorker 支持一个ModelWorker承载多个模型分片 支持复杂的跨模型通信（如Actor-Critic架构） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 路由表示例 handler_routing = { # 模型分片ID -\u0026gt; ModelWorker索引 \u0026#34;ModelShardID(model_name=\u0026#39;actor\u0026#39;, dp_rank=0, tp_rank=0, pp_rank=0)\u0026#34;: 0, \u0026#34;ModelShardID(model_name=\u0026#39;actor\u0026#39;, dp_rank=1, tp_rank=0, pp_rank=0)\u0026#34;: 1, # 数据并行特殊路由 \u0026#34;__data0__\u0026#34;: 0, # DP rank 0 -\u0026gt; ModelWorker 0 \u0026#34;__data1__\u0026#34;: 1, # DP rank 1 -\u0026gt; ModelWorker 1 # 简单索引映射 0: 0, # ModelWorker 0 1: 1, # ModelWorker 1 } 不同并行场景下的路由表长什么样？ 场景1：纯DP（dp=2）\n配置：\n2个ModelWorker\n1种模型结构，DP=2\n每个ModelWorker承载1个DP rank\n1 2 3 4 5 6 7 8 9 10 11 12 13 handler_routing = { # 模型分片映射 ModelShardID(model=\u0026#34;actor\u0026#34;, dp=0, tp=0, pp=0): 0, # DP rank 0 -\u0026gt; MW 0 ModelShardID(model=\u0026#34;actor\u0026#34;, dp=1, tp=0, pp=0): 1, # DP rank 1 -\u0026gt; MW 1 # 数据路由映射 \u0026#34;__data0__\u0026#34;: 0, # 数据0 -\u0026gt; MW 0 \u0026#34;__data1__\u0026#34;: 1, # 数据1 -\u0026gt; MW 1 # 用于Worker间的直接通信 0: 0, # MW 0 -\u0026gt; MW 0 1: 1, # MW 1 -\u0026gt; MW 1 } 特点：\n简单的1:1映射\n每个ModelWorker独立处理一个DP rank\n数据路由与模型分片路由一致\n场景2: DP + TP （DP=2，TP=2）\n配置：\n4个ModelWorker\n1种模型结构，DP=2, TP=2\n每个ModelWorker承载1个模型分片\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 handler_routing = { # 模型分片映射 (DP=2, TP=2) ModelShardID(model=\u0026#34;actor\u0026#34;, dp=0, tp=0, pp=0): 0, # (0,0) -\u0026gt; MW 0 副本0的前半 ModelShardID(model=\u0026#34;actor\u0026#34;, dp=0, tp=1, pp=0): 1, # (0,1) -\u0026gt; MW 1 副本0的后半 ModelShardID(model=\u0026#34;actor\u0026#34;, dp=1, tp=0, pp=0): 2, # (1,0) -\u0026gt; MW 2 副本1的前半 ModelShardID(model=\u0026#34;actor\u0026#34;, dp=1, tp=1, pp=0): 3, # (1,1) -\u0026gt; MW 3 副本1的后半 # 数据路由映射 (每个DP rank对应多个TP rank) \u0026#34;__data0__\u0026#34;: 0, # DP rank 0 的head -\u0026gt; MW 0 (tp=0) \u0026#34;__data1__\u0026#34;: 2, # DP rank 1 的head -\u0026gt; MW 2 (tp=0) # 直接索引映射 0: 0, 1: 1, 2: 2, 3: 3, } 前向/反向时，MasterWorker会根据dp/tp/pp的rank，查找ModelShardID，路由到对应的worker（卡号）。\n数据分发时，比如dp=0的数据，直接通过\u0026quot;data0\u0026ldquo;路由到卡0（tp=0的head）；dp=1的数据路由到卡2。\n特点：\n每个DP rank有多个TP分片\n数据路由指向每个DP rank的head (tp=0)\n需要TP内部的通信协调\n场景3：DP + TP + PP （DP=2, TP=2, PP=2）\n配置：\n8个ModelWorker\n1种模型结构，DP=2, TP=2, PP=2\n每个ModelWorker承载1个模型分片\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 handler_routing = { # 模型分片映射 (DP=2, TP=2, PP=2) # PP=0 ModelShardID(model=\u0026#34;actor\u0026#34;, dp=0, tp=0, pp=0): 0, # (0,0,0) -\u0026gt; MW 0 ModelShardID(model=\u0026#34;actor\u0026#34;, dp=0, tp=1, pp=0): 1, # (0,1,0) -\u0026gt; MW 1 ModelShardID(model=\u0026#34;actor\u0026#34;, dp=1, tp=0, pp=0): 2, # (1,0,0) -\u0026gt; MW 2 ModelShardID(model=\u0026#34;actor\u0026#34;, dp=1, tp=1, pp=0): 3, # (1,1,0) -\u0026gt; MW 3 # PP=1 (最后一层) ModelShardID(model=\u0026#34;actor\u0026#34;, dp=0, tp=0, pp=1): 4, # (0,0,1) -\u0026gt; MW 4 ModelShardID(model=\u0026#34;actor\u0026#34;, dp=0, tp=1, pp=1): 5, # (0,1,1) -\u0026gt; MW 5 ModelShardID(model=\u0026#34;actor\u0026#34;, dp=1, tp=0, pp=1): 6, # (1,0,1) -\u0026gt; MW 6 ModelShardID(model=\u0026#34;actor\u0026#34;, dp=1, tp=1, pp=1): 7, # (1,1,1) -\u0026gt; MW 7 # 数据路由映射 (每个dp组的head，通常pp=最后一层, tp=0) \u0026#34;__data0__\u0026#34;: 4, # DP rank 0 的最后一层 -\u0026gt; MW 4 (pp=1, tp=0) \u0026#34;__data1__\u0026#34;: 6, # DP rank 1 的最后一层 -\u0026gt; MW 6 (pp=1, tp=0) # 直接索引映射 0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, } 模型函数调用： MasterWorker根据dp/tp/pp的rank，构造ModelShardID，查找handler_routing，路由到对应worker（卡号）。\n例如：要调度dp=1, tp=0, pp=1的分片，查找ModelShardID(dp=1, tp=0, pp=1)，得到worker id=6（卡6）。\n数据分发：\n数据分发通常路由到每个dp组的“head”，即pp=最后一层、tp=0的分片。\n例如：dp=0的数据，查找\u0026rdquo;data0\u0026quot;，得到worker id=4（卡4，dp=0, tp=0, pp=1）。\ndp=1的数据，查找\u0026quot;data1\u0026quot;，得到worker id=6（卡6，dp=1, tp=0, pp=1）。\n特点：\n最复杂的3D并行拓扑\n数据路由指向每个DP rank的最后一层 (pp=1)\n需要PP内部的流水线协调\n场景4：Actor-Critic架构 (DP=2)\n配置：\n2个ModelWorker\nActor和Critic两个模型结构，DP=2\n每个ModelWorker承载Actor和Critic的同一个DP rank\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 handler_routing = { # Actor模型分片 ModelShardID(model=\u0026#34;actor\u0026#34;, dp=0, tp=0, pp=0): 0, # Actor DP=0 -\u0026gt; MW 0 ModelShardID(model=\u0026#34;actor\u0026#34;, dp=1, tp=0, pp=0): 1, # Actor DP=1 -\u0026gt; MW 1 # Critic模型分片 ModelShardID(model=\u0026#34;critic\u0026#34;, dp=0, tp=0, pp=0): 0, # Critic DP=0 -\u0026gt; MW 0 ModelShardID(model=\u0026#34;critic\u0026#34;, dp=1, tp=0, pp=0): 1, # Critic DP=1 -\u0026gt; MW 1 # 数据路由映射 (Actor和Critic共享) \u0026#34;__data0__\u0026#34;: 0, # 数据0 -\u0026gt; MW 0 (Actor和Critic的DP=0) \u0026#34;__data1__\u0026#34;: 1, # 数据1 -\u0026gt; MW 1 (Actor和Critic的DP=1) # 直接索引映射 0: 0, 1: 1, } 特点：\n一个ModelWorker承载多个模型\nActor和Critic共享相同的DP rank\n支持模型间的参数同步\n框架针对不同的拓扑是按照什么顺序切分的？ 从路由表可以看到，3D并行下不同的切分顺序会影响卡和rank的映射，这个问题是一个分布式并行训练的基础问题，和框架的实现一起来理解。\n从代码中可以看到，AReaL框架使用固定的切分顺序：\n1 2 3 4 5 6 # realhf/base/topology.py class ProcessTopology: def __init__(self, axes, dims): # axes定义了切分顺序，dims定义了每个维度的切分大小 self.axes = axes # 切分顺序 self.dims = dims # 切分大小 1 2 3 4 5 # 训练时的拓扑 PipeDataTensorParallelTopology(axes=[\u0026#39;pipe\u0026#39;, \u0026#39;data\u0026#39;, \u0026#39;tensor\u0026#39;]) # 推理时的拓扑 DataPipeTensorParallelTopology(axes=[\u0026#39;data\u0026#39;, \u0026#39;pipe\u0026#39;, \u0026#39;tensor\u0026#39;]) 也就是训练和推理的切分拓扑不同。\n标准顺序：PP -\u0026gt; DP -\u0026gt; TP (训练时)：\n1 2 3 4 5 6 7 8 9 10 11 12 13 # 8张卡，DP=2, TP=2, PP=2 # 切分顺序：PP -\u0026gt; DP -\u0026gt; TP rank = pp_rank * (dp_size * tp_size) + dp_rank * tp_size + tp_rank # 映射结果： # 卡0: pp=0, dp=0, tp=0 (rank=0) # 卡1: pp=0, dp=0, tp=1 (rank=1) # 卡2: pp=0, dp=1, tp=0 (rank=2) # 卡3: pp=0, dp=1, tp=1 (rank=3) # 卡4: pp=1, dp=0, tp=0 (rank=4) # 卡5: pp=1, dp=0, tp=1 (rank=5) # 卡6: pp=1, dp=1, tp=0 (rank=6) # 卡7: pp=1, dp=1, tp=1 (rank=7) 原因：\n流水线友好：PP维度相邻的rank在物理上相邻，减少流水线通信开销\n数据并行效率：同一PP stage内的DP rank可以高效进行AllReduce\n内存局部性：同一PP stage的数据在内存上更接近\n推理时：DP -\u0026gt; PP -\u0026gt; TP:\n原因：\n数据分发友好：DP rank相邻，便于数据分发\n推理并行：同一DP组内的PP rank可以并行处理不同batch\n负载均衡：DP维度优先，便于负载均衡\n","permalink":"http://localhost:64667/posts/aiinfra/03-areal/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/inclusionAI/AReaL\"\u003ehttps://github.com/inclusionAI/AReaL\u003c/a\u003e\u003cbr\u003e\n纯异步RL方案\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"异步ppo训练调用流程\"\u003e异步PPO训练调用流程\u003c/h2\u003e\n\u003cpre class=\"mermaid\"\u003e\n  graph TD\n    A[用户执行: examples/run_async_ppo.sh] --\u0026gt; B[training/main_async_ppo.py]\n    B --\u0026gt; C[AsyncPPOMATHConfig配置解析]\n    C --\u0026gt; D[training/utils.py: run_experiment]\n    \n    D --\u0026gt; E[Ray初始化]\n    E --\u0026gt; F[exp_cfg.initial_setup]\n    F --\u0026gt; G[AsyncRLExperimentConfig.initial_setup]\n    G --\u0026gt; H[创建ExperimentConfig]\n    \n    H --\u0026gt; I[启动Workers]\n    I --\u0026gt; J[MasterWorker]\n    I --\u0026gt; K[ModelWorker]\n    I --\u0026gt; L[GenerationServer]\n    I --\u0026gt; M[GserverManager]\n    I --\u0026gt; N[RolloutWorker]\n    \n    %% MasterWorker训练流程\n    J --\u0026gt; J1[MasterWorker._poll_async]\n    J1 --\u0026gt; J2[FunctionExecutor.execute_step]\n    J2 --\u0026gt; J3[执行数据流图遍历]\n    J3 --\u0026gt; J4[发送训练请求到ModelWorker]\n    \n    %% ModelWorker处理流程\n    K --\u0026gt; K1[ModelWorker._poll]\n    K1 --\u0026gt; K2[接收MasterWorker请求]\n    K2 --\u0026gt; K3[处理训练/推理请求]\n    K3 --\u0026gt; K4[执行模型前向/反向传播]\n    \n    %% Rollout流程\n    N --\u0026gt; N1[RolloutWorker._poll_async]\n    N1 --\u0026gt; N2[load_next_data]\n    N2 --\u0026gt; N3[allocate_new_rollout]\n    N3 --\u0026gt; N4[agent.collect_trajectory]\n    N4 --\u0026gt; N5[env.step计算奖励]\n    N5 --\u0026gt; N6[推送数据到训练端]\n    \n    %% 生成服务器流程\n    L --\u0026gt; L1[GenerationServer._poll]\n    L1 --\u0026gt; L2[启动SGLang子进程]\n    L2 --\u0026gt; L3[处理生成请求]\n    \n    %% 生成服务器管理器\n    M --\u0026gt; M1[GserverManager._poll]\n    M1 --\u0026gt; M2[HTTP服务线程]\n    M2 --\u0026gt; M3[请求调度和权重更新]\n    \n    %% 数据流\n    N6 --\u0026gt; O[stream_dataset.py]\n    O --\u0026gt; J4\n    \n    %% 异步通信\n    J4 -.-\u0026gt;|异步请求| K2\n    N3 -.-\u0026gt;|HTTP请求| M2\n    M2 -.-\u0026gt;|调度请求| L3\n    \n    %% 权重更新\n    K4 --\u0026gt; P[参数更新]\n    P --\u0026gt; Q[权重同步]\n    Q --\u0026gt; M3\n    M3 --\u0026gt; R[更新生成服务器权重]\n    \n    style A fill:#e1f5fe\n    style J fill:#f3e5f5\n    style K fill:#e8f5e8\n    style L fill:#fff3e0\n    style M fill:#fce4ec\n    style N fill:#f1f8e9\n\u003c/pre\u003e\n\n\u003ch3 id=\"用户入口到配置解析\"\u003e用户入口到配置解析\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eexamples/run_async_ppo.sh\u003c/code\u003e → \u003ccode\u003etraining/main_async_ppo.py\u003c/code\u003e\u003c/p\u003e","title":"[LLM4RL] 异步RL框架: Areal"},{"content":" 6.19发布的CloudMatrix384论文拆解，从宏观到基础概念\n核心指标和计算方式 TPOT (Time Per Output Token) 公式： $$TPOT= \\frac{Decode总耗时}{生成Token数量}$$ 测量方式： 从第一个输出Token开始计时，到生成结束（含MoE通信/KV读取） 为什么重要： 直接决定用户体验（如Chatbot响应速度），论文要求 \u0026lt;50ms（严格模式\u0026lt;15ms） 深层意义： 反映系统通信+计算综合能力，EP320下TPOT=42ms证明UB网络突破MoE通信墙 计算效率 (Tokens/s per TFLOPS) 公式： $$计算效率=\\frac {吞吐量(tokens/s)} {NPU峰值算力(TFLOPS)}$$​ 论文数据： 阶段 值 对比基准 Prefill 4.45 超NVIDIA H100+SGLang(3.8) Decode 1.29 超NVIDIA H800+DeepSeek(0.9) 为什么重要： 揭示硬件利用率，1.0以上表明软硬件协同极致优化 深层意义： Decode阶段1.29 → 昇腾910的Cube引擎利用率达 86%（传统GPU仅60%) 缓存访问延迟 (KV Cache Access Latency) 公式： $$延迟=TMMU_{查询}+TUB_{传输}+TDRAM_{读取}​$$ 论文数据： 场景 延迟 对比传统 本地HBM命中 0.2μs - 远程DRAM访问(UB) 1.5μs \u0026gt;10μs (PCIe+IB) 为什么重要： 长上下文推理中70%时间花在KV缓存访问 深层意义： UB统一内存将远程访问性能提升至近本地水平，支撑百万Token上下文。 专家并行扩展性 (EP Degree) 定义：单个MoE层可分布的专家数量 论文突破：EP320（每个昇腾Die托管1个专家） 支撑公式： $$可扩展性=\\frac {UB总带宽}{单个专家通信需求}$$ $$EPmax=\\frac {384×392GB/s} {8B/token×10^6token/s}=320$$ 为什么重要： EP\u0026gt;100时传统网络崩溃，EP320证明UB突破通信可扩展性极限 INT8量化收益 公式：$$ 加速比=\\frac {FP16吞吐}{INT8吞吐}×精度保持率$$ 论文数据： 吞吐提升：1.8倍 精度损失：\u0026lt;0.5%（16个基准测试） 为什么重要： Decode阶段内存带宽减少50%，解决NPU的“内存墙”问题 QA辅助理解 为什么用TPOT而非QPS？ TPOT剥离Batch Size影响，纯粹衡量单次生成效率 更直观反映SLA（用户感知的延迟） 为什么强调计算效率而非绝对吞吐？ 排除工艺优势（7nm vs 5nm），聚焦架构创新价值 1.29 tokens/s/TFLOPS → 证明UB+LEP设计优于NVLink+GPU 为什么测量远程DRAM访问延迟？ 验证内存池化的实际效果，这是打破“内存墙”的核心 1.5μs延迟 → 实现“全集群如单机”的硬件基础 超节点架构 三级网络平面的物理隔离 硬件隔离原理\ngraph TD subgraph Ascend节点 NPU[NPU计算单元] --\u0026gt;|直连| L1_SW[L1 UB交换芯片] CPU[Kunpeng CPU] --\u0026gt;|直连| L1_SW L1_SW --\u0026gt;|专用光纤| L2_SW[L2 UB交换芯片] NPU --\u0026gt;|专用SerDes| RDMA_NIC[RDMA网卡] RDMA_NIC --\u0026gt;|RoCE协议| External_RDMA[外部RDMA网络] CPU --\u0026gt;|PCIe| Qingtian[Qingtian DPU] Qingtian --\u0026gt;|以太网| VPC_Switch[VPC交换机] end 隔离关键点：\n物理链路分离：\nUB平面：NPU/CPU → L1交换芯片 → 专用光纤 → L2交换芯片（通信机柜） RDMA平面：NPU → 板载RDMA SerDes接口 → 外部RoCE网络 VPC平面：CPU → Qingtian DPU → 标准以太网交换机 协议栈隔离：\nUB协议：自定义帧格式（128B载荷+8B路由头），硬件加速 RDMA协议：RoCEv2（兼容InfiniBand生态） VPC协议：TCP/IP + UBoE扩展 流量管控：\nMatrixLink组件：在Qingtian DPU上实现QoS策略 UB平面：最高优先级（保障MoE/KV缓存流量） RDMA平面：中等优先级（训练/推理数据同步） VPC平面：最低优先级（管理/存储流量） 三级平面分层设计价值 解决的关键问题对比\n挑战场景 UB平面解决方案 RDMA平面解决方案 VPC平面解决方案 MoE的Token分发(All-to-All) 全互联拓扑延迟\u0026lt;1.2μs 不适用 不适用 跨节点KV缓存同步 本地化优先（延迟最优） 200Gbps带宽同步 不适用 模型冷启动加载 从内存池直接加载（1.5μs） 从远端存储加载（\u0026gt;10ms） 从对象存储加载（\u0026gt;100ms） 用户请求接入 不适用 不适用 以太网/IP协议接入 分层逻辑： 性能敏感层（UB）： 承载95%的AI内部通信流量 硬件级隔离保障亚微秒延迟 扩展兼容层（RDMA）： 解决超节点间数据同步 兼容行业标准（RoCEv2） 生态接入层（VPC）： 无缝对接现有云设施 通过UBoE逐步增强性能 超节点物理部署架构 graph TB subgraph 超节点CloudMatrix384 subgraph 12个计算机柜 subgraph 节点1 NPU1_0 --\u0026gt; L1_SW1[L1 UB芯片] ... --\u0026gt; L1_SW1 L1_SW1 --\u0026gt;|平面1| L2_SW1[L2 UB交换机] L1_SW1 --\u0026gt;|平面7| L2_SW7 end subgraph 节点48 NPU48_0 --\u0026gt; L1_SW48 L1_SW48 --\u0026gt;|平面1| L2_SW1 L1_SW48 --\u0026gt;|平面7| L2_SW7 end end subgraph 4个通信机柜 L2_SW1[L2 UB交换机组] --\u0026gt;|全互联| 所有L1芯片 L2_SW7[L2 UB交换机组] --\u0026gt;|全互联| 所有L1芯片 end RDMA_NIC组[RDMA网卡集群] --\u0026gt;|RoCE| 跨超节点网络 Qingtian_DPU组 --\u0026gt;|以太网| 数据中心核心交换机 end 关键说明：\n计算部分：\n48个节点（384 NPU + 192 CPU）部署在12个机柜 每个节点含7个L1 UB交换芯片（共48×7=336个L1芯片） 通信部分：\n4个专用通信机柜部署L2 UB交换机组 7个独立子平面 × 16个L2芯片 = 112个L2交换机 每个L1芯片直连16个L2芯片（总链路数=336×16=5,376） 扩展接口：\nRDMA出口：NPU直连的RoCE网卡集群 VPC出口：CPU连接的Qingtian DPU集群 逻辑全局架构图（硬件+软件视图） graph LR subgraph 逻辑资源池 direction TB NPU_Pool[NPU计算池] --\u0026gt;|UB访问| Memory_Pool[全局内存池] CPU_Pool[CPU资源池] --\u0026gt;|UB访问| Memory_Pool Memory_Pool --\u0026gt;|存储| KV_Cache[分布式KV缓存] NPU_Pool --\u0026gt;|RDMA| Other_Supernode[其他超节点] CPU_Pool --\u0026gt;|VPC| DC_Network[数据中心网络] end subgraph 软件服务层 Prefill[Prefill集群] --\u0026gt;|读取| KV_Cache Decode[Decode集群] --\u0026gt;|更新| KV_Cache Cache_Mgr[缓存管理器] --\u0026gt;|调度| KV_Cache MatrixResource --\u0026gt;|资源编排| NPU_Pool MatrixLink --\u0026gt;|网络策略| Memory_Pool end 架构解析：\n硬件抽象层：\n全局内存池：物理分散的NPU HBM + CPU DRAM → 逻辑统一地址空间 动态资源池：NPU/CPU按需组成Prefill/Decode集群（如EP320） 网络平面映射：\nUB平面：承载内存池访问/MoE通信（图中实线） RDMA平面：跨超节点KV同步（虚线） VPC平面：外部服务接入（点划线） 软件控制层：\nMatrixResource：拓扑感知的资源编排（如动态分配160 NPU给Decode） MatrixLink：UB网络QoS保障（优先MoE流量） UB统一总线理解 UB网络核心设计目标 解决传统分布式系统的通信瓶颈：\n问题：MoE模型中的Token分发（Token Dispatch）和专家输出合并（Expert Output Combination）需高频All-to-All通信，传统树状网络（如InfiniBand）因多级转发导致延迟\u0026gt;3μs。 目标：通过全互联直连拓扑实现亚微秒级延迟（\u0026lt;1μs）和接近0带宽衰减。 UB网络物理架构与数据流动 硬件拓扑结构 graph TD subgraph 超节点内通信 A[Ascend 910节点] --\u0026gt;|L1 UB交换芯片| B[L2 UB交换平面] B --\u0026gt;|全互联| C[其他Ascend节点] end L1交换层：每个Ascend 910节点（含8 NPU）配备7个L1 UB交换芯片。 L2交换层：超节点分为7个独立子平面，每个子平面含16个L2 UB交换芯片。 连接方式： 每个L1芯片直连对应子平面的所有16个L2芯片（避免带宽阻塞）。 带宽保障：节点内部带宽（392 GB/s） = L1→L2总带宽（392 GB/s × 7）。 数据流动示例\n假设NPU0需将Token发送至专家255（位于NPU255）： sequenceDiagram participant NPU0 as NPU0（源） participant L1 as L1交换芯片（节点内） participant L2 as L2交换芯片（子平面） participant NPU255 as NPU255（目标） NPU0-\u0026gt;\u0026gt;L1: 发送Token数据（含专家ID=255） L1-\u0026gt;\u0026gt;L2: 根据专家ID选择子平面（如平面#3） L2-\u0026gt;\u0026gt;NPU255: 直连转发至目标NPU NPU255-\u0026gt;\u0026gt;L2: 返回确认信号 L2-\u0026gt;\u0026gt;L1: 回传确认 L1-\u0026gt;\u0026gt;NPU0: 完成传输 关键优化： 零路由表查询：硬件预配置专家ID与L2子平面的映射关系，避免软件寻址开销。 物理直连：L1→L2、L2→目标NPU均为点到点光纤直连，无中间交换机。 通信协议栈与硬件加速 UB协议栈分层设计 层级 功能 物理层 112 Gbps SerDes接口，64B/66B编码，支持392 GB/s单向带宽 链路层 硬件事务拆分（Chunking）和重组，支持最大8KB报文 传输层 零拷贝DMA引擎，绕过CPU和OS内核（类似GPUDirect RDMA） 应用层 融合通信算子（如MoE的Token Dispatch/Combination封装为单条硬件指令） MoE通信的硬件融合 传统流程 graph LR A[Token分发] --\u0026gt; B[专家计算] --\u0026gt; C[输出合并] 需两次独立的All-to-All通信（延迟翻倍）\nUB优化流程 graph LR A[Token分发 + 输出合并] --\u0026gt;|单次融合操作| B[专家计算] 硬件指令：昇腾910内置MOE_FUSED_COMM指令，将两次通信合并为一次。 带宽节省：Token元数据（专家ID）与输出张量共享同一缓存区。 关键场景性能对比 ALL-to-ALL延迟（256 NPU） 架构 延迟（μs） 瓶颈原因 InfiniBand HDR 12.3 多级交换机转发 + 协议栈开销 UB网络 1.2 物理直连 + 硬件融合通信 KV 缓存访问流程 flowchart TD A[NPU需读取历史KV块] --\u0026gt; B{本地HBM命中？} B -- 未命中 --\u0026gt; C[通过UB访问远程DRAM池] C --\u0026gt; D[从CPU内存池直接读取] D --\u0026gt; E[数据返回NPU] 性能优势： 远程DRAM访问延迟≈1.5μs（对比InfiniBand的\u0026gt;10μs）。 带宽利用率\u0026gt;90%（传统方案\u0026lt;50%）。 创新点 1. 全互联拓扑的本质 物理层：用两级星型结构（L1局部全连 + L2分组全连）逼近FullMesh性能，避免O(N²)链路复杂度。 协议层：将通信模式抽象为硬件指令（如ALL_TO_ALL），由NPU通信引擎直接执行。 2. 与NVIDIA方案的对比 特性 NVIDIA NVLink/Switch Huawei UB 拓扑 单节点全连，跨节点树状 超节点内全互联 延迟 节点内0.5μs，跨节点\u0026gt;3μs 全节点\u0026lt;1μs MoE支持 EP144需复杂流水线掩盖延迟 原生支持EP320 内存池化 仅GPU显存共享 NPU+CPU全局内存池 UB网络数据流动全貌 graph LR subgraph CloudMatrix384超节点 direction TB subgraph Node1[Ascend节点1] NPU1_0 --\u0026gt; L1_1[L1交换芯片] NPU1_1 --\u0026gt; L1_1 ... --\u0026gt; L1_1 L1_1 --\u0026gt;|平面1| L2_1[L2交换芯片群] L1_1 --\u0026gt;|平面2| L2_2 L1_1 --\u0026gt;|平面7| L2_7 end subgraph Node48[Ascend节点48] NPU48_0 --\u0026gt; L1_48 ... L1_48 --\u0026gt;|平面1| L2_1 L1_48 --\u0026gt;|平面7| L2_7 end L2_1 --\u0026gt; NPU48_0 L2_7 --\u0026gt; NPU1_0 end 箭头方向：数据通过L1/L2芯片跨节点直连。 带宽保障：每个L1芯片的7条链路独立工作，总带宽=7×392 GB/s。 QA辅助理解 什么是星型拓扑？UB网络是纯星型吗？ 经典星型拓扑：所有节点连接至中心交换机，优点是布线简单，缺点是中心节点易成瓶颈（单点故障/带宽限制）。 UB的改良设计： graph TB subgraph L2子平面 L2_SW1[L2交换机1] L2_SW2[L2交换机2] end NPU0 --\u0026gt;|直连| L1_SW[节点内L1交换机] L1_SW --\u0026gt;|全互联| L2_SW1 L1_SW --\u0026gt;|全互联| L2_SW2 两级星型混合：节点内8 NPU → 7个L1交换机（星型），L1交换机 → 16个L2交换机（全互联）。 优势：用O(N)布线复杂度逼近FullMesh性能，避免中心瓶颈（L2分散负载）。 为什么UB能实现“跨节点延迟\u0026lt;1μs”？ 协议硬化 + 物理直连\n步骤 传统InfiniBand UB优化 数据发出 NPU → 驱动 → 内核协议栈 NPU直连SerDes接口 跨节点路由 多级交换机转发（3-5跳） L1→L2单跳直达（物理直连） 数据接收 内核协议栈 → 驱动 → NPU 直写NPU缓存（DMA引擎） 典型延迟 \u0026gt;3μs 0.8-1.2μs 关键创新： 跳过操作系统协议栈（类似RDMA但更底层） 交换机无路由查找（预配置专家ID→平面映射） 融合通信算子如何减少MoE通信开销？ 合并两次All-to-All为单次硬件事务\n1 2 3 4 5 6 // 昇腾910硬件指令 moe_fused_comm( input_tokens, expert_mask, // 携带路由信息 output_buffer // 预留专家输出空间 ); 效果：单次通信完成分发+合并，延迟降至5μs内（EP320实测）。 什么是“零拷贝DMA”？UB如何实现？ 内存直接访问，跳过CPU复制\n传统流程（以KV缓存读取为例）： 远程DRAM → 网卡 → 主机内存 → PCIe → NPU内存（3次拷贝） UB零拷贝： 远程DRAM → UB网络 → NPU计算单元 硬件支持： NPU集成DMA引擎，直接发起远程内存读写请求 UB交换机维护全局内存地址表（类似CC-NUMA） 带宽利用率：从**\u0026lt;50%（InfiniBand）提升至\u0026gt;90%** 为什么需要7个L2子平面？ 匹配Ascend 910芯片接口，避免带宽阻塞\n数学关系： 单NPU带宽需求：392 GB/s 单L1交换机上行带宽 = 7链路 × 56 GB/s = 392 GB/s 每个L1需直连7组L2才能满足带宽（7×56=392） 容错设计： 任一L2子平面故障不影响其他平面通信 动态路由切换（MatrixLink组件） 分布式KV缓存在UB上如何工作？ 全局内存池 + 硬件一致性协议\nflowchart LR NPU1 --\u0026gt;|UB读请求| CachePool[CPU DRAM池] CachePool --\u0026gt;|返回数据| NPU1 NPU2 --\u0026gt;|并行写| CachePool 一致性保障： 硬件级MESI协议（缓存行锁定） 写冲突时L2交换机仲裁（优先本地化写入） 性能对比：\n场景 传统方案延迟 UB延迟 跨节点读缓存 10μs+ 1.5 UB如何支持动态负载？ 资源池化 + 软件定义拓扑\n硬件基础： NPU/CPU/内存物理解耦 UB网络虚拟化（VXLAN类似技术） 动态调整示例： 1 2 3 4 # 突发流量时扩容Decode集群 if request_queue \u0026gt; threshold: assign_new_npus(\u0026#34;Decode\u0026#34;, 40) # 从空闲池分配40 NPU update_routing_table() # 更新专家路由表 效果：10秒内扩容EP40组，TPOT仍\u0026lt;50ms UB与NVIDIA NVLink本质区别？ 全集群统一总线 vs 节点内互联\n维度 NVLink/Switch UB 拓扑范围 单节点（8 GPU） 384 NPU全域 内存模型 仅GPU显存共享 CPU+NPU全局池化 扩展方式 树状扩展（带宽衰减） 全互联扩展 延迟一致性 跨节点\u0026gt;3μs 全域\u0026lt;1μs 为什么需要专用L1/L2交换芯片？ 解决SerDes电气限制 + 协议卸载\n电气层： 单SerDes链路极限56 GB/s → 需多链路并行 L1芯片聚合8 NPU流量（392 GB/s） 协议层： 卸载路由计算、CRC校验、重传机制 NPU无需处理通信协议（算力100%用于AI） 融合算子具体如何节省带宽？ 元数据与有效载荷合并编码\n传统两次通信： Token分发：发送{token_data, expert_id} 输出合并：发送{expert_output, token_id} 总数据量：2×(数据+ID) UB融合通信： 单次发送{token_data, expert_id, output_buffer_addr} 节省：减少50% ID字段传输，带宽需求下降35% UB如何保障大规模组网的信号完整性？ 光电混合 + 时钟同步技术\n挑战：384 NPU全互联需数万链路，电信号衰减严重 华为方案： 关键路径用光纤替代铜缆（L2交换机间） 全局时钟分发网络（误差\u0026lt;5ps） 接收端自适应均衡（CTLE+DFE） 为什么说UB是“AI原生网络”？ 硬件指令级AI通信原语\n1 2 3 4 5 6 // Ascend 910指令集扩展 ascend_moe_dispatch( expert_mask, // 门控网络输出 token_ptr, // 输入token地址 ub_channel_id // 指定UB虚拟通道 ); 与AI计算流水线深度耦合： 通信操作作为AI计算图的一部分编译 立方体引擎(Cube)执行FFN时自动触发通信 对比传统网络：需CPU调度MPI库，上下文切换开销大 UB全局内存理解 基础概念：KV缓存的核心挑战 问题本质 KV缓存：存储Transformer历史注意力状态（Key/Value向量），用于长上下文推理 挑战： 百万token上下文需TB级内存 → NPU本地HBM（仅32GB）无法容纳 传统方案：跨节点复制数据 → 带宽瓶颈 \u0026amp; 高延迟 传统方案（NVIDIA架构） graph LR A[GPU0] --\u0026gt;|NVLink| B[GPU1本地HBM] B --\u0026gt;|PCIe| C[CPU内存] C --\u0026gt;|InfiniBand| D[远程节点内存] 访问流程： 缺失的KV块从远程节点复制到本地HBM GPU计算单元读取本地HBM 痛点： 高延迟：跨节点复制链路过长（\u0026gt;10μs） 低带宽：InfiniBand带宽（200Gbps） \u0026laquo; HBM带宽（3TB/s） 数据孤岛：GPU显存无法直接共享 华为UB全局内存的硬件基础 物理架构：三级资源池化 graph TB subgraph CloudMatrix384 NPU_HBM[NPU HBM] --\u0026gt; UB CPU_DRAM[CPU DRAM池] --\u0026gt; UB UB --\u0026gt;|统一编址| Global_Memory[全局内存空间] end 核心组件： NPU HBM：昇腾910双Die共32GB，带宽3.2TB/s（本地高速缓存） CPU DRAM池：192鲲鹏CPU的TB级内存（主存储池） UB网络：392GB/s全互联，延迟\u0026lt;1μs（数据通路） 地址映射硬件（类似CC-NUMA） flowchart TD NPU[NPU计算单元] --\u0026gt; MMU[内存管理单元] MMU --\u0026gt;|本地地址？| Local{地址检查} Local --\u0026gt;|是| HBM[本地HBM] Local --\u0026gt;|否| UB_Interface[UB网络接口] UB_Interface --\u0026gt;|全局地址| UB_Switch[UB交换机] UB_Switch --\u0026gt;|路由| Target[目标内存设备] 关键硬件： 全局地址表：存储在UB交换机中，记录物理内存位置 零拷贝DMA：NPU直接发起远程内存读写，无需CPU参与 缓存一致性协议（硬件加速MESI） 挑战：多NPU并发修改同一KV块 解决方案： UB交换机内置一致性引擎 基于物理地址的缓存行锁定（64B粒度） 写冲突时优先本地化处理（Locality-aware） 软件层实现：全局内存访问原理 内存分配（软件API） 1 2 3 4 5 6 7 8 // 在DRAM池分配分布式KV缓存 kv_cache_t* kv_buf = ub_mem_alloc_pooled( UBMEM_DRAM_POOL, // 内存池类型 1024 * 1024 * 1024, // 1GB空间 KV_CACHE_TAG // 标记为KV缓存 ); // NPU直接映射到地址空间 void* npu_virt_addr = ub_map_remote(kv_buf); 关键操作： ub_mem_alloc_pooled：从DRAM池分配物理内存 ub_map_remote：将远程内存映射到NPU虚拟地址空间 KV缓存读取流程 sequenceDiagram NPU-\u0026gt;\u0026gt;UB_MMU: 发起KV块读取(虚拟地址0xFFFF1000) UB_MMU-\u0026gt;\u0026gt;Global_Addr_Table: 查询物理位置(Node15, DRAM_Offset0x8000) Global_Addr_Table--\u0026gt;\u0026gt;UB_MMU: 返回目标地址 UB_MMU-\u0026gt;\u0026gt;UB_Switch: 发送DMA读请求 UB_Switch-\u0026gt;\u0026gt;Node15_DRAM: 读取数据 Node15_DRAM-\u0026gt;\u0026gt;UB_Switch: 返回数据 UB_Switch-\u0026gt;\u0026gt;NPU: 直写NPU寄存器 性能关键： 全程无CPU参与 数据不经过本地HBM（避免复制） 延迟仅 1.5μs（对比NVIDIA \u0026gt;10μs） 缓存服务架构 graph TD Prefill[Prefill NPU] --\u0026gt;|写入新KV块| Cache[DRAM缓存池] Decode[Decode NPU] --\u0026gt;|读取历史块| Cache Cache_Manager[缓存管理器] --\u0026gt;|元数据维护| Cache 去中心化设计： 无全局调度器 → 各NPU通过UB自主访问 缓存位置对软件透明 与NVIDIA方案的对比 架构差异全景图 维度 NVIDIA方案 华为UB方案 硬件基础 GPU显存隔离 + 分层网络 NPU/CPU内存池 + UB全互联 远程访问 显式复制（PCIe→IB→HBM） 直接内存映射（零拷贝） 地址空间 每GPU独立虚拟地址 全域统一虚拟地址 调度约束 请求需路由到持有KV块的GPU 任意NPU可直接访问任意KV块 典型延迟 \u0026gt;10μs（跨节点） 1.5μs（全域） 峰值带宽 ≤200Gbps（InfiniBand） 392GB/s（单NPU单向） 工程实现关键创新 硬件层：DRAM-NPU带宽均衡 问题：DRAM带宽（256GB/s）\u0026lt; NPU需求（392GB/s） 解决方案： 分布式条带化：将KV块切分存储到多CPU内存 并发访问：NPU同时从8个DRAM节点读取 协议层：轻量级一致性控制 优化点： KV缓存只读居多 → 放宽一致性要求 写操作仅限Prefill NPU → 减少协议开销 软件层：缓存感知的KV布局 1 2 3 4 5 6 7 8 // 按Attention Head分片存储 for (int head=0; head\u0026lt;num_heads; head++) { ub_mem_store(kv_cache, head * head_size, // 按Head偏移 data, UB_CACHE_AWARE // 标记为缓存友好布局 ); } 效果： 单次读取可获取完整Attention Head数据 减少随机访问导致的缓存行浪费 QA辅助理解 UB全局内存的硬件工作原理? 三级硬件协同\n1. NPU内存管理单元（MMU）\n接收虚拟地址请求 查询全局地址表（存储在UB交换机） 2. UB交换机\n维护全局地址→物理位置映射 路由请求到目标设备（DRAM或HBM） 3. DMA引擎\n在目标设备执行直接内存访问 数据通过UB网络直送请求方NPU 软件层如何使用UB全局内存？（开发者视角） 透明化API + 缓存优化\n开发者API示例\n1 2 3 4 5 6 7 8 9 10 // 分配分布式KV缓存 kv_cache_t* kv_buf = ub_mem_alloc_pooled( UBMEM_DRAM_POOL, // 指定DRAM池 1024*1024*1024, // 1GB空间 KV_CACHE_TAG // 标记为KV缓存 ); // NPU直接映射远程内存 void* npu_vaddr = ub_map_remote(kv_buf); // 像本地内存一样使用 attention_compute(npu_vaddr + offset); 缓存感知优化\n按Attention Head分片存储： 1 2 for head_idx in range(num_heads): store_kv_block(kv_cache, head_idx * head_size, data) 单次读取获取完整Head数据，减少随机访问 与NVIDIA方案性能对比？数据差异多大？ 数量级提升\n指标 NVIDIA H800 Huawei UB 提升倍数 远程读延迟 \u0026gt;10 μs 1.5 μs 6.7× 有效带宽利用率 \u0026lt;50% \u0026gt;90% 1.8× KV缓存容量 单节点限制 数十TB ∞ 一致性管理开销 软件实现（高开销） 硬件MESI 10×效率 UB如何处理多NPU并发修改同一缓存？ 硬件加速的MESI协议\n缓存行锁定：64B为粒度，写操作时独占锁定 仲裁策略： 读操作：并行执行（无冲突） 写操作：UB交换机按物理位置优先级仲裁 本地节点优先 → 减少网络传输 冲突案例： NPU A和C同时请求写同一KV块 UB交换机检测冲突，赋予Node_A优先权 NPU A完成写后通知NPU C失效旧副本 注意：KV缓存以只读为主（Decode阶段），写冲突率\u0026lt;0.1%。\n为什么CPU DRAM池比NPU HBM更适合存储KV缓存？ 容量与成本的完美平衡\n介质 优势 劣势 适用场景 NPU HBM 超高速（3.2TB/s） 容量小（32GB/NPU） 热点缓存 CPU DRAM 超大容量（TB级） 较慢（256GB/s） 主KV存储池 智能分层： 活跃KV缓存 → 自动迁移至NPU HBM 历史KV缓存 → 存储在CPU DRAM池 ","permalink":"http://localhost:64667/posts/aiinfra/01-ascend-cloudmatrix/","summary":"\u003cblockquote\u003e\n\u003cp\u003e6.19发布的CloudMatrix384论文拆解，从宏观到基础概念\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"核心指标和计算方式\"\u003e核心指标和计算方式\u003c/h2\u003e\n\u003ch3 id=\"tpot-time-per-output-token\"\u003e\u003cstrong\u003eTPOT (Time Per Output Token)\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e公式\u003c/strong\u003e： $$TPOT= \\frac{Decode总耗时}{生成Token数量}$$\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e测量方式\u003c/strong\u003e： 从第一个输出Token开始计时，到生成结束（含MoE通信/KV读取）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e为什么重要\u003c/strong\u003e： 直接决定用户体验（如Chatbot响应速度），论文要求 \u003cstrong\u003e\u0026lt;50ms\u003c/strong\u003e（严格模式\u0026lt;15ms）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e深层意义\u003c/strong\u003e： 反映\u003cstrong\u003e系统通信+计算综合能力\u003c/strong\u003e，EP320下TPOT=42ms证明UB网络突破MoE通信墙\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"计算效率-tokenss-per-tflops\"\u003e\u003cstrong\u003e计算效率 (Tokens/s per TFLOPS)\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e公式\u003c/strong\u003e： $$计算效率=\\frac {吞吐量(tokens/s)} {NPU峰值算力(TFLOPS)}$$​\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e论文数据\u003c/strong\u003e：\u003c/li\u003e\n\u003c/ul\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e阶段\u003c/th\u003e\n          \u003cth\u003e值\u003c/th\u003e\n          \u003cth\u003e对比基准\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ePrefill\u003c/td\u003e\n          \u003ctd\u003e4.45\u003c/td\u003e\n          \u003ctd\u003e超NVIDIA H100+SGLang(3.8)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eDecode\u003c/td\u003e\n          \u003ctd\u003e1.29\u003c/td\u003e\n          \u003ctd\u003e超NVIDIA H800+DeepSeek(0.9)\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e为什么重要\u003c/strong\u003e： 揭示\u003cstrong\u003e硬件利用率\u003c/strong\u003e，1.0以上表明软硬件协同极致优化\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e深层意义\u003c/strong\u003e： Decode阶段1.29 → 昇腾910的Cube引擎利用率达 \u003cstrong\u003e86%\u003c/strong\u003e（传统GPU仅60%)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"缓存访问延迟-kv-cache-access-latency\"\u003e\u003cstrong\u003e缓存访问延迟 (KV Cache Access Latency)\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e公式\u003c/strong\u003e： $$延迟=TMMU_{查询}+TUB_{传输}+TDRAM_{读取}​$$\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e论文数据\u003c/strong\u003e：\u003c/li\u003e\n\u003c/ul\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e场景\u003c/th\u003e\n          \u003cth\u003e延迟\u003c/th\u003e\n          \u003cth\u003e对比传统\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e本地HBM命中\u003c/td\u003e\n          \u003ctd\u003e0.2μs\u003c/td\u003e\n          \u003ctd\u003e-\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e远程DRAM访问(UB)\u003c/td\u003e\n          \u003ctd\u003e1.5μs\u003c/td\u003e\n          \u003ctd\u003e\u0026gt;10μs (PCIe+IB)\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e为什么重要\u003c/strong\u003e： 长上下文推理中\u003cstrong\u003e70%时间花在KV缓存访问\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e深层意义\u003c/strong\u003e： UB统一内存将远程访问性能提升至\u003cstrong\u003e近本地水平\u003c/strong\u003e，支撑百万Token上下文。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"专家并行扩展性-ep-degree\"\u003e\u003cstrong\u003e专家并行扩展性 (EP Degree)\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e定义\u003c/strong\u003e：单个MoE层可分布的专家数量\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e论文突破\u003c/strong\u003e：\u003cstrong\u003eEP320\u003c/strong\u003e（每个昇腾Die托管1个专家）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e支撑公式\u003c/strong\u003e： $$可扩展性=\\frac {UB总带宽}{单个专家通信需求}$$ $$EPmax=\\frac {384×392GB/s} {8B/token×10^6token/s}=320$$\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e为什么重要\u003c/strong\u003e： EP\u0026gt;100时传统网络崩溃，EP320证明UB突破通信可扩展性极限\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"int8量化收益\"\u003e\u003cstrong\u003eINT8量化收益\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e公式\u003c/strong\u003e：$$ 加速比=\\frac {FP16吞吐}{INT8吞吐}×精度保持率$$\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e论文数据\u003c/strong\u003e：\n\u003cul\u003e\n\u003cli\u003e吞吐提升：\u003cstrong\u003e1.8倍\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e精度损失：\u003cstrong\u003e\u0026lt;0.5%\u003c/strong\u003e（16个基准测试）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e为什么重要\u003c/strong\u003e： Decode阶段\u003cstrong\u003e内存带宽减少50%\u003c/strong\u003e，解决NPU的“内存墙”问题\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"qa辅助理解\"\u003eQA辅助理解\u003c/h3\u003e\n\u003ch4 id=\"为什么用tpot而非qps\"\u003e\u003cstrong\u003e为什么用TPOT而非QPS？\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eTPOT剥离Batch Size影响，\u003cstrong\u003e纯粹衡量单次生成效率\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e更直观反映SLA（用户感知的延迟）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"为什么强调计算效率而非绝对吞吐\"\u003e\u003cstrong\u003e为什么强调计算效率而非绝对吞吐？\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e排除工艺优势（7nm vs 5nm），\u003cstrong\u003e聚焦架构创新价值\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e1.29 tokens/s/TFLOPS → 证明UB+LEP设计优于NVLink+GPU\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"为什么测量远程dram访问延迟\"\u003e\u003cstrong\u003e为什么测量远程DRAM访问延迟？\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e验证\u003cstrong\u003e内存池化\u003c/strong\u003e的实际效果，这是打破“内存墙”的核心\u003c/li\u003e\n\u003cli\u003e1.5μs延迟 → 实现“全集群如单机”的硬件基础\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"超节点架构\"\u003e超节点架构\u003c/h2\u003e\n\u003ch3 id=\"三级网络平面的物理隔离\"\u003e三级网络平面的物理隔离\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e硬件隔离原理\u003c/strong\u003e\u003c/p\u003e","title":"昇腾超节点CloudMatrix384论文拆解"},{"content":" 本文旨在记录对中间件、编排组件容器化部署后，实现kubernetes扩展组件Controller的过程。\nThird-Parties kubernetes-client: javascript\nclient-go\nkube-rs\nclient-go源码分析 目录结构 kubernetes: contains the clientset to access Kubernetes API. discovery: discover APIs supported by a Kubernetes API server. dynamic: contains a dynamic client that can perform generic operations on arbitrary Kubernetes API objects. transport: set up auth and start a connection. tools/cache: useful for writing controllers. informers: informer group listers: lister group 代码实例 1 2 3 4 git clone https://github.com/huweihuang/client-go.git cd client-go #保证本地HOME目录有配置kubernetes集群的配置文件 go run client-go.go client-go.go\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 package main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;path/filepath\u0026#34; \u0026#34;time\u0026#34; metav1 \u0026#34;k8s.io/apimachinery/pkg/apis/meta/v1\u0026#34; \u0026#34;k8s.io/client-go/kubernetes\u0026#34; \u0026#34;k8s.io/client-go/tools/clientcmd\u0026#34; ) func main() { var kubeconfig *string if home := homeDir(); home != \u0026#34;\u0026#34; { kubeconfig = flag.String(\u0026#34;kubeconfig\u0026#34;, filepath.Join(home, \u0026#34;.kube\u0026#34;, \u0026#34;config\u0026#34;), \u0026#34;(optional) absolute path to the kubeconfig file\u0026#34;) } else { kubeconfig = flag.String(\u0026#34;kubeconfig\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;absolute path to the kubeconfig file\u0026#34;) } flag.Parse() // uses the current context in kubeconfig config, err := clientcmd.BuildConfigFromFlags(\u0026#34;\u0026#34;, *kubeconfig) if err != nil { panic(err.Error()) } // creates the clientset clientset, err := kubernetes.NewForConfig(config) if err != nil { panic(err.Error()) } for { pods, err := clientset.CoreV1().Pods(\u0026#34;\u0026#34;).List(metav1.ListOptions{}) if err != nil { panic(err.Error()) } fmt.Printf(\u0026#34;There are %d pods in the cluster\\n\u0026#34;, len(pods.Items)) time.Sleep(10 * time.Second) } } func homeDir() string { if h := os.Getenv(\u0026#34;HOME\u0026#34;); h != \u0026#34;\u0026#34; { return h } return os.Getenv(\u0026#34;USERPROFILE\u0026#34;) // windows } output\n1 2 3 4 5 6 ➜ go run client-go.go There are 9 pods in the cluster There are 7 pods in the cluster There are 7 pods in the cluster There are 7 pods in the cluster There are 7 pods in the cluster kubeconfig 1 kubeconfig = flag.String(\u0026#34;kubeconfig\u0026#34;, filepath.Join(home, \u0026#34;.kube\u0026#34;, \u0026#34;config\u0026#34;), \u0026#34;(optional) absolute path to the kubeconfig file\u0026#34;) 为了获取k8s配置文件kubeconfig的绝对路径，一般路径为$HOME/.kube/config，这个文件主要用来配置本地连接的k8s集群。\nconfig的内容大概如图所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 apiVersion: v1 clusters: - cluster: server: http://\u0026lt;kube-master-ip\u0026gt;:8080 name: k8s contexts: - context: cluster: k8s namespace: default user: \u0026#34;\u0026#34; name: default current-context: default kind: Config preferences: {} users: [] rest.config 通过参数和BuildConfigFromFlags方法获取rest.Config对象\n1 config, err := clientcmd.BuildConfigFromFlags(\u0026#34;\u0026#34;, *kubeconfig) k8s.io/client-go/tools/clientcmd/client_config.go\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // BuildConfigFromFlags is a helper function that builds configs from a master // url or a kubeconfig filepath. These are passed in as command line flags for cluster // components. Warnings should reflect this usage. If neither masterUrl or kubeconfigPath // are passed in we fallback to inClusterConfig. If inClusterConfig fails, we fallback // to the default config. func BuildConfigFromFlags(masterUrl, kubeconfigPath string) (*restclient.Config, error) { if kubeconfigPath == \u0026#34;\u0026#34; \u0026amp;\u0026amp; masterUrl == \u0026#34;\u0026#34; { klog.Warning(\u0026#34;Neither --kubeconfig nor --master was specified. Using the inClusterConfig. This might not work.\u0026#34;) kubeconfig, err := restclient.InClusterConfig() if err == nil { return kubeconfig, nil } klog.Warning(\u0026#34;error creating inClusterConfig, falling back to default config: \u0026#34;, err) } return NewNonInteractiveDeferredLoadingClientConfig( \u0026amp;ClientConfigLoadingRules{ExplicitPath: kubeconfigPath}, \u0026amp;ConfigOverrides{ClusterInfo: clientcmdapi.Cluster{Server: masterUrl}}).ClientConfig() } clientset 通过*rest.Config参数和NewForConfig方法来获取clientset对象，clientset是多个client集合，每个client可能包括不同版本的方法调用\n1 clientset, err := kubernetes.NewForConfig(config) NewForConfig NewForConfig函数就是初始化clientset中的每个client。\nk8s.io/client-go/kubernetes/clientset.go\n1 2 3 4 5 6 7 8 9 10 // NewForConfig creates a new Clientset for the given config. func NewForConfig(c *rest.Config) (*Clientset, error) { configShallowCopy := *c ... var cs Clientset cs.appsV1beta1, err = appsv1beta1.NewForConfig(\u0026amp;configShallowCopy) ... cs.coreV1, err = corev1.NewForConfig(\u0026amp;configShallowCopy) ... } clientset的结构体 k8s.io/client-go/kubernetes/clientset.go\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // Clientset contains the clients for groups. Each group has exactly one // version included in a Clientset. type Clientset struct { *discovery.DiscoveryClient admissionregistrationV1 *admissionregistrationv1.AdmissionregistrationV1Client admissionregistrationV1beta1 *admissionregistrationv1beta1.AdmissionregistrationV1beta1Client internalV1alpha1 *internalv1alpha1.InternalV1alpha1Client appsV1 *appsv1.AppsV1Client appsV1beta1 *appsv1beta1.AppsV1beta1Client appsV1beta2 *appsv1beta2.AppsV1beta2Client authenticationV1 *authenticationv1.AuthenticationV1Client authenticationV1beta1 *authenticationv1beta1.AuthenticationV1beta1Client authorizationV1 *authorizationv1.AuthorizationV1Client authorizationV1beta1 *authorizationv1beta1.AuthorizationV1beta1Client autoscalingV1 *autoscalingv1.AutoscalingV1Client autoscalingV2beta1 *autoscalingv2beta1.AutoscalingV2beta1Client autoscalingV2beta2 *autoscalingv2beta2.AutoscalingV2beta2Client batchV1 *batchv1.BatchV1Client batchV1beta1 *batchv1beta1.BatchV1beta1Client certificatesV1 *certificatesv1.CertificatesV1Client certificatesV1beta1 *certificatesv1beta1.CertificatesV1beta1Client coordinationV1beta1 *coordinationv1beta1.CoordinationV1beta1Client coordinationV1 *coordinationv1.CoordinationV1Client coreV1 *corev1.CoreV1Client discoveryV1 *discoveryv1.DiscoveryV1Client discoveryV1beta1 *discoveryv1beta1.DiscoveryV1beta1Client eventsV1 *eventsv1.EventsV1Client eventsV1beta1 *eventsv1beta1.EventsV1beta1Client extensionsV1beta1 *extensionsv1beta1.ExtensionsV1beta1Client flowcontrolV1alpha1 *flowcontrolv1alpha1.FlowcontrolV1alpha1Client flowcontrolV1beta1 *flowcontrolv1beta1.FlowcontrolV1beta1Client networkingV1 *networkingv1.NetworkingV1Client networkingV1beta1 *networkingv1beta1.NetworkingV1beta1Client nodeV1 *nodev1.NodeV1Client nodeV1alpha1 *nodev1alpha1.NodeV1alpha1Client nodeV1beta1 *nodev1beta1.NodeV1beta1Client policyV1 *policyv1.PolicyV1Client policyV1beta1 *policyv1beta1.PolicyV1beta1Client rbacV1 *rbacv1.RbacV1Client rbacV1beta1 *rbacv1beta1.RbacV1beta1Client rbacV1alpha1 *rbacv1alpha1.RbacV1alpha1Client schedulingV1alpha1 *schedulingv1alpha1.SchedulingV1alpha1Client schedulingV1beta1 *schedulingv1beta1.SchedulingV1beta1Client schedulingV1 *schedulingv1.SchedulingV1Client storageV1beta1 *storagev1beta1.StorageV1beta1Client storageV1 *storagev1.StorageV1Client storageV1alpha1 *storagev1alpha1.StorageV1alpha1Client } clientset.Interface clientset实现了以下的interface，可以通过以下的方法获得具体的client，例如:\n1 pods, err := clientset.CoreV1().Pods(\u0026#34;\u0026#34;).List(metav1.ListOptions{}) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 type Interface interface { Discovery() discovery.DiscoveryInterface AdmissionregistrationV1() admissionregistrationv1.AdmissionregistrationV1Interface AdmissionregistrationV1beta1() admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface InternalV1alpha1() internalv1alpha1.InternalV1alpha1Interface AppsV1() appsv1.AppsV1Interface AppsV1beta1() appsv1beta1.AppsV1beta1Interface AppsV1beta2() appsv1beta2.AppsV1beta2Interface AuthenticationV1() authenticationv1.AuthenticationV1Interface AuthenticationV1beta1() authenticationv1beta1.AuthenticationV1beta1Interface AuthorizationV1() authorizationv1.AuthorizationV1Interface AuthorizationV1beta1() authorizationv1beta1.AuthorizationV1beta1Interface AutoscalingV1() autoscalingv1.AutoscalingV1Interface AutoscalingV2beta1() autoscalingv2beta1.AutoscalingV2beta1Interface AutoscalingV2beta2() autoscalingv2beta2.AutoscalingV2beta2Interface BatchV1() batchv1.BatchV1Interface BatchV1beta1() batchv1beta1.BatchV1beta1Interface CertificatesV1() certificatesv1.CertificatesV1Interface CertificatesV1beta1() certificatesv1beta1.CertificatesV1beta1Interface CoordinationV1beta1() coordinationv1beta1.CoordinationV1beta1Interface CoordinationV1() coordinationv1.CoordinationV1Interface CoreV1() corev1.CoreV1Interface DiscoveryV1() discoveryv1.DiscoveryV1Interface DiscoveryV1beta1() discoveryv1beta1.DiscoveryV1beta1Interface EventsV1() eventsv1.EventsV1Interface EventsV1beta1() eventsv1beta1.EventsV1beta1Interface ExtensionsV1beta1() extensionsv1beta1.ExtensionsV1beta1Interface FlowcontrolV1alpha1() flowcontrolv1alpha1.FlowcontrolV1alpha1Interface FlowcontrolV1beta1() flowcontrolv1beta1.FlowcontrolV1beta1Interface NetworkingV1() networkingv1.NetworkingV1Interface NetworkingV1beta1() networkingv1beta1.NetworkingV1beta1Interface NodeV1() nodev1.NodeV1Interface NodeV1alpha1() nodev1alpha1.NodeV1alpha1Interface NodeV1beta1() nodev1beta1.NodeV1beta1Interface PolicyV1() policyv1.PolicyV1Interface PolicyV1beta1() policyv1beta1.PolicyV1beta1Interface RbacV1() rbacv1.RbacV1Interface RbacV1beta1() rbacv1beta1.RbacV1beta1Interface RbacV1alpha1() rbacv1alpha1.RbacV1alpha1Interface SchedulingV1alpha1() schedulingv1alpha1.SchedulingV1alpha1Interface SchedulingV1beta1() schedulingv1beta1.SchedulingV1beta1Interface SchedulingV1() schedulingv1.SchedulingV1Interface StorageV1beta1() storagev1beta1.StorageV1beta1Interface StorageV1() storagev1.StorageV1Interface StorageV1alpha1() storagev1alpha1.StorageV1alpha1Interface } CoreV1Client 常用的CoreV1Client为例子分析\ncorev1.NewForConfig 1 2 3 4 5 6 7 8 9 10 11 12 // NewForConfig creates a new CoreV1Client for the given config. func NewForConfig(c *rest.Config) (*CoreV1Client, error) { config := *c if err := setConfigDefaults(\u0026amp;config); err != nil { return nil, err } client, err := rest.RESTClientFor(\u0026amp;config) if err != nil { return nil, err } return \u0026amp;CoreV1Client{client}, nil } 通过传入配置信息rest.Config来实例化对象，其本质是调用了rest.RESTClientFor(\u0026amp;Config)方法创建了RESTClient的对象，即CoreV1Client的本质就是一个RESTClient对象。\nCoreV1Client结构体定义 1 2 3 4 // CoreV1Client is used to interact with features provided by the group. type CoreV1Client struct { restClient rest.Interface } CoreV1Client实现了CoreV1Interface接口，从而对k8s的资源对象进行增删改查的操作。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 //CoreV1Client的方法 func (c *CoreV1Client) ComponentStatuses() ComponentStatusInterface {...} //ConfigMaps func (c *CoreV1Client) ConfigMaps(namespace string) ConfigMapInterface {...} //Endpoints func (c *CoreV1Client) Endpoints(namespace string) EndpointsInterface {...} func (c *CoreV1Client) Events(namespace string) EventInterface {...} func (c *CoreV1Client) LimitRanges(namespace string) LimitRangeInterface {...} //Namespaces func (c *CoreV1Client) Namespaces() NamespaceInterface {...} //Nodes func (c *CoreV1Client) Nodes() NodeInterface {...} func (c *CoreV1Client) PersistentVolumes() PersistentVolumeInterface {...} func (c *CoreV1Client) PersistentVolumeClaims(namespace string) PersistentVolumeClaimInterface {...} //Pods func (c *CoreV1Client) Pods(namespace string) PodInterface {...} func (c *CoreV1Client) PodTemplates(namespace string) PodTemplateInterface {...} //ReplicationControllers func (c *CoreV1Client) ReplicationControllers(namespace string) ReplicationControllerInterface {...} func (c *CoreV1Client) ResourceQuotas(namespace string) ResourceQuotaInterface {...} func (c *CoreV1Client) Secrets(namespace string) SecretInterface {...} //Services func (c *CoreV1Client) Services(namespace string) ServiceInterface {...} func (c *CoreV1Client) ServiceAccounts(namespace string) ServiceAccountInterface {...} CoreV1Interface 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 type CoreV1Interface interface { RESTClient() rest.Interface ComponentStatusesGetter ConfigMapsGetter EndpointsGetter EventsGetter LimitRangesGetter NamespacesGetter NodesGetter PersistentVolumesGetter PersistentVolumeClaimsGetter PodsGetter PodTemplatesGetter ReplicationControllersGetter ResourceQuotasGetter SecretsGetter ServicesGetter ServiceAccountsGetter } CoreV1Interface中包含了各种k8s对象的调用接口，例如PodsGetter是对k8s中pod对象增删改查的接口。ServicesGetter是对service对象的操作的接口。\nPodsGetter接口举例探索 可以以PodsGetter接口为例来研究一下CoreV1Client对pod对象的增删改查调用。\n示例中的代码如下：\n1 pods, err := clientset.CoreV1().Pods(\u0026#34;\u0026#34;).List(metav1.ListOptions{}) CoreV1().Pods()\n1 2 3 4 5 6 7 8 9 10 11 12 13 // core_client.go func (c *CoreV1Client) Pods(namespace string) PodInterface { return newPods(c, namespace) } // pod.go // newPods returns a Pods func newPods(c *CoreV1Client, namespace string) *pods { return \u0026amp;pods{ client: c.RESTClient(), ns: namespace, } } CoreV1().Pods()方法实际上调用了newPods()方法，创建了一个pod对象，该对象继承了rest.Interface接口，即最终的实现本质是RESTClient的HTTP调用。\n1 2 3 4 5 // pods implements PodInterface type pods struct { client rest.Interface ns string } pods对象实现了PodInterface接口：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // PodInterface has methods to work with Pod resources. type PodInterface interface { Create(*v1.Pod) (*v1.Pod, error) Update(*v1.Pod) (*v1.Pod, error) UpdateStatus(*v1.Pod) (*v1.Pod, error) Delete(name string, options *metav1.DeleteOptions) error DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error Get(name string, options metav1.GetOptions) (*v1.Pod, error) List(opts metav1.ListOptions) (*v1.PodList, error) Watch(opts metav1.ListOptions) (watch.Interface, error) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Pod, err error) GetEphemeralContainers(podName string, options metav1.GetOptions) (*v1.EphemeralContainers, error) UpdateEphemeralContainers(podName string, ephemeralContainers *v1.EphemeralContainers) (*v1.EphemeralContainers, error) PodExpansion 这个interface定义了pods对象的增删改查等方法。\nPodsGetter 继承了PodInterface的接口:\n1 2 3 4 5 // PodsGetter has a method to return a PodInterface. // A group\u0026#39;s client should implement this interface. type PodsGetter interface { Pods(namespace string) PodInterface } Pods().List()方法通过RESTClient的HTTP调用来实现对k8s的pod资源的获取:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // List takes label and field selectors, and returns the list of Pods that match those selectors. func (c *pods) List(opts metav1.ListOptions) (result *v1.PodList, err error) { var timeout time.Duration if opts.TimeoutSeconds != nil { timeout = time.Duration(*opts.TimeoutSeconds) * time.Second } result = \u0026amp;v1.PodList{} err = c.client.Get(). Namespace(c.ns). Resource(\u0026#34;pods\u0026#34;). VersionedParams(\u0026amp;opts, scheme.ParameterCodec). Timeout(timeout). Do(). Into(result) return } 以上分析了clientset.CoreV1().Pods(\u0026quot;\u0026quot;).List(metav1.ListOptions{})对pod资源获取的过程，最终是调用RESTClient的方法实现。\nRESTClient 待补充\n总结 client-go对K8s资源对象的调用，需要先获取k8s的配置信息，也就是$HOME/.kube/config。\n调用顺序如下：\nkubeconfig -\u0026gt; rest.config -\u0026gt; clientset -\u0026gt; 具体的client(CoreV1Client) -\u0026gt; 具体的资源对象(如pod) -\u0026gt; RESTClient -\u0026gt; http.Client -\u0026gt; HTTP 请求的发送和响应\n常用的client有CoreV1Client、AppsV1betaClient、ExtensionsV1beta1Client等。\nOperator SDK ","permalink":"http://localhost:64667/posts/programming/cloud-computing/k8s-operator-dev/","summary":"\u003cblockquote\u003e\n\u003cp\u003e本文旨在记录对中间件、编排组件容器化部署后，实现kubernetes扩展组件Controller的过程。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"third-parties\"\u003eThird-Parties\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/kubernetes-client/javascript\"\u003ekubernetes-client: javascript\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/kubernetes/client-go\"\u003eclient-go\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/clux/kube-rs\"\u003ekube-rs\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"client-go源码分析\"\u003e\u003ccode\u003eclient-go\u003c/code\u003e源码分析\u003c/h2\u003e\n\u003ch3 id=\"目录结构\"\u003e目录结构\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ekubernetes\u003c/code\u003e: contains the clientset to access Kubernetes API.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ediscovery\u003c/code\u003e: discover APIs supported by a Kubernetes API server.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edynamic\u003c/code\u003e: contains a dynamic client that can perform generic operations on arbitrary Kubernetes API objects.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etransport\u003c/code\u003e: set up auth and start a connection.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etools/cache\u003c/code\u003e: useful for writing controllers.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003einformers\u003c/code\u003e:  informer group\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elisters\u003c/code\u003e:  lister group\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"代码实例\"\u003e代码实例\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit clone https://github.com/huweihuang/client-go.git\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e client-go\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#保证本地HOME目录有配置kubernetes集群的配置文件\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ego run client-go.go\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eclient-go.go\u003c/code\u003e\u003c/p\u003e","title":"Kubernetes Operator Development History"},{"content":"Syllabus course syllabus\n","permalink":"http://localhost:64667/open_courses/cmu-15451/","summary":"\u003ch2 id=\"syllabus\"\u003eSyllabus\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"http://www.cs.cmu.edu/~15451-s21/schedule.html\"\u003ecourse syllabus\u003c/a\u003e\u003c/p\u003e","title":"Algorithms Design and Analysis"},{"content":"Syllabus course syllabus\n","permalink":"http://localhost:64667/open_courses/cmu-15210/","summary":"\u003ch2 id=\"syllabus\"\u003eSyllabus\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://www.cs.cmu.edu/~15210/syllabus.html\"\u003ecourse syllabus\u003c/a\u003e\u003c/p\u003e","title":"Parallel and Sequential Data Structures and Algorithms"},{"content":"注：如果对kubernetes的基本概念不太清楚，建议先过一下基本的资源类型再阅读此文\n先随便给个例子:\n1 2 3 4 5 6 7 8 9 10 apiVersion: v1 kind: ConfigMap metadata: name: test-config data: config.yml: |- start-message: \u0026#39;Hello, World!\u0026#39; log-level: INFO bootstrap.yml: listen-address: \u0026#39;127.0.0.1:8080\u0026#39; 我们定义了一个ConfigMap，data中定义了两个文件config.yml以及bootstrap.yml，当我们要引用当中的配置的时候，kubernetes提供了两种方案：\n使用configMapKeyRef引用configMap中某个文件的内容作为Pod中容器的环境变量。\n把所有configMap中的文件写到一个临时目录，将临时目录作为volume挂载到容器中，也就是configmap类型的volume。\n假设现在我们有一个Deployment，它的pod模板里引用了configMap，现在我们的目标是：当configmap更新的时候，这个Deployment的业务逻辑也能随之更新。那么有哪些方案？\n最好的情况是，当configMap发生变更时，直接进行hot update，做到不影响pod的正常运行。\n如果无法hot update或者这样完成不了需求，就要出发对应的Deployment做一次滚动更新。\n场景一： 针对可以进行热更新的容器，进行配置热更新 如果configMap由volume挂载，比如下述的投射卷，它的内容是可以更新的：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 apiVersion: v1 kind: Pod metadata: name: volume-test spec: containers: - name: container-test image: busybox volumeMounts: - name: all-in-one mountPath: \u0026#34;/projected-volume\u0026#34; readOnly: true volumes: - name: all-in-one projected: sources: - configMap: name: myconfigmap items: - key: config path: my-group/my-config 为了能够比较好得理解，先说明一下configMap的volume挂载机制：\n更新操作由kubelet的Pod Reconcile触发。每次Pod同步的时候（10s default），kubelet都会把Pod的所有configMapvolume标记为RequireRemount，而kubelet中的volume循环控制会发现这些需要重新挂载的volume，去执行一次挂载操作。\n在configMap的重挂载过程中，kubelet会先比较远端的configMap和volume中的configMap是否一致，然后再做更新。需要注意的是，拿到的远端configMap操作可能有cache，不一定是最新版本。\n所以这样的更新方式的确可行，但是会有更新延时，最多的延时时间：\nPod同步间隔(默认10s) + ConfigMap本地的缓存TTL\nkubelet 上 ConfigMap 的获取是否带缓存由配置中的ConfigMapAndSecretChangeDetectionStrategy 决定。\n注意，假如使用了 subPath 将 ConfigMap 中的某个文件单独挂载到其它目录下，那这个文件是无法热更新的（这是 ConfigMap 的挂载逻辑决定的）\n知道了原理，我们就明确一些概念：\n如果应用对configMap的更新有实时性要求，就需要在业务逻辑里自己到ApiServer去watch对应的configMap，或者干脆不用configMap而用etcd这样的一致性kv来存储管理配置。 加入没有实时性要求，那么configMap本身的更新逻辑就可以做到。 不过配置文件更新完了就不代表业务逻辑就更新了，我们还要解决如何通知应用重新读取配置，进行业务逻辑上的更新。例如对于nginx就需要一个SIGHUP信号量，这里再讨论几种做法。\n热更新一： 应用本身监听本地配置文件 这是最直接的方式，可以在应用里写监听的代码。一些配置相关的三方件本身就包装了这样的逻辑，比如viper\n热更新二：使用sidecar监听本地文件的变更 Prometheus的Helm Chart中使用的就是这种方式，找到一个实用的镜像configmap-reload，它就会去watch本地文件的变更，并在发生变更时通过HTTP调用通知应用进行热更新。\n这种方式就有一个问题：sidecar发送信号的限制比较多，而很多开源组件比如Fluentd，nginx都是依赖SIGHUP信号进行热更新的。在kubernetes 1.10之前，并不支持pod中的容器共享同一个pid namespace，所以sidecar也就无法向业务容器发送信号。在1.10以后，虽然支持了pid共享，但是在共享之后pid namespace中的1号进程就会变成基础的/pause进程，我们便无法轻松定位到目标进程了。\n所以，只要k8s版本在1.10以后，并且开启了ShareProcessNamespace特性，多写点代码，比如通过进程名去找到pid，总是有办法的。但是1.10之前是没可能的。\n热更新三：Fat Container 胖容器比较反模式，不过可以解决sidecar的一些限制，把主进程和sidecar进程打进一个镜像里，这样就绕过了pid namespace隔离的问题。但是如果条件允许，还是用上述两个方案，因为复杂是脆弱的根源，容器本身是轻量的。\n场景二： 无法热更新时，滚动更新Pod 无法热更新的场景举例有以下几个：\n应用本身没写热更新逻辑（大部分应用不会写）。 使用subPath进程configMap的挂载，导致configMap无法自动更新。 在环境变量或者init-container中依赖了configMap的内容。 第三点，就是使用configMapKeyRef引用configMap中的信息作为环境变量时，这个操作也只会在pod创建时执行一次，所以是不会自动更新的。\n当无法进行热更新的时候，我们必须滚动去更新Pod了。一个简单的想法就是写个controller去watchconfigMap的变更，有变更就给Deployment资源做滚动更新。但是这样的实现是更复杂的，我们首先需要考虑有没有更简单的方式。\n滚动更新一： 修改CI流程 这个方式很简单，只需要写一个CI脚本，给ConfigMap计算一个hash，然后作为一个环境变量或者annotation加入到Deployment的Pod模板中。\n举个🌰:\n1 2 3 4 5 6 7 ... spec: template: metadata: annotations: com.cctoctofx.configmap/hash: ${CONFIGMAP_HASH} ... 这样，如果configMap变化了，那么Deployment里的Pod模板自然会变化，k8s会自动帮我们做滚动更新。甚至如果configMap不复杂，直接转化为json放到pod模板里都行，而且还方便故障排查的时候快速知道内容是啥。\n滚动更新二：Controller 写个controller检测configMap变更并触发滚动更新，手动写之前还是看一看开源实现：\nReloader ConfigmapController k8s-trigger-controller 滚动更新三：Liveness Probe / Readiness Probe 这个手段需要深入一下，初步想法是用liveness调用一个脚本，脚本判断文件是否变动，如果变动，liveness得到false，重启pod，也可以同时设置readiness。\n滚动更新需要考虑的问题 举个例子，我们用场景二中提到的方式去更新：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deployment spec: replicas: 3 template: annotations: nginx-config-md5: d41d8cd98f00b204e9800998ecf8427e spec: containers: - name: nginx image: nginx volumeMounts: - name: nginx-config mountPath: /etc/config volumes: - name: config-volume configMap: name: nginx-config --- apiVersion: v1 kind: ConfigMap metadata: name: nginx-config data: nginx.conf: |- ## some configurations... 每次部署的时候，计算configMap的MD5,填入pod的template中. 加入configMap发生变化，摘要也会变化，会触发一次Deployment的滚动更新。 这个流程看起来比较美，但思考一下如果我们更新了一个配置，但这个配置是有问题的，如果pod使用了错误的配置会无法工作（比如无法通过readinessProb检查）。最后，滚动更新的流程就会卡住，错误的配置不会把Deployment搞崩掉。\n这个逻辑看着也挺好，但是有个问题却忽视了，如果nginx-config更新成了错误的值，虽然还没有重建的Pod暂时是健康的，但是如果Pod挂掉发生重建，或者其中的容器重新读取了一次配置，那么这些Pod就会陷入异常。所以整个集群的状态是很不稳定的。\n因此问题的本质是：在原地更新configMap或者secret的时候，我们并没有进行滚动发布，而是一次性把新的配置更新到整个集群的所有实例当中。而我们所说的滚动更新就是控制各个实例读取新的配置的时机，可是由于我们无法把控Pod挂掉的时机，我们无法准确进行过程控制。\n解决方案 上述问题的问题在于原地更新，要解决这个问题，只需要在每次ConfigMap变化的时候，重新生成一个ConfigMap，再更新Deployment使用这个新的ConfigMap就行了。而重新生成ConfigMap最简单的方式就是在其命名中加上ConfigMap的data值计算出的摘要，比如：\n1 2 3 4 5 6 7 apiVersion: v1 kind: ConfigMap metadata: name: nginx-config-d41d8cd98f00b204e9800998ecf8427e data: nginx.conf: |- ## some configurations... ConfigMap的Rollout在社区中也是历经很久还没有解决(#22368)，目前为止，解决这个问题的方向也是immutable configmap模式。\n但是这种方案会有几个问题：\n如何做到每次配置文件更新时，都创建一个新的ConfigMap？ 目前社区的态度是把这一步放到Client解决，比如helm和kustomize。 历史configMap不断积累，能怎么回收？ 针对这点，社区希望在服务端实现一个GC机制来清理没有任何资源引用的configMap。 把更新逻辑放在client端虽然会有重复造轮子的问题，但是至少目前为止，configMap的新建和Deployment等对象的更新是最成熟的configMap滚动更新方案。\nKustomize的实践方式 Kustomize对这个方案有内置的支持，只需要使用configGenerator：\n1 2 3 4 configMapGenerator: - name: my-configmap files: - common.properties 这段yaml就能在kustomize中生成一个configMap对象，这个对象的data来自于common.properties文件，而且name中会加上这个文件的SHA值作为后缀。\n在kustomize的其他layer中，只要以my-configmap作为name引用这个configMap即可，当最终渲染的时候，kustomize会自动进行替换操作。\nHelm的实践方式 \u0026hellip;\n附录 facilitate ConfigMap rollouts/management discussion\n","permalink":"http://localhost:64667/posts/programming/cloud-computing/k8s-config-update/","summary":"\u003cp\u003e\u003cem\u003e注：如果对kubernetes的基本概念不太清楚，建议先过一下基本的资源类型再阅读此文\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e先随便给个例子:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ev1\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003ekind\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eConfigMap\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003emetadata\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003etest-config\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003econfig.yml\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e|-\u003c/span\u003e\u003cspan class=\"sd\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sd\"\u003e    start-message: \u0026#39;Hello, World!\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sd\"\u003e    log-level: INFO\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003ebootstrap.yml\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003elisten-address\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;127.0.0.1:8080\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e我们定义了一个\u003ccode\u003eConfigMap\u003c/code\u003e，data中定义了两个文件\u003ccode\u003econfig.yml\u003c/code\u003e以及\u003ccode\u003ebootstrap.yml\u003c/code\u003e，当我们要引用当中的配置的时候，\u003ccode\u003ekubernetes\u003c/code\u003e提供了两种方案：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e使用\u003ccode\u003econfigMapKeyRef\u003c/code\u003e引用\u003ccode\u003econfigMap\u003c/code\u003e中某个文件的内容作为Pod中容器的环境变量。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e把所有\u003ccode\u003econfigMap\u003c/code\u003e中的文件写到一个临时目录，将临时目录作为volume挂载到容器中，也就是\u003ccode\u003econfigmap\u003c/code\u003e类型的\u003ccode\u003evolume\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e假设现在我们有一个\u003ccode\u003eDeployment\u003c/code\u003e，它的pod模板里引用了\u003ccode\u003econfigMap\u003c/code\u003e，现在我们的目标是：\u003cstrong\u003e当\u003ccode\u003econfigmap\u003c/code\u003e更新的时候，这个\u003ccode\u003eDeployment\u003c/code\u003e的业务逻辑也能随之更新\u003c/strong\u003e。那么有哪些方案？\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e最好的情况是，当\u003ccode\u003econfigMap\u003c/code\u003e发生变更时，直接进行hot update，做到不影响pod的正常运行。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e如果无法hot update或者这样完成不了需求，就要出发对应的\u003ccode\u003eDeployment\u003c/code\u003e做一次滚动更新。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"场景一-针对可以进行热更新的容器进行配置热更新\"\u003e场景一： 针对可以进行热更新的容器，进行配置热更新\u003c/h2\u003e\n\u003cp\u003e如果\u003ccode\u003econfigMap\u003c/code\u003e由volume挂载，比如下述的投射卷，它的内容是可以更新的：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ev1\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003ekind\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ePod\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003emetadata\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003evolume-test\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003espec\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003econtainers\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003econtainer-test\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003eimage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ebusybox\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003evolumeMounts\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eall-in-one\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003emountPath\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/projected-volume\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003ereadOnly\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003evolumes\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eall-in-one\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003eprojected\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003esources\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- \u003cspan class=\"nt\"\u003econfigMap\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e          \u003c/span\u003e\u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003emyconfigmap\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e          \u003c/span\u003e\u003cspan class=\"nt\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e- \u003cspan class=\"nt\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003econfig\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e              \u003c/span\u003e\u003cspan class=\"nt\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003emy-group/my-config\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e为了能够比较好得理解，先说明一下\u003ccode\u003econfigMap\u003c/code\u003e的volume挂载机制：\u003c/p\u003e","title":"Kubernetes ConfigMap 热更新"},{"content":"资源模板 statefulset举例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: kubia spec: serviceName: kubia replicas: 2 template: metadata: labels: app: kubia spec: containers: - name: kubia image: derios/kubia ports: - name: http containerPort: 8080 volumeMounts: - name: data mountPath: /var/data volumeClaimTemplates: - metadata: name: data spec: resources: requests: storage: 1Mi accessModes: - ReadWriteOnce headless service举例 1 2 3 4 5 6 7 8 9 10 11 apiVersion: v1 kind: Service metadata: name: kubia spec: clusterIP: None selector: app: kubia ports: - name: http port: 80 storage class local PV 1 2 3 4 5 6 kind: StorageClass apiVersion: storage.k8s.io/v1 metadata: name: local-storage provisioner: kubernetes.io/no-provisioner volumeBindingMode: WaitForFirstConsumer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 apiVersion: apps/v1 kind: StatefulSet metadata: name: local-test spec: serviceName: \u0026#34;local-service\u0026#34; replicas: 3 selector: matchLabels: app: local-test template: metadata: labels: app: local-test spec: containers: - name: test-container image: k8s.gcr.io/busybox command: - \u0026#34;/bin/sh\u0026#34; args: - \u0026#34;-c\u0026#34; - \u0026#34;sleep 100000\u0026#34; volumeMounts: - name: local-vol mountPath: /usr/test-pod volumeClaimTemplates: - metadata: name: local-vol spec: accessModes: [ \u0026#34;ReadWriteOnce\u0026#34; ] storageClassName: \u0026#34;local-storage\u0026#34; resources: requests: storage: 368Gi Key Point 使用Local PV的实际场景 使用本地磁盘作为缓存的系统 CI/CD中用于存储构建中的系统 一些允许丢失和不需要保证可靠的数据(session, token) Local PV与HostPath的对比 hostpath:\n绑定在pod的生命周期上,pod结束,pv则被删除. 可以通过pvc引用,也可以直接使用pv 使用node的磁盘,不经过网络,开销非常小 本地持久卷:\n生命周期和node绑定,Kubernetes调度程序始终确保使用本地永久卷的Pod安排到同一节点 无法通过storageclass动态创建. 使用node磁盘,不经过网络,开销非常小. The biggest difference is that the Kubernetes scheduler understands which node a Local Persistent Volume belongs to. With HostPath volumes, a pod referencing a HostPath volume may be moved by the scheduler to a different node resulting in data loss. But with Local Persistent Volumes, the Kubernetes scheduler ensures that a pod using a Local Persistent Volume is always scheduled to the same node. 使用Local PV的几个注意的问题 本地持久卷依然会丢失数据,例如node本身出了问题. 本地持久卷需要提供volumeBindingMode:WaitForFirstConsumer支持 不支持动态卷配置,实际上需要一个外部的controller来控制,包括创建pv和销毁pv并清理磁盘 使用Local PV例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 apiVersion: v1 kind: PersistentVolume metadata: name: example-pv spec: capacity: storage: 2Gi volumeMode: Filesystem accessModes:\t- ReadWriteMany persistentVolumeReclaimPolicy: Delete storageClassName: local-storage local: path: /home/tangxu/localpv # 比普通的pv就多了这个亲和性调度, 也是必须加的 nodeAffinity: required: nodeSelectorTerms: - matchExpressions: - key: kubernetes.io/hostname operator: In values: - tangxu-pc --- kind: Service apiVersion: v1 metadata: name: local-pv-service spec: selector: app: local-test clusterIP: None ports: - port: 8090 targetPort: 80 protocol: tcp --- apiVersion: apps/v1 kind: StatefulSet metadata: name: local-test spec: serviceName: \u0026#34;local-pv-service\u0026#34; replicas: 3 selector: matchLabels: app: local-test template: metadata: labels: app: local-test spec: containers: - name: test-container image: nginx:latest ports: - containerPort: 80 protocol: tcp name: http volumeMounts: - name: local-vol mountPath: /usr/test-pod volumeClaimTemplates: - metadata: name: local-vol spec: accessModes: - \u0026#34;ReadWriteMany\u0026#34; storageClassName: \u0026#34;local-storage\u0026#34; resources: requests: storage: 1Gi 1 2 3 $ kubectl create ns test namespace/test created $ kubectl apply -f localPV.yaml Local PV的清理 在使用了local pv之后,清理就不再是简单的使用命令删除了,因为kubernetes不会为我们管理local pv的创建和删除工作(并且删除是阻塞的,主要依靠finalizer机制)\n1 2 3 4 5 6 #先删除使用pv的资源 $ kubectl delete -f localPV.yaml persistentvolume \u0026#34;example-pv\u0026#34; deleted service \u0026#34;local-pv-service\u0026#34; deleted statefulset.apps \u0026#34;local-test\u0026#34; deleted #此处应该阻塞... 再起一个终端:\n1 $ kubectl patch pv example-pv -p \u0026#39;{\u0026#34;metadata\u0026#34;:{\u0026#34;finalizers\u0026#34;: []}}\u0026#39; --type=merge k8s服务的概念 相同命名空间的可以用service名称作为主机名访问，可以查看/etc/resolve.conf\n业务的数据库连接，如何规划暴露的服务，db-proxy是否需要刷新endpoints？\n需要为pod添加就绪探针，让客户端只与正常的pod交互，而不管后端是否有pod出现问题，这样在就绪探针出问题了，Endpoints资源会去掉这个pod。\n1 2 3 4 5 6 7 8 9 10 ... spec: containers: - name: kubia image: luksa/kubia readinessProbe: exec: command: - ls - /var/ready 应该通过删除pod或者更改pod标签而不是手动更改探针来从服务中手动移除pod\n如果想要从某个服务中手动添加或者删除pod的时候，把enabled=true作为标签添加到pod，以及服务的标签选择器中。当想要从服务中移除pod中，删除标签即可。 数据库详细配置 安装数据库时，数据库之间的路由配置从哪里来？\n业务访问数据库时的网络管道\u0026hellip;\n数据库启停，pod的增删，以及前端服务显示形式。CRD中要定义描述数据库停止的状态信息，此时数据库存储和网络标识还在。\n数据库agent检测的状态，如何同步给CR？\nOperator主从状态确认行为\nunreachableTimeout \u0026mdash; pollingInterval\n主备HA，是否由controller控制？\noracle times ten database是放在operator进行HA操作 数据库软件包的下载时机和形式？\n以挂卷方式将进程在容器内启动的可行性？\ndatabase metadata的定义形式？\n由投射卷管理所有配置\nadmin信息，密码信息\nuser信息，密码信息\nTLS配置\n数据库的端口问题？\n数据库集群部署state:\n主从\n- Initializing - Normal - ActiveDown - StandbyDown - StandbyPartiallyDown - StanbyPartiallyStarting - BothDown - Failed 单机\n- Intializing - Normal - ActiveDown - Failed 数据库修改\n以修改连接数为例（方案一：采用configmap保存实例的连接配置信息、db信息等） 修改configmap中的字段 operator删除stanby pod，并重新创建，该创建的standby pod采用新的configmap字段创建 standby pod正常后，删除active pod进行自动倒换，operator再原地创建新的stanby pod，感知configmap中连接数字段创建。 资源声明 operator 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 # operator deployment apiVersion: apps/v1 kind: Deployment metadata: name: zenith-operator spec: replicas: 1 selector: matchLabels: name: zenith-operator template: metadata: labels: name: zenith-operator spec: serviceAccountName: zenith-operator # imagePullSecrets: # - name: zenith-image-pulling-secret packageVesion: v1.0.0 softwarePackage: zenith-operator packageType: tar containers: - name: zenith-operator # image: .... command: - zenith-operator imagePullPolicy: Never env: - name: WATCH_NAMESPACE valueFrom: fieldRef: fieldPath: metadata.namespace - name: POD_NAME valueFrom: fieldRef: fieldPath: metadata.name - name: OPERATOR_NAME value: \u0026#34;zenith-operator\u0026#34; configmap /secrets DB Object 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 apiVersion: huawei.cloudb.com/v1 kind: zenithCluster metadata: annotations: {} labels: {} name: ${zenith_cluster_name} namespace: ${cluster_namespace} spec: zenithSpec: replicas: 2 # master-slave version: v1.0.0 # eg.: Zenith-1.0.0.tar packageName: Zenith # --- | packageType: tar # --- | storageClassName: local # PV storageSize: 5G # PV replicationSSLMandatory: false pollingInterval: 10 unreachableTimeout: 30 instanceConfigMap: - zenith-instance-config dbConfigMap: - zenith-db-config dbSecrets: - zenith-db-secret dbSpecs: ... agentSpec: version: v1.0.0 packageName: DBAgent packageType: tar agentConfig: - db-agent-sample-config template: affinity: ... spec: selectors: matchLables: ... initContainers: - name: notify-download-package image: k8s.gcr.io/busybox commands: - sh - \u0026#34;-c\u0026#34; - | /bin/bash \u0026lt;\u0026lt; \u0026#39;EOF\u0026#39; This is used for notify nodeagent to download zenith software package EOF containers: - name: zenith-ha resources: requests: memory: \u0026#34;2048Mi\u0026#34; cpu: \u0026#34;1000m\u0026#34; limits: memory: \u0026#34;4096Mi\u0026#34; cpu: \u0026#34;2000m\u0026#34; ports: - name: listen-port containerPort: 32080 - name: replication-port containerPort: 12345 volumeMounts: - name: zenith-certs mountPath: /etc/certificate readOnly: true - name: watch-uds mountPath: /etc/uds/watch-server-uds readOnly: false - name: zenith-server-uds mountPath: /etc/uds/zenith-server-uds readOnly: false - name: agent-config mountPath: /etc/DBAgent/dbagent.conf readOnly: true env: - name: POD_NAME valueFrom: ... ... volumes: - name: volumeClaimTemplates: # PVC ... 用投射卷聚合配置信息 proposal\nConstraints and Assumptions 1. The volume types must remain unchanged for backward compatibility 2. There will be a new volume type for this proposed functionality, but no other API changes 3. The new volume type should support atomic updates in the event of an input change Use Cases 1. As a user, I want to automatically populate a single volume with the keys from multiple secrets, configmaps, and with downward API information, so that I can synthesize a single directory with various sources of information 2. As a user, I want to populate a single volume with the keys from multiple secrets, configmaps, and with downward API information, explicitly specifying paths for each item, so that I can have full control over the contents of that volume 以前的情况 要使用secrets, configmaps, downward APIs都要在volumeMounts里面声明不同的mount paths:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 apiVersion: v1 kind: Pod metadata: name: volume-test spec: containers: - name: container-test image: busybox volumeMounts: - name: mysecret mountPath: \u0026#34;/secrets\u0026#34; readOnly: true - name: podInfo mountPath: \u0026#34;/podinfo\u0026#34; readOnly: true - name: config-volume mountPath: \u0026#34;/config\u0026#34; readOnly: true volumes: - name: mysecret secret: secretName: jpeeler-db-secret items: - key: username path: my-group/my-username - name: podInfo downwardAPI: items: - path: \u0026#34;labels\u0026#34; fieldRef: fieldPath: metadata.labels - path: \u0026#34;annotations\u0026#34; fieldRef: fieldPath: metadata.annotations - name: config-volume configMap: name: special-config items: - key: special.how path: path/to/special-key 投射卷的情况 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 apiVersion: v1 kind: Pod metadata: name: volume-test spec: containers: - name: container-test image: busybox volumeMounts: - name: all-in-one mountPath: \u0026#34;/projected-volume\u0026#34; readOnly: true volumes: - name: all-in-one projected: sources: - secret: name: mysecret items: - key: user path: my-group/my-username - downwardAPI: items: - path: \u0026#34;labels\u0026#34; fieldRef: fieldPath: metadata.labels - path: \u0026#34;cpu_limit\u0026#34; resourceFieldRef: containerName: container-test resource: limits.cpu - configMap: name: myconfigmap items: - key: config path: my-group/my-config 简单部署TiDB Operator以及集群 crd安装 kubectl apply -f https://raw.githubusercontent.com/pingcap/tidb-operator/v1.1.12/manifests/crd.yaml\n安装operator helm repo add pingcap https://charts.pingcap.org/ kubectl create namespace tidb-admin helm install --namespace tidb-admin tidb-operator pingcap/tidb-operator --version v1.1.12 kubectl get pods --namespace tidb-admin -l app.kubernetes.io/instance=tidb-operator 部署TiDB集群和监控 kubectl create namespace tidb-cluster \u0026amp;\u0026amp; \\ kubectl -n tidb-cluster apply -f https://raw.githubusercontent.com/pingcap/tidb-operator/master/examples/basic/tidb-cluster.yaml kubectl -n tidb-cluster apply -f https://raw.githubusercontent.com/pingcap/tidb-operator/master/examples/basic/tidb-monitor.yaml ","permalink":"http://localhost:64667/posts/programming/cloud-computing/k8s-template/","summary":"\u003ch2 id=\"资源模板\"\u003e资源模板\u003c/h2\u003e\n\u003ch3 id=\"statefulset举例\"\u003e\u003ccode\u003estatefulset\u003c/code\u003e举例\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eapps/v1beta1\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003ekind\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eStatefulSet\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003emetadata\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ekubia\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003espec\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eserviceName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ekubia\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003ereplicas\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003etemplate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003emetadata\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003elabels\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003eapp\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ekubia\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003espec\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003econtainers\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ekubia\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003eimage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ederios/kubia\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003eports\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ehttp\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e          \u003c/span\u003e\u003cspan class=\"nt\"\u003econtainerPort\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"m\"\u003e8080\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003evolumeMounts\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003edata\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e          \u003c/span\u003e\u003cspan class=\"nt\"\u003emountPath\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003e/var/data\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"nt\"\u003evolumeClaimTemplates\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e- \u003cspan class=\"nt\"\u003emetadata\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e       \u003c/span\u003e\u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003edata\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"nt\"\u003espec\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e       \u003c/span\u003e\u003cspan class=\"nt\"\u003eresources\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e         \u003c/span\u003e\u003cspan class=\"nt\"\u003erequests\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e           \u003c/span\u003e\u003cspan class=\"nt\"\u003estorage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003e1Mi\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e       \u003c/span\u003e\u003cspan class=\"nt\"\u003eaccessModes\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e       \u003c/span\u003e- \u003cspan class=\"l\"\u003eReadWriteOnce\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e       \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"headless-service举例\"\u003e\u003ccode\u003eheadless service\u003c/code\u003e举例\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ev1\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003ekind\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eService\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003emetadata\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ekubia\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003espec\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eclusterIP\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eNone\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eselector\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003eapp\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ekubia\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eports\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ehttp\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003eport\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"m\"\u003e80\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"storage-class-local-pv\"\u003e\u003ccode\u003estorage class\u003c/code\u003e local PV\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003ekind\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eStorageClass\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003estorage.k8s.io/v1\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003emetadata\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003elocal-storage\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003eprovisioner\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ekubernetes.io/no-provisioner\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003evolumeBindingMode\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eWaitForFirstConsumer\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eapps/v1\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003ekind\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eStatefulSet\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003emetadata\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003elocal-test\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003espec\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eserviceName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;local-service\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003ereplicas\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eselector\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003ematchLabels\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003eapp\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003elocal-test\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003etemplate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003emetadata\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003elabels\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003eapp\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003elocal-test\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003espec\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003econtainers\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003etest-container\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003eimage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ek8s.gcr.io/busybox\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003ecommand\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e- \u003cspan class=\"s2\"\u003e\u0026#34;/bin/sh\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e- \u003cspan class=\"s2\"\u003e\u0026#34;-c\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e- \u003cspan class=\"s2\"\u003e\u0026#34;sleep 100000\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003evolumeMounts\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003elocal-vol\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e          \u003c/span\u003e\u003cspan class=\"nt\"\u003emountPath\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003e/usr/test-pod\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003evolumeClaimTemplates\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e- \u003cspan class=\"nt\"\u003emetadata\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003elocal-vol\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003espec\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003eaccessModes\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;ReadWriteOnce\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003estorageClassName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;local-storage\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003eresources\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003erequests\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e          \u003c/span\u003e\u003cspan class=\"nt\"\u003estorage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003e368Gi\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"key-point\"\u003eKey Point\u003c/h2\u003e\n\u003ch3 id=\"使用local-pv的实际场景\"\u003e使用Local PV的实际场景\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e使用本地磁盘作为缓存的系统\u003c/li\u003e\n\u003cli\u003eCI/CD中用于存储构建中的系统\u003c/li\u003e\n\u003cli\u003e一些允许丢失和不需要保证可靠的数据(session, token)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"local-pv与hostpath的对比\"\u003eLocal PV与HostPath的对比\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003ehostpath\u003c/code\u003e:\u003c/p\u003e","title":"Kubernetes Developement"},{"content":"内容涵盖 使用节点污点和pod容忍度阻止pod调度到特定节点 将节点亲缘性规则作为节点选择器的一种替代 使用节点亲缘性进行多个pod的共同调度 使用节点非亲缘性来分离多个pod 高级调度 在pod介绍的文章中可以看到，k8s可以通过在pod spec里面指定节点选择器，而这篇文章介绍的是后面其他逐渐加入的机制。\n使用污点和容忍度阻止节点调度到特定节点 新特性： 节点污点、pod对于污点的容忍度\n这些特性用于限制哪些pod可以被调度到某一个节点，也就是说只有当一个pod容忍某个节点的污点，这个pod才能被调度到该节点。\n节点选择器和节点亲缘性规则，是明确在pod中添加的信息，来觉得一个pod可以或者不可以被调度到某个节点。而污点不一样，是在不修改已有pod信息的前提下，通过在节点上新增污点信息，来拒绝pod在这个节点的部署。\n简单介绍污点和容忍度 我在自己的机器用minikube创建了k8s单点集群，用kubectl describe node minikube可以看到:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 k describe node minikube Name: minikube Roles: master Labels: beta.kubernetes.io/arch=amd64 beta.kubernetes.io/os=linux deploy=test kubernetes.io/arch=amd64 kubernetes.io/hostname=minikube kubernetes.io/os=linux minikube.k8s.io/commit=b09ee50ec047410326a85435f4d99026f9c4f5c4 minikube.k8s.io/name=minikube minikube.k8s.io/updated_at=2021_03_30T20_15_58_0700 minikube.k8s.io/version=v1.14.0 node-role.kubernetes.io/master= Annotations: kubeadm.alpha.kubernetes.io/cri-socket: /var/run/dockershim.sock node.alpha.kubernetes.io/ttl: 0 volumes.kubernetes.io/controller-managed-attach-detach: true CreationTimestamp: Tue, 30 Mar 2021 20:15:55 +0800 Taints: \u0026lt;none\u0026gt; # -----\u0026gt; 主节点暂时没有污点 Unschedulable: false Lease: HolderIdentity: minikube AcquireTime: \u0026lt;unset\u0026gt; RenewTime: Fri, 09 Apr 2021 14:48:12 +0800 可以看到Taints属性，表示目前这个主节点没有污点。不过这里可以举个例子：\nTaints: node-role.kubernetes.io/master:NoSchedule 污点包含了一个key, value以及一个effect\u0026ndash;\u0026gt; \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt;:\u0026lt;effect\u0026gt;。上面这个例子里，key是node-role.kubernetes.io/master，空的value，effect是NoSchedule。\n这个污点能阻止pod调度到这个节点上，除非有pod能够容忍这个污点，而通过容忍这个污点的pod都是系统级别的pod。\nToleration: node-role.kubernetes.io/master:NoSchedule 如果pod包含容忍度能匹配节点的污点，那么就可能被调度到这个节点上。\n显示pod的污点容忍度 1 2 3 4 5 6 huangyuxiao@CctoctoFX /usr/local/var/log $ k describe po nginx-r4hdr Name: nginx-r4hdr ... # 省略中间其他属性 Tolerations: node.kubernetes.io/not-ready:NoExecute op=Exists for 300s node.kubernetes.io/unreachable:NoExecute op=Exists for 300s ... 可以看到，我describe了一个在集群中的pod。\n污点的效果 在上述的例子中，可以看到对于这个nginx的pod，其定义了当节点状态是not-ready或者unreachable的时候，这个pod允许运行在这个节点300秒。这两个容忍度使用的是NoExecute而不是NoSchedule。\n每个污点可以关联一个效果，包含如下三种:\nNoSchedule：如果pod没有容忍这些污点，pod则不能被调度到包含这些污点的节点上 PreferNoSchedule： 一个比较loose的NoSchedule，表示尽量阻止调度到这里。但是如果实在没其他地方能调度了，还是可以调度到这边的。 NoExecute：这个和上述两者不同，前两种只是影响调度。而NoExecute也会影响在节点上运行着的pod。如果在某个节点上添加了NoExecute，如果节点上运行着的pod没有容忍这个污点，就会被从这个节点删除。 在节点上添加Custom污点 一个很简单的诉求：一个k8s集群上面同时有生产环境和非生产环境的流量。最重要的一点是，非生产环境的pod不能运行在生产环境的节点上，就可以在生产环境的节点上添加污点来满足要求:\n1 $ kubectl taint node node.k8s node-type=production:NoSchedule 这里新增了一个污点，key是node-type，value是production，效果是NoSchedule。所以这个时候你再去部署常规的pod，是不会部署到添加了这些污点的节点上去的。\n往pod新增污点容忍度 还是上面的诉求，现在为了把生产环境的pod部署到生产环境节点上，pod需要容忍刚才我们添加的污点，那么我们修改下pod的资源yaml：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 apiVersion: extensions/v1beta1 kind: Deployment metadata: name: pod spec: replicas: 5 template: spec: ... tolerations: - key: node-type operator: Equal value: production effect: NoSchedule 新增tolerations描述即可 官方文档\n如果又不想把这个pod调度到非生产环境，则需要类似在非生产环境打上污点\n污点和容忍度的使用场景 污点可以只有一个key和一个effect，而不必有value。容忍度可以通过设置Equal operator来指定匹配的value（default）。或者可以设置Exists operator来匹配污点的key。\n调度的时候使用污点和容忍度 就如从最开始介绍的这样，用NoSchedule或者定义非优先调度节点PreferNoSchedule，或者把已有的pod从当前节点删除。\n比如可以把一个集群分为几个部分，部分节点可能提供了特殊影响比如GPU，TPU之类的，而且只有部分pod需要使用到这些硬件的时候，也可以通过污点和容忍度实现。\n节点unreachable之后pod重新调度的等待时长设置 和前面的例子一样:\n1 2 3 4 5 6 huangyuxiao@CctoctoFX /usr/local/var/log $ k describe po nginx-r4hdr Name: nginx-r4hdr ... # 省略中间其他属性 Tolerations: node.kubernetes.io/not-ready:NoExecute op=Exists for 300s node.kubernetes.io/unreachable:NoExecute op=Exists for 300s ... 1 2 3 4 5 6 7 8 9 tolerations: - effect: NoExecute key: node.kubernetes.io/not-ready operator: Exists tolerationSeconds: 300 - effect: NoExecute key: node.kubernetes.io/unreachable operator: Exists tolerationSeconds: 300 当k8s的controller检测到有节点处于not-ready或者unreachable状态的时候，会等待300秒，如果状态持续，才把pod调度到其他节点上。这两个容忍度是你没有配的时候自动加给pod的，如果觉得300太长了也可以显式得去改变。\n使用节点亲缘性将pod调度到特定节点 节点亲缘性(node affinity)：允许pod尽量调度到某些节点子集。\n早期的k8s中，初始的节点亲缘性机制就是pod描述中的nodeSelector字段。节点必须包含所有pod对应字段中的指定label，才能成为调度的目标节点。\n节点选择器很简单，但是不能满足所有需求，所以更强大的亲缘性机制才会被引入。\n和节点选择器类似，每个pod可以定义自己的节点亲缘性规则，这些规则可以允许你指定硬件限制或者偏好。当你指定一种偏好后，k8s会把pod尽量调度到这些节点上面，如果没法实现，则调度到其他节点。\n如果使用谷歌的k8s引擎(GKE)，可以kubectl describe node xxxx查到节点Labels，这里面包含了默认的和亲缘性有关的标签。\n指定强制性节点亲缘性规则 在介绍Pod的文章中，我们利用节点选择器将那些需要GPU的pod只被调度到有GPU的节点上:\n1 2 3 4 5 6 7 8 apiVesion: v1 kind: Pod metadata: name: kubia-gpu spec: nodeSelector: gpu: \u0026#34;true\u0026#34; ... 这样这个pod会被调度到包含gpu=true标签的节点。如果我们用节点亲缘性规则去替换：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 apiVesion: v1 kind: Pod metadata: name: kubia-gpu spec: affinity: nodeAffinity: requiredDuringSchedulingIgnoreDuringExecption: nodeSelectorTerms: - matchExpressions: - key: gpu operator: In values: - \u0026#34;true\u0026#34; 这种写法貌似比上面的复杂了很多，但是表达能力更强了。\n较长的节点亲缘性属性名的意义 上面的写法里，spec里有affinity，affinity里有nodeAffinity，下面还有个非常长的名字，我们拆解一下：\nrequiredDuringScheduling...：说明该字段下定义的规则，为了让pod能调度到该节点上，明确指出了这个节点必须含有的标签。\n...IgnoreDuringException: 表明该字段下定义的规则，不会影响已经在节点上运行的pod。\n所以这个含义就是：当前的亲缘性规则只会影响正在被调度的pod, 而不会导致正在运行的pod被删除。所以一般来说目前的规则都是以IgnoredDuringException作为结尾。\n注：RequiredDuringException就表示如果去掉某节点上的标签，那么含有这些标签的pod会被删除，这个特性目前的k8s应该还没有。\n了解节点选择器的条件 1 2 3 4 5 6 nodeSelectorTerms: - matchExpressions: - key: gpu operator: In values: - \u0026#34;true\u0026#34; 现在这几个字段应该比较好了解。也就是表示这个pod只会被调度到gpu=true的节点上。\n更有趣的是，节点亲缘性可以在调度的时候指定节点的优先级。\n调度pod时的节点优先级 preferredDuringSchedulingIgnoredDuringException 来实现优先考虑哪些节点。\n思考一个场景：你有一个跨越多个国家的多个数据中心，每个数据中心代表了一个单独的可用性区域。在每个区域中，你有一些特定的机器，只提供给你自己或者合作的公司使用。现在你想部署一些pod，希望吧pod优先部署在区域zone1，并且是为你公司部署预留的机器上。如果你的机器没有足够的空间给这些pod使用，或者处于其他的一些原因不希望这些pod被调度到这些机器上，那么就要调度到其他区域的其他机器上面，这种情况你也是可以接受的。那么节点亲缘性就可以实现这样的功能。\n给节点加标签 每个节点需要包含两个标签:\n表示所在的这个节点所归属的可用性区域 表示这是一个独占的节点还是共享的节点 1 2 3 4 $ kubectl label node node1.k8s availability-zone=zone1 $ kubectl label node node1.k8s share-type=dedicated $ kubectl label node node2.k8s availability-zone=zone2 $ kubectl label node node2.k8s share-type=shared 指定优先级节点亲缘性规则 把节点的标签打好以后，创建一个Deployment，其中优先选择zone1中的的dedicated节点，下面是描述:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 apiVesion: extension/v1beta1 kind: Deployment metadata: name: pref spec: template: ... spec: affinity: nodeAffinity: preferredDuringSchedualingIgnoredDuringException: - weight: 80 preference: matchExpressions: - key: availability-zone operator: In values: - zone1 - wight: 20 preference: matchExpressions: - key: share-type operator: In values: - dedicated 可见，节点优先调度到zone1，这是最重要的偏好; 同时优先调度pod到独占(dedicated)节点，但是这个优先级是zone优先级的1/4。\n节点优先级是如何工作的 核心是把节点根据标签分组，然后排序。\n比如把包含availability-zone以及share-type标签，并且匹配pod亲缘性的节点(zone1, dedicated)排在前面。然后，根据pod设置的亲缘性规则的权重，接下来是zone1和shared节点，然后是其他区域的dedicated节点，优先级最低的是其他的节点。\n使用pod亲缘性和非亲缘性对pod进行协同部署 上面我们了解了pod和节点间的亲缘性规则能够影响pod能够调度到哪个节点。我们再来研究研究如何制定pod自身之间的亲缘性。\n想象一下：如果你有一个前端的pod和一个后端pod，把这些节点部署得比较靠近，可以降低延时，提高应用的性能。可以使用节点亲缘性规则来确保这两个pod被调度到同一个节点、同一个rack、同一个数据中心。但是这样后续又要指定调度到确切的位置，明显是违背k8s设计哲学的。所以更好的做法应该是定义pod之间的亲缘性规则，让k8s去把pod部署在它觉得合适的地方，同时确保2个pod是靠近的。\n使用pod间亲缘关系将多个pod部署在同一个节点 \u0026hellip;\n","permalink":"http://localhost:64667/posts/programming/cloud-computing/k8s-advance-schedule/","summary":"\u003ch2 id=\"内容涵盖\"\u003e内容涵盖\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e使用节点污点和pod容忍度阻止pod调度到特定节点\u003c/li\u003e\n\u003cli\u003e将节点亲缘性规则作为节点选择器的一种替代\u003c/li\u003e\n\u003cli\u003e使用节点亲缘性进行多个pod的共同调度\u003c/li\u003e\n\u003cli\u003e使用节点非亲缘性来分离多个pod\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"高级调度\"\u003e高级调度\u003c/h2\u003e\n\u003cp\u003e在pod介绍的文章中可以看到，k8s可以通过在pod spec里面指定节点选择器，而这篇文章介绍的是后面其他逐渐加入的机制。\u003c/p\u003e\n\u003ch3 id=\"使用污点和容忍度阻止节点调度到特定节点\"\u003e使用污点和容忍度阻止节点调度到特定节点\u003c/h3\u003e\n\u003cp\u003e新特性： \u003ccode\u003e节点污点\u003c/code\u003e、\u003ccode\u003epod对于污点的容忍度\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e这些特性用于限制哪些pod可以被调度到某一个节点，也就是说只有当一个pod容忍某个节点的污点，这个pod才能被调度到该节点。\u003c/p\u003e\n\u003cp\u003e节点选择器和节点亲缘性规则，是\u003ccode\u003e明确\u003c/code\u003e在pod中添加的信息，来觉得一个pod可以或者不可以被调度到某个节点。而污点不一样，是在不修改已有pod信息的前提下，通过在节点上新增污点信息，来拒绝pod在这个节点的部署。\u003c/p\u003e\n\u003ch4 id=\"简单介绍污点和容忍度\"\u003e简单介绍污点和容忍度\u003c/h4\u003e\n\u003cp\u003e我在自己的机器用minikube创建了k8s单点集群，用\u003ccode\u003ekubectl describe node minikube\u003c/code\u003e可以看到:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ek describe node minikube\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eName:               minikube\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eRoles:              master\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eLabels:             beta.kubernetes.io/arch\u003cspan class=\"o\"\u003e=\u003c/span\u003eamd64\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    beta.kubernetes.io/os\u003cspan class=\"o\"\u003e=\u003c/span\u003elinux\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"nv\"\u003edeploy\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    kubernetes.io/arch\u003cspan class=\"o\"\u003e=\u003c/span\u003eamd64\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    kubernetes.io/hostname\u003cspan class=\"o\"\u003e=\u003c/span\u003eminikube\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    kubernetes.io/os\u003cspan class=\"o\"\u003e=\u003c/span\u003elinux\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    minikube.k8s.io/commit\u003cspan class=\"o\"\u003e=\u003c/span\u003eb09ee50ec047410326a85435f4d99026f9c4f5c4\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    minikube.k8s.io/name\u003cspan class=\"o\"\u003e=\u003c/span\u003eminikube\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    minikube.k8s.io/updated_at\u003cspan class=\"o\"\u003e=\u003c/span\u003e2021_03_30T20_15_58_0700\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    minikube.k8s.io/version\u003cspan class=\"o\"\u003e=\u003c/span\u003ev1.14.0\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    node-role.kubernetes.io/master\u003cspan class=\"o\"\u003e=\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eAnnotations:        kubeadm.alpha.kubernetes.io/cri-socket: /var/run/dockershim.sock\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    node.alpha.kubernetes.io/ttl: \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    volumes.kubernetes.io/controller-managed-attach-detach: \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eCreationTimestamp:  Tue, \u003cspan class=\"m\"\u003e30\u003c/span\u003e Mar \u003cspan class=\"m\"\u003e2021\u003c/span\u003e 20:15:55 +0800\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eTaints:             \u0026lt;none\u0026gt;                  \u003cspan class=\"c1\"\u003e# -----\u0026gt; 主节点暂时没有污点\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUnschedulable:      \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eLease:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  HolderIdentity:  minikube\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  AcquireTime:     \u0026lt;unset\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  RenewTime:       Fri, \u003cspan class=\"m\"\u003e09\u003c/span\u003e Apr \u003cspan class=\"m\"\u003e2021\u003c/span\u003e 14:48:12 +0800\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e可以看到\u003ccode\u003eTaints\u003c/code\u003e属性，表示目前这个主节点没有污点。不过这里可以举个例子：\u003c/p\u003e","title":"Kubernetes Handbook (Schedule)"},{"content":"参考 Julia Evans: Profiling Go programs with pprof\nHow I investigated memory leaks in Go using pprof on a large codebase\nMemory Profiling a Go Service\nRuss Cox: Profling Go Programs\nPackage pprof overview\ngithub: pprof\nIssue: Why \u0026lsquo;Total MB\u0026rsquo; in golang heap profile is less than \u0026lsquo;RES\u0026rsquo; in top?\nIssue: Cannot free memory once occupied by bytes.Buffer\nIssue: FreeOSMemory() in production\nIssue: Is this an idiomatic worker thread pool in Go?\n","permalink":"http://localhost:64667/posts/programming/golang/go-profiling/","summary":"\u003ch2 id=\"参考\"\u003e参考\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://jvns.ca/blog/2017/09/24/profiling-go-with-pprof/\"\u003eJulia Evans: Profiling Go programs with pprof\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.freecodecamp.org/news/how-i-investigated-memory-leaks-in-go-using-pprof-on-a-large-codebase-4bec4325e192/\"\u003eHow I investigated memory leaks in Go using pprof on a large codebase\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://medium.com/compass-true-north/memory-profiling-a-go-service-cd62b90619f9\"\u003eMemory Profiling a Go Service\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://blog.golang.org/pprof\"\u003eRuss Cox: Profling Go Programs\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://golang.org/pkg/net/http/pprof/\"\u003ePackage pprof overview\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/google/pprof\"\u003egithub: pprof\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://stackoverflow.com/questions/16516189/why-total-mb-in-golang-heap-profile-is-less-than-res-in-top\"\u003eIssue: Why \u0026lsquo;Total MB\u0026rsquo; in golang heap profile is less than \u0026lsquo;RES\u0026rsquo; in top?\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://stackoverflow.com/questions/37382600/cannot-free-memory-once-occupied-by-bytes-buffer\"\u003eIssue: Cannot free memory once occupied by bytes.Buffer\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://stackoverflow.com/questions/42345060/freeosmemory-in-production\"\u003eIssue: FreeOSMemory() in production\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://stackoverflow.com/questions/38170852/is-this-an-idiomatic-worker-thread-pool-in-go\"\u003eIssue: Is this an idiomatic worker thread pool in Go?\u003c/a\u003e\u003c/p\u003e","title":"Profiling a Go Service in Production"},{"content":"AUFS是一种Union File System，所谓的UnionFS实际上就是把不同物理位置的目录合并mount到同一个目录当中。一种典型的UnionFS的应用，就是把一张CD/DVD和一个硬盘目录联合mount在一起，然后你就可以对这个只读的CD/DVD上的文件进行修改。\nAUFS又叫做Another UnionFS，后面改成Alternative UnionFS，然后又变成Advance UnionFS\u0026hellip;..当然名字的改变叫啥不重要，本质还是没变的。2006年Junjiro Okajima开发了AUFS，完全重写了早期的UnionFS 1.X，主要目的是为了可靠性和性能，再引入一些新的功能，例如可写分支的负载均衡。不过很有意思的是，AUFS的性能比UnionFS 1.X好很多，后面UnionFS 2.x就抄AUFS的功能，而AUFS本身却没有合入到Linux主线，因为代码量太大质量也不好。虽然后面Junjiro不断提升代码质量，不断提交但是还是被Linus拒绝了。所以哪怕是今天AUFS也没进到Linux里，虽然质量已经可以了。\n不过一些发行版比如：Ubuntu 10.04，Debian6.0都支持AUFS，所以也还好。我在Ubuntu 14.04演示一下例子。\n首先，我们建立两个水果和蔬菜的目录，在这个目录上放一些文件，水果里有苹果和番茄，蔬菜有胡萝卜和番茄:\n1 2 3 4 5 6 7 8 $ tree . ├── fruits │ ├── apple │ └── tomato └── vegetables ├── carrots └── tomato 然后输入:\n1 2 3 4 5 6 7 8 9 10 11 12 # 创建一个mount目录 $ mkdir mnt # 把水果目录和蔬菜目录union mount到 ./mnt目录中 $ sudo mount -t aufs -o dirs=./fruits:./vegetables none ./mnt # 查看./mnt目录 $ tree ./mnt ./mnt ├── apple ├── carrots └── tomato 可以看到mnt目录下有三个文件，水果和蔬菜的目录被合并起来了。如果我们修改一下文件内容:\n1 2 3 4 5 $ echo mnt \u0026gt; ./mnt/apple $ cat ./mnt/apple mnt $ cat ./fruits/apple mnt 可以发现如果修改了/mnt/apple下的内容，/fruits/apple下的内容也会被修改。\n1 2 3 4 5 $ echo mnt_carrots \u0026gt; ./mnt/carrots $ cat ./vegetables/carrots $ cat ./fruits/carrots mnt_carrots 但是这里又变得奇怪，我们修改了/mnt/carrots的内容，按照道理说应该是/vegetables/carrots被修改，但发现并不是，反而在/fruits下面出现了carrots的文件，并且我们的修改出现在这里面。换句话说，我们在mount aufs的时候没有指定vegetable和fruits的目录权限，默认来说命令行第一个的目录是rw的，后面的都是ro。如果我们在mount aufs的时候指定一下权限，就会有不一样的效果（先把刚才的/fruits/carrots删了）：\n1 2 3 4 5 6 7 8 9 $ sudo mount -t aufs -o dirs=./fruits=rw:./vegetables=rw none ./mnt $ echo \u0026#34;mnt_carrots\u0026#34; \u0026gt; ./mnt/carrots $ cat ./vegetables/carrots mnt_carrots $ cat ./fruits/carrots cat: ./fruits/carrots: No such file or directory 现在我们再看看修改:\n1 2 3 4 5 6 7 $ echo \u0026#34;mnt_tomato\u0026#34; \u0026gt; ./mnt/tomato $ cat ./fruits/tomato mnt_tomato $ cat ./vegetables/tomato I am a vegetable 看上去就对味了。\n我们可以思考一下一些使用场景，例如我们可以把一个目录，例如我们自己的source code，作为只读的模板，和另一个working directory给union起来，那么我们就可以随便魔改不用害怕把源代码改坏。有点像ad hoc snapshot。\nDocker分层镜像对UnionFS的使用 Docker就把UnionFS的技术借鉴到了容器中。在Linux Namespace中我们讨论了mount namespace和chroot去fake了一个镜像。而UnionFS的技术可以用来制作分层镜像。\n下面是Docker官方文档Layer，展示了Docker用UnionFS搭建制作的分层镜像：\ndocker的分层镜像不单单可以使用aufs，还支持例如btrfs, devicemapper和vfs。可以使用-s或者-storage-driver=选项来指定相关的镜像存储。Ubuntu14.04的环境里docker默认用的是aufs，而Centos7下用的是devicemapper，这个会有另一个post来讨论。\n可以在下面的路径查看每个层的镜像:\n/var/lib/docker/aufs/diff/\u0026lt;id\u0026gt; docker执行起来以后，docker run -it ubuntu /bin/bash，可以从/sys/fs/aufs/si_[id]目录查看aufs的mount情况，比如:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #ls /sys/fs/aufs/si_b71b209f85ff8e75/ br0 br2 br4 br6 brid1 brid3 brid5 xi_path br1 br3 br5 brid0 brid2 brid4 brid6 # cat /sys/fs/aufs/si_b71b209f85ff8e75/* /var/lib/docker/aufs/diff/87315f1367e5703f599168d1e17528a0500bd2e2df7d2fe2aaf9595f3697dbd7=rw /var/lib/docker/aufs/diff/87315f1367e5703f599168d1e17528a0500bd2e2df7d2fe2aaf9595f3697dbd7-init=ro+wh /var/lib/docker/aufs/diff/d0955f21bf24f5bfffd32d2d0bb669d0564701c271bc3dfc64cfc5adfdec2d07=ro+wh /var/lib/docker/aufs/diff/9fec74352904baf5ab5237caa39a84b0af5c593dc7cc08839e2ba65193024507=ro+wh /var/lib/docker/aufs/diff/a1a958a248181c9aa6413848cd67646e5afb9797f1a3da5995c7a636f050f537=ro+wh /var/lib/docker/aufs/diff/f3c84ac3a0533f691c9fea4cc2ceaaf43baec22bf8d6a479e069f6d814be9b86=ro+wh /var/lib/docker/aufs/diff/511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158=ro+wh 64 65 66 67 68 69 70 /run/shm/aufs.xino 可以看到，只有最顶层的是有rw权限，其他都是ro+wh权限只读。\ndocker的aufs配置，可以在/var/lib/docker/repositories-aufs这个文件中看到。\nAUFS特性 AUFS包含了所有UnionFS的特性，把多个目录合并成一个目录，对每个需要合并的目录指定权限，可以实时得去添加、删除或者修改已经被mount的目录。甚至，还可以在多个可写的branch/dir之间做负载均衡。\n以上是AUFS的mount特性，我们再来看一下被union的目录的相关权限:\nrw表示可读可写\nro表示只读，如果在使用的时候不指定，那么除了第一个以外，其他都是ro。也就是时候，ro的branch不会接收到写的操作，也不会收到查找whiteout的操作。\nrr表示real-read-only，这个和ro还是有区别的。rr指的是天生就是只读的分支，能够让AUFS提供性能，例如可以不用设置inotify来检查文件变动通知。\nwhiteout属性一般来说ro分支都会有，上面的snippet中也展示了ro+wh，而它的意思就是，如果在union中删除某个文件，实际上是处于一个readonly的分支目录上。在mount的union这个目录你会看不到这个文件，但是readonly这个层上我们无法做任何的修改，因此我们就必须对readonly目录里的文件做whiteout。AUFS的whiteout实现是通过在上层的可写目录下建立对应whiteout隐藏文件夹实现的。\n举个🌰：\n还是最开始的例子，我们有以下的结构:\n1 2 3 4 5 6 7 8 9 # tree . ├── fruits │ ├── apple │ └── tomato ├── test └── vegetables ├── carrots └── tomato 我们按照下面的指令进行mount和权限分配:\n1 2 3 4 5 6 $ mkdir mnt $ mount -t aufs -o dirs=./test=rw:./fruits=ro:./vegetables=ro none ./mnt $ ls ./mnt/ apple carrots tomato 我们在权限为rw的test目录下新建一个whiteout的隐藏文件.wh.apple，可以发现./mnt/apple这个目录之间消失了:\n1 2 3 4 $ touch ./test/.wh.apple $ ls ./mnt carrots tomato 也就是说这个操作和rm ./mnt/apple是一样的。\n术语 Branch – 就是各个要被union起来的目录（就是我在上面使用的dirs的命令行参数）\nBranch根据被union的顺序形成一个stack，一般来说最上面的是可写的，下面的都是只读的。 Branch的stack可以在被mount后进行修改，比如：修改顺序，加入新的branch，或是删除其中的branch，或是直接修改branch的权限 Whiteout 和 Opaque\n如果UnionFS中的某个目录被删除了，那么就应该不可见了，就算是在底层的branch中还有这个目录，那也应该不可见了。\nWhiteout就是某个上层目录覆盖了下层的相同名字的目录。用于隐藏低层分支的文件，也用于阻止readdir进入低层分支。\nOpaque的意思就是不允许任何下层的某个目录显示出来。\n在隐藏低层档的情况下，whiteout的名字是’.wh.’。\n在阻止readdir的情况下，名字是’.wh..wh..opq’或者 ’.wh.__dir_opaque’。\n问题 要有文件在原来的地方被修改了会怎么样，mount的目录会一起改变吗？\n会也可能不会。因为你可以指定一个叫udba的参数（全称：User’s Direct Branch Access），这个参数有三个取值：\nudba=none – 设置上这个参数后，AUFS会运转的更快，因为那些不在mount目录里发生的修改，aufs不会同步过来了，所以会有数据出错的问题。 udba=reval – 设置上这个参数后，AUFS会去查文件有没有被更新，如果有的话，就会把修改拉到mount目录内。 udba=notify – 这个参数会让AUFS为所有的branch注册inotify，这样可以让AUFS在更新文件修改的性能更高一些。 如果有多个rw的branch（目录）被union起来了，那么，当我创建文件的时候，aufs会创建在哪里呢？\nAUFS提供了一个叫create的参数可以供你来配置相当的创建策略，下面有几个例子：\ncreate=rr | round−robin 轮询。下面的示例可以看到，新创建的文件轮流写到三个目录中：\n1 2 3 4 5 6 7 8 9 10 derios$ sudo mount -t aufs -o dirs=./1=rw:./2=rw:./3=rw -o create=rr none ./mnt derios$ touch ./mnt/a ./mnt/b ./mnt/c derios$ tree . ├── 1 │ └── a ├── 2 │ └── c └── 3 └── b create=mfs[:second] | most−free−space[:second] 选一个可用空间最好的分支。可以指定一个检查可用磁盘空间的时间。\ncreate=mfsrr:low[:second] 选一个空间大于low的branch，如果空间小于low了，那么aufs会使用 round-robin 方式。\n一些AUFS的细节参数，建议还是man aufs查看。\nAUFS的性能 AUFS把所有的分支mount起来，所以在查找文件上是慢一些。因为它要遍历所有的分支，O(N)复杂度的算法。因此分支越多，查找文件的性能也就越慢。但是一旦AUFS找到了这个文件的inode，那之后的读写和操作源文件基本是一样的。\n所以如果程序跑在AUFS下，那么open和stat操作会有明显的性能下降，分支越多性能就越差。但在write/read操作上性能没有什么变化。\n这里有一份IBM做的Docker性能报告《An Updated Performance Comparison of Virtual Machinesand Linux Containers》。\n资料 Introduce UnionFS\nUnion file systems: Implementations, part I\nUnion file systems: Implementations, part 2\nAnother union filesystem approach\nUnioning file systems: Architecture, features, and design choices\n","permalink":"http://localhost:64667/posts/programming/cloud-computing/docker-aufs/","summary":"\u003cp\u003eAUFS是一种Union File System，所谓的UnionFS实际上就是把不同物理位置的目录合并mount到同一个目录当中。一种典型的UnionFS的应用，就是把一张CD/DVD和一个硬盘目录联合mount在一起，然后你就可以对这个只读的CD/DVD上的文件进行修改。\u003c/p\u003e\n\u003cp\u003eAUFS又叫做Another UnionFS，后面改成Alternative UnionFS，然后又变成Advance UnionFS\u0026hellip;..当然名字的改变叫啥不重要，本质还是没变的。2006年Junjiro Okajima开发了AUFS，完全重写了早期的UnionFS 1.X，主要目的是为了可靠性和性能，再引入一些新的功能，例如可写分支的负载均衡。不过很有意思的是，AUFS的性能比UnionFS 1.X好很多，后面UnionFS 2.x就抄AUFS的功能，而AUFS本身却没有合入到Linux主线，因为代码量太大质量也不好。虽然后面Junjiro不断提升代码质量，不断提交但是还是被Linus拒绝了。所以哪怕是今天AUFS也没进到Linux里，虽然质量已经可以了。\u003c/p\u003e\n\u003cp\u003e不过一些发行版比如：Ubuntu 10.04，Debian6.0都支持AUFS，所以也还好。我在Ubuntu 14.04演示一下例子。\u003c/p\u003e\n\u003cp\u003e首先，我们建立两个水果和蔬菜的目录，在这个目录上放一些文件，水果里有苹果和番茄，蔬菜有胡萝卜和番茄:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ tree\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e├── fruits\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e│   ├── apple\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e│   └── tomato\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e└── vegetables\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    ├── carrots\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    └── tomato\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e然后输入:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 创建一个mount目录\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ mkdir mnt\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 把水果目录和蔬菜目录union mount到 ./mnt目录中\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ sudo mount -t aufs -o \u003cspan class=\"nv\"\u003edirs\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e./fruits:./vegetables none ./mnt\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#  查看./mnt目录\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ tree ./mnt\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./mnt\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e├── apple\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e├── carrots\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e└── tomato\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e可以看到\u003ccode\u003emnt\u003c/code\u003e目录下有三个文件，水果和蔬菜的目录被合并起来了。如果我们修改一下文件内容:\u003c/p\u003e","title":"Docker Fundamentals: AUFS"},{"content":"这篇文章摘自陈皓（左耳朵耗子）的blog（2020/08/07上传），其中很多观点击中了我内心的想法，或许可以在我遇到方向性问题的时候给我提醒。\n这篇文章的主要内容主要是我今年3月份在腾讯做的直播，主要是想让一些技术人员对世界有一个大体的认识，并且在这个认识下能够有一个好的方法成就自己。而不是在一脸蒙圈的状态下随波逐流，而日益迷茫和焦虑。直播完后，腾讯方面把我的直播形成文字的形式发了出来，我觉得我可以再做一个精编版。所以，有了这篇文章，希望对大家有帮助。\n对我来说，在我二十多年的工作经历来看，期间经历了很多技术的更新换代，整个技术模式、业务模式也是一直变来变去，我们这群老程序员成长中所经历的技术比今天的程序员玩的还更杂更多。我罗列一下我学过的，而且还被淘汰掉的技术，大家先感受一下。\n- MIS应用开发：FoxPro，PowerBuilder，Delphi - OA：Lotus Notes，VBScripts - 微软：ODBC/ADO，COM/DCOM，MFC/ATL，J++ - 服务器：AIX，HP-UX，SCO Unix - Web：CGI，ISAPI，SOAP - RPC：CICS，Tuxedo - J2EE：Websphere，Weblogic - DB：Sybase，Informix 我想说的是，无论过去还是今天，我们这些前浪和你们后浪所面对的技术的挑战和对技术的焦虑感是相似的，我们那个时候不但玩996，还玩封闭开发（就是一周只能回家一天）。当然，唯一好的东西，就是比起今天的程序员来说，我们那个年代没有像微信、微博、知乎，抖音这些巨大消耗你人生的东西，所以，我们的工作、生活和成长都有很效率，不会被打断、喜欢看书、Google还没有被封……当然，那时代没有StackOverlow和Github这样的东西，所以，能完成的东西或质量都一般。\n当然，这里并不是想做一个比较，只是想让大家了解一下两代程序员间的一些问题各有千秋，大同小异。在整个成长过程中，其实有很多东西是相通的，其本上来说，就是下面的三件事——\n第一，如果想要把控技术，应对这个世界的一些变化，需要大致知道这个世界的一些规律和发展趋势，另外还得认识自己，自己到底适合做什么？在这个趋势和规律下属于自己的发挥领域到底是什么？这是我们每个人都需要了解的。\n第二，打牢基础，以不变应万变，不管世界怎样变化，我都能很快适应它。基础的重要程度对于你能够飞多高是相当有影响的，懂原理的人比不懂原理的人能做出来的事情或是能解决的问题完全是两个层级的。\n第三，提升成长的效率，因为现在社会的节奏实在太快了，比二十年前快得太多，技术层出不穷，所以我们的成长也要更有效率。效率并不单指的快，效率是怎么样更有效，是有用功除以总功（参看《加班与效率》），怎么学到更有效的东西，或者怎么更有效学习，是我们需要掌握的另一关键。\n下面是我这多年来的一些认识，希望对你有帮助。\n世界发展趋势 我个人经历的信息化革命应该分成三个阶段：\n1990年代到2000年，这个时代MB时代，是雅虎、新浪、搜狐、网易门户网站的时代，这个时代就是ISP/ICP互联网提供商，把一些资讯数字化，然后发布到网络上。 2000年到2010年，这个时代叫GB时代，或是叫多媒体或UGC时代，上网开始变得普遍了，每个人手里的数码设备开始变得多了起来，可以上传照片，可以上传视频，甚至可以在网上做社交。 2010年到2020年，这个时代叫TB时代，这过去的十年是移动互联网时代，移动互联网只需要手机在线，不需要依靠电脑。因为手机随时在线，所以个人的各种各样的数据始终在被收集，只要用户上网就会产生数据，所以人的行为最终也被数字化了。 所有的硬件和软件都是跟着需要处理的数据而演进的，我们需要更大的带宽，更大的硬盘，更多的处理器……大到一定时候就只能进入分布式化的技术架构了，再大，数据中心也顶不住了，就会要引入更为分布式的边缘计算了。\n另一方面，从业务上来看，我们可以看到整个世界就在不断地进行数字化，因为，只要数字化了，就可以进行复制传播和计算，只要可以进行计算了，就可以进行数学建模，就可以自动化，只要可以自动化了就可以规模化，只要可能规模化了，就可以改变整个行业。人类的近代史的大趋势基本上都是在解决能源和自动化的事，源源不断的能源是让机器不知疲倦的前提条件，用机器代替牲口，代替人类进行工作是规模化的前提条件。\n所以，技术的演进规律基本是自动化加规模化，从而降低成本，提升效率。这就是为什么世界变得越来越快，人类都快跟不上节奏的原因，主要是整个社会不断被机器、数据所驱动。\n人才需求 在这个过程中，需要什么样的人？下面是我的一些认识——\n技工，在机器和自动化面前，肯定是需要能够操作机器的技术工人了，这类人是有技术的劳动力。在编程的圈子里俗称“码农”，他们并不是真正的工程师，他们只是电脑程序的操作员，所以，随着技术门槛的下降或是技术形式的变更他可能就会变得越来越不值钱，直到被淘汰掉。 特种工，这种人是必须了解原理和解决难题的一类人，他们是解决比较难的、特定的一些技术问题。当一种技术被淘汰，他并不容易被淘汰，因为他懂原理，原理就是解决问题的能力，是解决问题的套路和方法。 工程师，不但是使用技术，还可以把活儿做好，他们认为代码更多的时间是在维护，这些人使用各种各样的手段和各种技术，精益求精地持续不断地提高代码的易读性、扩展性、可维护性和重用性，这个过程似乎永无止境。对于这些有“洁癖”，有“工匠精神”，有“修养”的技术人员，我们称他们为工程师。这种人做事又稳又快，而且可以做出很多称手的工具和方法论。 再往上是设计师和架构人员，这些人主要是开发一些工具，框架，模式，提升软件开发和维护效率，同时也提升用户体验，和提升稳定性、性能、代码重用等，总的来说就是为了降本增效。这类人的工作降低了技术得到门槛，他们把技术门槛降低了以后，就可以把这个技术普及开来，就可以由广大劳工、技工、特殊工人使用了。 还有一类人是经理，经理主要是组织团队、完成项目、创造利润。这类人中，即有身先士卒的leader，也有高高在上的boss，但无论怎么样，这些人只不过是为了让一个公司或是一个团队更好组织在一起的“粘合剂”，这类人只有在大公司中才会变成更有价值。 这就是我总结的世界需要哪些人才，我们了解这些东西以后大概就明白我们现在所处的位置有什么样的问题，我们应该去什么样的地方。\nGoogle 评分卡 接下来，我们再来看看Google的SRE的自我评分卡：\n0 – 对于相关的技术领域还不熟悉 1 – 可以读懂这个领域的基础知识 2 – 可以实现一些小的改动，清楚基本的原理，并能够在简单的指导下自己找到更多的细节。 3 – 基本精通这个技术领域，完全不需要别人的帮助 4 – 对这个技术领域非常的熟悉和舒适，可以应对和完成所有的日常工作。 对于软件领域 – 有能力开发中等规模的程序，能够熟练和掌握并使用所有的语言特性，而不是需要翻书，并且能够找到所有的冷知识。 对于系统领域 – 掌握网络和系统管理的很多基础知识，并能够掌握一些内核知识以运维一个小型的网络系统，包括恢复、调试和能解决一些不常见的故障。 5 – 对于该技术领域有非常底层的了解和深入的技能。 6 – 能够从零开发大规模的程序和系统，掌握底层和内在原理，能够设计和部署大规模的分布式系统架构 7 – 理解并能利用高级技术，以及相关的内在原理，并可以从根本上自动化大量的系统管理和运维工作。 8 – 对于一些边角和晦涩的技术、协议和系统工作原理有很深入的理解和经验。能够设计，部署并负责非常关键以及规模很大的基础设施，并能够构建相应的自动化设施 9 – 能够在该技术领域出一本经典的书。并和标准委员会的人一起工作制定相关的技术标准和方法。 10 – 在该领域写过一本书，被业内尊为专家，并是该技术的发明人。 SRE需要自评如下这些技术或技能。\n– TCP/IP Networking (OSI stack, DNS etc) – Unix/Linux internals – Unix/Linux Systems administration – Algorithms and Data Structures – C/C++ – Python – Java – Perl – Go – Shell Scripting (sh, Bash, ksh, csh) – SQL and/or Database Admin – Scripting language of your choice (not already mentioned) _____________ – People Management – Project Management 这个评分卡是面试Google前需要候选人对自己的各种技术进行自评，也算是一种技术人员的等级的度量尺，其把技术的能分成11个等级，我用颜色把其它成四大层级，希望这个评份卡能够给你一个能力提升的参考标准。\n认识自己 认识了世界是怎么发展的，也知道技术人员的种类和层级，那么还要了解一下自己，因为如果不了解自己，那么你也无法找到自己的路和适合自己的地方。\n我觉得，一个人要认识自己就需要认识自己的特长、兴趣、热情、擅长等，下面是一个认识自己的标准方法：\n特长。首先你要找得到自己特长。你要认识自己的特长，找到自己的天赋，找到你在DNA里比别人强的东西，就拿你的DNA跟别人竞争就好了。所以你要找到自己可以干成的事，找到别人找你请教的事，你身边人找你请教就是说明你有特长。这是找到自己特长非常非常重要，扬长避短。 兴趣。如果你没有找到自己特长，就找自己有兴趣有热情的东西。什么叫兴趣？兴趣是再难再累都不会放弃的事。如果你遇到困难就会放弃不叫兴趣，那叫叶公好龙。不怕困难，痴迷其中，就算你没有特长，有了这种特质，你也是头部的人才。 方法。如果你没有特长，没有兴趣和热情就要学方法。这种方法就是要有时间观念，要会做计划，要懂统筹、规划对于做过的事情，犯过的错误多总结，举一反三，喜欢自己找答案，自己探究因果关系，这是一些方法，自己总结一些套路。 **勤奋。**如果你没有特长，没有兴趣，也没有方法，你还能做的事就是勤奋，勤奋注定会让你成为一个比较劳累的人，也是很有可能被淘汰的人随着你的年纪越来越大，你的勤奋也会越来越不值钱。因为年轻人会比你更勤奋，比你更勤奋、比你斗志更强，比你能力更强，比你要钱更少的人会出现。勤奋最不值钱，但是只要你勤奋至少能够自食其力。 以上就是为了应对未来技术变化，作为个人必须要从特长、兴趣、方法一层一层筛选挖掘，如果没有这些你就要努力和勤奋。就只能接受“福报”了。\n从我个人而言，我不算是特别聪明的人，但自认为对技术还是比较感兴趣的，难的我不怕。有很多比较难啃的技术，聪明点的人啃一个月就懂了，我不行，我可能啃半年。但是没有关系，知识都是死的，只要不怕困难总有一天会懂的。最可怕是畏难，为自己找借口，这样就不太好了。\n打好基础 最前面提到我学的各式各样的被淘汰的技术，会让你感觉很迷茫，或是迷失。但前面也提到了“谷歌评分卡”，在这个评分卡中，我们看到了许多基础原理方面的内容，其实要应对未来的变化，很重要的一点就是无招胜有招，以不变应万变。\n变化都是表面的东西，内在的东西其实并没有太多的变化。理论层面上变得不多，反而形式上的东西今天一个花样，明天一个花样，所以如果要去应对这种变化，就一定要打牢自己的基础，提升内功修养。比如像编程的一些方式和套路，修饰模式原理本质，解耦，提升代码的重用度等。提升代码重用度必须解耦，要跟现实解耦，提升抽象，这些都是一些技术基础。无论用什么语言，都是这么做的。\n打牢基础就可以突破瓶颈，不打牢基础没有办法突破瓶颈。在技术世界不要觉得量变会造成质变，这是不可能的。技术这个东西就像搞建筑砌砖头，砌砖头砌的再多也不可能让你能成为一个架构师的，因为你不懂原理，不懂科学方法，你就不可能成长上去的，就像学数学一样，当你掌握了微积分这种大杀器后，你解题的能力是无所披靡，而微积分这种方式绝对不是你能“量变”出来的。\n所以你必须学习基础的理论知识，如果不学这些基础理论知识，还要学习解题思路和方法，如果你只学在表面，那么当这个技术的形式有变化，就会发现以前学的都没用了，要重头学一遍。掌握技术基础可以让自己找到答案和知识，基础是抽象和归纳，很容易形成进一步的推论。我们学的很多技术实现都逃不脱基础原理，不管是Java，还是其他语言，只要用TCP用的都是相同的原理，逃不出范围，只要抓住原理，举一反三，时间一长了，甚至还可以自己推导答案。对于技术的基础，我会把其它成四类：\n程序语言：语言的原理，类库的实现，编程技术（并发、异步等），编程范式，设计模式…… 系统原理：计算机系统，操作系统，网络协议，数据库原理…… 中间件：消息队列，缓存系统，网关代理，调度系统 …… 理论知识：算法和数据结构，数据库范式，网络七层模型，分布式系统…… 这些知识其实就是一个计算机科学专业的学生他所要学习的原理，但可惜的是，我们的一些学校教得也很糟糕，不但老师能力不足，而且放着世界上最优秀的教课书不用了，一定要自己写一本。讲也讲不全，还有各种错误，哎……总之，如果你学习用用到的教材不行，那么可以肯定的是你的学习效率一定是很糟糕的。这就是为什么我们大学上完了，还是跟个傻瓜一样，还要在工作中再重新自学。\n不过，就算自学，这些基础技术大概需要四五年的时间堆叠。我工作二十年了，这二十年来基本还是这些原理没变，无论形式怎么变，但是核心永远还是这些，理论创新很难，这是以不变应万变。\n学习效率 谈到学习效率，就需要拿出这张学习金字塔的图来了。从图可以看到学习方法分布两层，一种是被动学习，也是浅度学习，听讲，阅读，视听，演示都是在被动学习，而与人讨论，自己动手实践，教授给别人是主动学习。主动学习我们称之为深度学习，如果你不能深度学习，你就不能真正学到东西。这也是你会经常有“学那么多干什么，不用就忘了”，这就是浅度学习的症状了。\n下面，我给出一些我自己觉得不错的学习经验：\n1、挑选一手知识和信息源。对于学习方法：第一我们一定要到知识源去挑选知识，知识信息源非常关键，二手信息丢失太大了，谭浩强写的书就丢失太多信息了。目前计算机一手知识基本都是国外的，所以英文非常重要。我鼓励大家一定读第一手的资料。如果你英语有问题，至少要看翻译过来，最好是原汁原味翻译的，不要我理解了给你讲那种，那种也是被别人嚼一遍再讲给你你没有体会，是别人带着你，别人的体会会影响你，也许你的体会会比他更好，因为是你自己总结出来的东西，所以知识源很重要。\n2、注意原理和基础 第二要注重基础原理。虽然可以忘记这个技术，但是原理记在心里，我可以徒手实现出来，而且通过原理可以更快学习其他类似的技术。所以原理很重要！当你学会C、C++要学Java和GO都很快。\n3、使用知识图谱 一定要学会使用知识图，把知识结构化。从一个技术关键点开始不断地关联和细化下去，比如：关于TCP协议，首先第一个要记住状态图，怎么建立连接，怎么断连接，状态怎么变迁。TCP没有连接，是靠状态维护连接的。其次，要了解TCP怎么保证可靠性，就是丢包以后怎么重传，重传有哪些技术点。然后，重传会让你联想到拥塞控制，拥塞控制到滑动窗口……。这基本就是TCP的所有东西了，找到关键点，然后顺着这个脉络一点点往下想，通过知识图关联就可以进行顺藤摸瓜。我们不需要记所有知识，那些手册的知识不需要记，你知道在哪里能找到就可以了。你脑子里面要有地图，学一个东西就跟在城市生活一样，闭上眼睛就知道地图，A点到B点怎么去大概方向要知道。我在北京我去广州，广州在南边，我大概坐飞机还是火车要心里有数。。\n4、学会举一反三。就是用不同方法学一个东西，比如说学TCP协议，看书是一种方法，编程是另外一种方法，还有用做Debug去看的，用不同方法学一个东西会让你更加熟悉，你学一个知识的同时把周边也学了。比如说学前端能不能把HTTP学一下，比如说长连接、短连接，包括hp1、hp2有一些不一样的东西。\n**5、总结和归纳。**只有学会总结和归纳，才能形成自己的思维框架、自己的套路、自己的方法论，以后学这个东西应该怎么学。就像学一门新的语言，不管GO语言，还是Rust语言，第一件事情就是了解内存是怎么管理的，数据类型什么样，第二是泛型怎么搞，第三是并发怎么弄。还有一些抽象怎么弄，比如说怎么解耦，怎么实现多态？套路这种东西只有学的多了以后才能形成套路，如果你只学会一门语言不会有套路，你要每年学门语言，不用学多精，你思考这个语言有什么不一样，为什么这个这种有玩法，那个有那种玩法，这些东西思考多了套路方法论就出来了。比如说Windows和Linux有什么不同，Linux和Unix又有什么不同？只有总结自己的框架、套路和方法，这些才永远不会被淘汰。\n**6、实践和坚持。**剩下就是多做多练，多坚持，只有实践才会有经验，只有锻炼了才能够把自己的脂肪变没，所以，要把知识变成技能必须练，就像小学生学会加减乘除，还是要演练，必须多做题，题目做得多了，自然掌握得好。要挑选好的知识源，注重原理技术，有一些原理的基础的书太枯燥，但是我告诉你学习这些基础太值得投入时间，搬砖赚几十元不值得，因为赚的是辛苦钱，老了就赚不了，必须要赚更有能力的钱，这是学习投资。\n小结 好了，该到这篇文章收尾的时候了，小结一下，如果你想更好的把握时代，提升自己，你需要知道这个时代的趋势是什么，需要什么样的人，这些人需要什么样的能力，这些能力是怎么获得的，投入到基础知识的学习就像“基建”一样，如果基础不好，不能长高，学习能力也是需要适应这个快速时代的重要的基础能力，没有好的学习能力，很快就会掉队被淘汰。\n","permalink":"http://localhost:64667/posts/programming/programmer-career/","summary":"\u003cp\u003e\u003cem\u003e\u003cstrong\u003e这篇文章摘自陈皓（左耳朵耗子）的blog（2020/08/07上传），其中很多观点击中了我内心的想法，或许可以在我遇到方向性问题的时候给我提醒。\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e这篇文章的主要内容主要是我今年3月份在腾讯做的直播，主要是想让一些技术人员对世界有一个大体的认识，并且在这个认识下能够有一个好的方法成就自己。而不是在一脸蒙圈的状态下随波逐流，而日益迷茫和焦虑。直播完后，腾讯方面把我的直播形成文字的形式发了出来，我觉得我可以再做一个精编版。所以，有了这篇文章，希望对大家有帮助。\u003c/p\u003e\n\u003cp\u003e对我来说，在我二十多年的工作经历来看，期间经历了很多技术的更新换代，整个技术模式、业务模式也是一直变来变去，我们这群老程序员成长中所经历的技术比今天的程序员玩的还更杂更多。我罗列一下我学过的，而且还被淘汰掉的技术，大家先感受一下。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e- MIS应用开发：FoxPro，PowerBuilder，Delphi\n- OA：Lotus Notes，VBScripts\n- 微软：ODBC/ADO，COM/DCOM，MFC/ATL，J++\n- 服务器：AIX，HP-UX，SCO Unix\n- Web：CGI，ISAPI，SOAP\n- RPC：CICS，Tuxedo\n- J2EE：Websphere，Weblogic\n- DB：Sybase，Informix \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我想说的是，无论过去还是今天，我们这些前浪和你们后浪所面对的技术的挑战和对技术的焦虑感是相似的，我们那个时候不但玩996，还玩封闭开发（就是一周只能回家一天）。当然，唯一好的东西，就是比起今天的程序员来说，我们那个年代没有像微信、微博、知乎，抖音这些巨大消耗你人生的东西，所以，我们的工作、生活和成长都有很效率，不会被打断、喜欢看书、Google还没有被封……当然，那时代没有StackOverlow和Github这样的东西，所以，能完成的东西或质量都一般。\u003c/p\u003e\n\u003cp\u003e当然，这里并不是想做一个比较，只是想让大家了解一下两代程序员间的一些问题各有千秋，大同小异。在整个成长过程中，其实有很多东西是相通的，其本上来说，就是下面的三件事——\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e第一\u003c/strong\u003e，如果想要把控技术，应对这个世界的一些变化，\u003cstrong\u003e需要大致知道这个世界的一些规律和发展趋势，另外还得认识自己\u003c/strong\u003e，自己到底适合做什么？在这个趋势和规律下属于自己的发挥领域到底是什么？这是我们每个人都需要了解的。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e第二\u003c/strong\u003e，\u003cstrong\u003e打牢基础，以不变应万变\u003c/strong\u003e，不管世界怎样变化，我都能很快适应它。基础的重要程度对于你能够飞多高是相当有影响的，懂原理的人比不懂原理的人能做出来的事情或是能解决的问题完全是两个层级的。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e第三，提升成长的效率\u003c/strong\u003e，因为现在社会的节奏实在太快了，比二十年前快得太多，技术层出不穷，所以我们的成长也要更有效率。效率并不单指的快，效率是怎么样更有效，是有用功除以总功（参看《\u003ca href=\"https://coolshell.cn/articles/10217.html\"\u003e加班与效率\u003c/a\u003e》），怎么学到更有效的东西，或者怎么更有效学习，是我们需要掌握的另一关键。\u003c/p\u003e\n\u003cp\u003e下面是我这多年来的一些认识，希望对你有帮助。\u003c/p\u003e\n\u003ch2 id=\"世界发展趋势\"\u003e世界发展趋势\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e我个人经历的信息化革命应该分成三个阶段：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e1990年代到2000年，这个时代MB时代\u003c/strong\u003e，是雅虎、新浪、搜狐、网易门户网站的时代，这个时代就是ISP/ICP互联网提供商，把一些资讯数字化，然后发布到网络上。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e2000年到2010年，这个时代叫GB时代，或是叫多媒体或UGC时代\u003c/strong\u003e，上网开始变得普遍了，每个人手里的数码设备开始变得多了起来，可以上传照片，可以上传视频，甚至可以在网上做社交。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e2010年到2020年，这个时代叫TB时代，这过去的十年是移动互联网时代\u003c/strong\u003e，移动互联网只需要手机在线，不需要依靠电脑。因为手机随时在线，所以个人的各种各样的数据始终在被收集，只要用户上网就会产生数据，所以人的行为最终也被数字化了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所有的硬件和软件都是跟着需要处理的数据而演进的，我们需要更大的带宽，更大的硬盘，更多的处理器……大到一定时候就只能进入分布式化的技术架构了，再大，数据中心也顶不住了，就会要引入更为分布式的边缘计算了。\u003c/p\u003e\n\u003cp\u003e另一方面，从业务上来看，\u003cstrong\u003e我们可以看到整个世界就在不断地进行数字化，因为，只要数字化了，就可以进行复制传播和计算，只要可以进行计算了，就可以进行数学建模，就可以自动化，只要可以自动化了就可以规模化，只要可能规模化了，就可以改变整个行业\u003c/strong\u003e。人类的近代史的大趋势基本上都是在解决能源和自动化的事，源源不断的能源是让机器不知疲倦的前提条件，用机器代替牲口，代替人类进行工作是规模化的前提条件。\u003c/p\u003e\n\u003cp\u003e所以，\u003cstrong\u003e技术的演进规律基本是自动化加规模化，从而降低成本，提升效率\u003c/strong\u003e。这就是为什么世界变得越来越快，人类都快跟不上节奏的原因，主要是整个社会不断被机器、数据所驱动。\u003c/p\u003e\n\u003ch4 id=\"人才需求\"\u003e人才需求\u003c/h4\u003e\n\u003cp\u003e在这个过程中，需要什么样的人？下面是我的一些认识——\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e技工\u003c/strong\u003e，在机器和自动化面前，肯定是需要能够操作机器的技术工人了，这类人是有技术的劳动力。在编程的圈子里俗称“码农”，他们并不是真正的工程师，他们只是电脑程序的操作员，所以，\u003cstrong\u003e随着技术门槛的下降或是技术形式的变更他可能就会变得越来越不值钱，直到被淘汰掉\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e特种工\u003c/strong\u003e，这种人是必须了解原理和解决难题的一类人，他们是解决比较难的、特定的一些技术问题。\u003cstrong\u003e当一种技术被淘汰，他并不容易被淘汰，因为他懂原理，原理就是解决问题的能力，是解决问题的套路和方法\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e工程师\u003c/strong\u003e，不但是使用技术，还可以把活儿做好，他们认为代码更多的时间是在维护，这些人使用各种各样的手段和各种技术，精益求精地持续不断地提高代码的易读性、扩展性、可维护性和重用性，这个过程似乎永无止境。对于这些有“洁癖”，有“工匠精神”，有“修养”的技术人员，我们称他们为工程师。\u003cstrong\u003e这种人做事又稳又快，而且可以做出很多称手的工具和方法论\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e再往上是\u003cstrong\u003e设计师和架构人员\u003c/strong\u003e，这些人主要是开发一些工具，框架，模式，提升软件开发和维护效率，同时也提升用户体验，和提升稳定性、性能、代码重用等，总的来说就是为了降本增效。这类人的工作降低了技术得到门槛，他们把技术门槛降低了以后，就可以把这个技术普及开来，就可以由广大劳工、技工、特殊工人使用了。\u003c/li\u003e\n\u003cli\u003e还有一类人是\u003cstrong\u003e经理\u003c/strong\u003e，经理主要是组织团队、完成项目、创造利润。这类人中，即有身先士卒的leader，也有高高在上的boss，但无论怎么样，这些人只不过是为了让一个公司或是一个团队更好组织在一起的“粘合剂”，这类人只有在大公司中才会变成更有价值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这就是我总结的世界需要哪些人才，我们了解这些东西以后大概就明白我们现在所处的位置有什么样的问题，我们应该去什么样的地方。\u003c/p\u003e\n\u003ch2 id=\"google-评分卡\"\u003eGoogle 评分卡\u003c/h2\u003e\n\u003cp\u003e接下来，我们再来看看Google的SRE的自我评分卡：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e0 – 对于相关的技术领域还不熟悉\n1 – 可以读懂这个领域的基础知识\n2 – 可以实现一些小的改动，清楚基本的原理，并能够在简单的指导下自己找到更多的细节。\n\n3 – 基本精通这个技术领域，完全不需要别人的帮助\n4 – 对这个技术领域非常的熟悉和舒适，可以应对和完成所有的日常工作。\n\n对于软件领域 – 有能力开发中等规模的程序，能够熟练和掌握并使用所有的语言特性，而不是需要翻书，并且能够找到所有的冷知识。\n对于系统领域 – 掌握网络和系统管理的很多基础知识，并能够掌握一些内核知识以运维一个小型的网络系统，包括恢复、调试和能解决一些不常见的故障。\n5 – 对于该技术领域有非常底层的了解和深入的技能。\n\n6 – 能够从零开发大规模的程序和系统，掌握底层和内在原理，能够设计和部署大规模的分布式系统架构\n7 – 理解并能利用高级技术，以及相关的内在原理，并可以从根本上自动化大量的系统管理和运维工作。\n8 – 对于一些边角和晦涩的技术、协议和系统工作原理有很深入的理解和经验。能够设计，部署并负责非常关键以及规模很大的基础设施，并能够构建相应的自动化设施\n\n9 – 能够在该技术领域出一本经典的书。并和标准委员会的人一起工作制定相关的技术标准和方法。\n10 – 在该领域写过一本书，被业内尊为专家，并是该技术的发明人。\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSRE需要自评如下这些技术或技能。\u003c/p\u003e","title":"(转)程序员如何把控自己的职业"},{"content":"Linux Namespace的技术解决了环境隔离的问题，不过这是虚拟化最基本的一步，我们另外需要解决对计算机资源使用上的隔离。说人话，就是虽然Namespace把我关到一个特定的环境，但是里面进程使用的CPU、内存、磁盘等计算资源实际上没有被限制。这个问题的解决，就要用到CGroup技术。\nLinux CGroup全称是Linux Control Group，也是其内核的一个功能，用于限制、控制和分离一个进程group的资源。最早这个项目是2006年由谷歌的工程师发起的，最开始名称是process containers（工程容器），后面觉得内核中容器这个名词被用烂了，就改名为cgroup。\nCGroup可以让你对系统中运行的进程的用户组分配资源-CPU时间、系统内存、网络带宽亦或者是这些的组合。同时，也可以监控你配置的cgroup，拒绝cgroup访问某些资源。主要提供的功能如下：\nResource Limitation： 限制资源使用\nPrioritization: 优先级控制，例如CPU使用和磁盘IO吞吐\nAccounting：审计统计，主要用于计费\nControl：挂起进程，恢复执行进程\n在真正的实践当中，system admin一般会利用CGroup做以下的事：\n对进程集合进行隔离，限制他们所消费的资源，例如绑定CPU core\n为这组进程分配足够使用的内存\n为这组进程分配响应的网络带宽和磁盘存储限制\n限制访问某些设备（白名单）\nLinux实际上把CGroup实现成了一个文件系统，你可以mount。在linux环境输入下面的可以看到cgroup已经为你mount好：\n1 2 3 4 5 6 7 8 9 10 11 12 derios@ubuntu:~$ mount -t cgroup cgroup on /sys/fs/cgroup/cpuset type cgroup (rw,relatime,cpuset) cgroup on /sys/fs/cgroup/cpu type cgroup (rw,relatime,cpu) cgroup on /sys/fs/cgroup/cpuacct type cgroup (rw,relatime,cpuacct) cgroup on /sys/fs/cgroup/memory type cgroup (rw,relatime,memory) cgroup on /sys/fs/cgroup/devices type cgroup (rw,relatime,devices) cgroup on /sys/fs/cgroup/freezer type cgroup (rw,relatime,freezer) cgroup on /sys/fs/cgroup/blkio type cgroup (rw,relatime,blkio) cgroup on /sys/fs/cgroup/net_prio type cgroup (rw,net_prio) cgroup on /sys/fs/cgroup/net_cls type cgroup (rw,net_cls) cgroup on /sys/fs/cgroup/perf_event type cgroup (rw,relatime,perf_event) cgroup on /sys/fs/cgroup/hugetlb type cgroup (rw,relatime,hugetlb) 可以看到，在/sys/fs下有cgroup目录，这个目录下面有各种子目录：cpu，cpuset，memory\u0026hellip;。这些都是cgroup的子系统，分别用来干不同的事。\n如果没有看到上面的目录，你可以自己mount:\n1 2 3 4 5 6 7 8 mkdir cgroup mount -t tmpfs cgroup_root ./cgroup mkdir cgroup/cpuset mount -t cgroup -ocpuset cpuset ./cgroup/cpuset/ mkdir cgroup/cpu mount -t cgroup -ocpu cpu ./cgroup/cpu/ mkdir cgroup/memory mount -t cgroup -omemory memory ./cgroup/memory/ mount成功以后，你会看见这些目录下有文件，比如下面展现的cpu和cpuset子系统:\n1 2 3 4 5 6 7 8 9 10 11 12 13 derios@ubuntu:~$ ls /sys/fs/cgroup/cpu /sys/fs/cgroup/cpuset/ /sys/fs/cgroup/cpu: cgroup.clone_children cgroup.sane_behavior cpu.shares release_agent cgroup.event_control cpu.cfs_period_us cpu.stat tasks cgroup.procs cpu.cfs_quota_us notify_on_release user /sys/fs/cgroup/cpuset/: cgroup.clone_children cpuset.mem_hardwall cpuset.sched_load_balance cgroup.event_control cpuset.memory_migrate cpuset.sched_relax_domain_level cgroup.procs cpuset.memory_pressure notify_on_release cgroup.sane_behavior cpuset.memory_pressure_enabled release_agent cpuset.cpu_exclusive cpuset.memory_spread_page tasks cpuset.cpus cpuset.memory_spread_slab user cpuset.mem_exclusive cpuset.mems 你可以进入/sys/fs/cgroup的各个目录下去创建个dir，你会发现一旦你创建了，这个子目录下又有很多文件：\n1 2 3 4 5 derios@ubuntu:/sys/fs/cgroup/cpu$ sudo mkdir haoel [sudo] password for derios: derios@ubuntu:/sys/fs/cgroup/cpu$ ls ./haoel cgroup.clone_children cgroup.procs cpu.cfs_quota_us cpu.stat tasks cgroup.event_control cpu.cfs_period_us cpu.shares notify_on_release CPU限制 假设我们写了个吃CPU的程序：\n1 2 3 4 5 6 int main(void) { int i = 0; for(;;) i++; return 0; } 用sudo执行毫无疑问cpu飚到100%：\n1 2 PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 3529 root 20 0 4196 736 656 R 99.6 0.1 0:23.13 deadloop 在上面我们在/sys/fs/cgroup/cpu下面创建了haoel的group，我们首先设置下cpu限制\n1 2 3 derios@ubuntu:~# cat /sys/fs/cgroup/cpu/haoel/cpu.cfs_quota_us -1 root@ubuntu:~# echo 20000 \u0026gt; /sys/fs/cgroup/cpu/haoel/cpu.cfs_quota_us 我们top出来看到这个线程的pid是3529，我们加到这个cgroup中:\n1 # echo 3529 \u0026gt;\u0026gt; /sys/fs/cgroup/cpu/haoel/tasks 然后再看top，可以发现CPU使用率一下降成了20%（设置的20000代表着20%）：\n1 2 PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 3529 root 20 0 4196 736 656 R 19.9 0.1 8:06.11 deadloop 下面贴一个我google的代码示例，用于参考看看注释:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 #define _GNU_SOURCE /* See feature_test_macros(7) */ #include \u0026lt;pthread.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/syscall.h\u0026gt; const int NUM_THREADS = 5; void *thread_main(void *threadid) { /* 把自己加入cgroup中（syscall(SYS_gettid)为得到线程的系统tid） */ char cmd[128]; sprintf(cmd, \u0026#34;echo %ld \u0026gt;\u0026gt; /sys/fs/cgroup/cpu/haoel/tasks\u0026#34;, syscall(SYS_gettid)); system(cmd); sprintf(cmd, \u0026#34;echo %ld \u0026gt;\u0026gt; /sys/fs/cgroup/cpuset/haoel/tasks\u0026#34;, syscall(SYS_gettid)); system(cmd); long tid; tid = (long)threadid; printf(\u0026#34;Hello World! It\u0026#39;s me, thread #%ld, pid #%ld!\\n\u0026#34;, tid, syscall(SYS_gettid)); int a=0; while(1) { a++; } pthread_exit(NULL); } int main (int argc, char *argv[]) { int num_threads; if (argc \u0026gt; 1){ num_threads = atoi(argv[1]); } if (num_threads\u0026lt;=0 || num_threads\u0026gt;=100){ num_threads = NUM_THREADS; } /* 设置CPU利用率为50% */ mkdir(\u0026#34;/sys/fs/cgroup/cpu/haoel\u0026#34;, 755); system(\u0026#34;echo 50000 \u0026gt; /sys/fs/cgroup/cpu/haoel/cpu.cfs_quota_us\u0026#34;); mkdir(\u0026#34;/sys/fs/cgroup/cpuset/haoel\u0026#34;, 755); /* 限制CPU只能使用#2核和#3核 */ system(\u0026#34;echo \\\u0026#34;2,3\\\u0026#34; \u0026gt; /sys/fs/cgroup/cpuset/haoel/cpuset.cpus\u0026#34;); pthread_t* threads = (pthread_t*) malloc (sizeof(pthread_t)*num_threads); int rc; long t; for(t=0; t\u0026lt;num_threads; t++){ printf(\u0026#34;In main: creating thread %ld\\n\u0026#34;, t); rc = pthread_create(\u0026amp;threads[t], NULL, thread_main, (void *)t); if (rc){ printf(\u0026#34;ERROR; return code from pthread_create() is %d\\n\u0026#34;, rc); exit(-1); } } /* Last thing that main() should do */ pthread_exit(NULL); free(threads); } 内存使用限制 我们构造一下无限分配内存的例子：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int main(void) { int size = 0; int chunk_size = 512; void *p = NULL; while(1) { if ((p = malloc(p, chunk_size)) == NULL) { printf(\u0026#34;out of memory!!\\n\u0026#34;); break; } memset(p, 1, chunk_size); size += chunk_size; printf(\u0026#34;[%d] - memory is allocated [%8d] bytes \\n\u0026#34;, getpid(), size); sleep(1); } return 0; } 这个代码是个dead loop，每隔1秒会分配512字节的内存。然后我们再cgroup搞事情：\n1 2 3 4 5 6 # 创建memory cgroup $ mkdir /sys/fs/cgroup/memory/haoel $ echo 64k \u0026gt; /sys/fs/cgroup/memory/haoel/memory.limit_in_bytes # 把上面的进程的pid加入这个cgroup $ echo [pid] \u0026gt; /sys/fs/cgroup/memory/haoel/tasks 可以看到上面的进程会因为内存oom被kill。\n磁盘IO限制 我们先查看下磁盘IO，模拟一下（从/dev/sda1读取数据，输出到/dev/null上）：\n1 sudo dd if=/dev/sda1 of=/dev/null 通过iotop命令可以看到相关的io速度为55MB/s：\n1 2 TID PRIO USER DISK READ DISK WRITE SWAPIN IO\u0026gt; COMMAND 8128 be/4 root 55.74 M/s 0.00 B/s 0.00 % 85.65 % dd if=/de~=/dev/null... 然后，我们先创建一个blkio（块设备IO）的cgroup:\n1 mkdir /sys/fs/cgroup/blkio/haoel 并把读IO限制到1MB/s，并把前面那个dd命令的pid放进去（注：8:0 是设备号，你可以通过ls -l /dev/sda1获得）：\n1 2 root@ubuntu:~# echo \u0026#39;8:0 1048576\u0026#39; \u0026gt; /sys/fs/cgroup/blkio/haoel/blkio.throttle.read_bps_device root@ubuntu:~# echo 8128 \u0026gt; /sys/fs/cgroup/blkio/haoel/tasks 再用iotop命令，你马上就能看到读速度被限制到了1MB/s左右:\n1 2 TID PRIO USER DISK READ DISK WRITE SWAPIN IO\u0026gt; COMMAND 8128 be/4 root 973.20 K/s 0.00 B/s 0.00 % 94.41 % dd if=/de~=/dev/null... CGroup的子系统 OK，有了以上比较感性的认识，我们来看看control group到底有哪些子系统：\nblkio — 这个子系统为块设备设定输入/输出限制，比如物理设备（磁盘，固态硬盘，USB 等等）。\ncpu — 这个子系统使用调度程序提供对 CPU 的 cgroup 任务访问。\ncpuacct — 这个子系统自动生成 cgroup 中任务所使用的 CPU 报告。\ncpuset — 这个子系统为 cgroup 中的任务分配独立 CPU（在多核系统）和内存节点。\ndevices — 这个子系统可允许或者拒绝 cgroup 中的任务访问设备。\nfreezer — 这个子系统挂起或者恢复 cgroup 中的任务。\nmemory — 这个子系统设定 cgroup 中任务使用的内存限制，并自动生成内存资源使用报告。\nnet_cls — 这个子系统使用等级识别符（classid）标记网络数据包，可允许 Linux 流量控制程序（tc）识别从具体 cgroup 中生成的数据包。\nnet_prio — 这个子系统用来设计网络流量的优先级\nhugetlb — 这个子系统主要针对于HugeTLB系统进行限制，这是一个大页文件系统。\n在我的Ubuntu14.04虚拟机下看不到net_cls和net_prio这两个cgroup，需要手动mount：\n1 2 3 4 5 6 7 $ sudo modprobe cls_cgroup $ sudo mkdir /sys/fs/cgroup/net_cls $ sudo mount -t cgroup -o net_cls none /sys/fs/cgroup/net_cls $ sudo modprobe netprio_cgroup $ sudo mkdir /sys/fs/cgroup/net_prio $ sudo mount -t cgroup -o net_prio none /sys/fs/cgroup/net_prio CGroup术语 CGroup有下述术语：\n任务（Tasks）：就是系统的一个进程。 控制组（Control Group）：一组按照某种标准划分的进程，比如官方文档中的Professor和Student，或是WWW和System之类的，其表示了某进程组。Cgroups中的资源控制都是以控制组为单位实现。一个进程可以加入到某个控制组。而资源的限制是定义在这个组上，就像上面示例中我用的haoel一样。简单点说，cgroup的呈现就是一个目录带一系列的可配置文件。 层级（Hierarchy）：控制组可以组织成hierarchical的形式，既一颗控制组的树（目录结构）。控制组树上的子节点继承父结点的属性。简单点说，hierarchy就是在一个或多个子系统上的cgroups目录树。 子系统（Subsystem）：一个子系统就是一个资源控制器，比如CPU子系统就是控制CPU时间分配的一个控制器。子系统必须附加到一个层级上才能起作用，一个子系统附加到某个层级以后，这个层级上的所有控制族群都受到这个子系统的控制。Cgroup的子系统可以有很多，也在不断增加中。 ","permalink":"http://localhost:64667/posts/programming/cloud-computing/docker-cgroup/","summary":"\u003cp\u003eLinux Namespace的技术解决了环境隔离的问题，不过这是虚拟化最基本的一步，我们另外需要解决\u003cstrong\u003e对计算机资源使用上的隔离\u003c/strong\u003e。说人话，就是虽然Namespace把我关到一个特定的环境，但是里面进程使用的CPU、内存、磁盘等计算资源实际上没有被限制。这个问题的解决，就要用到CGroup技术。\u003c/p\u003e\n\u003cp\u003eLinux CGroup全称是Linux Control Group，也是其内核的一个功能，用于限制、控制和分离一个进程group的资源。最早这个项目是2006年由谷歌的工程师发起的，最开始名称是process containers（工程容器），后面觉得内核中容器这个名词被用烂了，就改名为cgroup。\u003c/p\u003e\n\u003cp\u003eCGroup可以让你对系统中运行的进程的用户组分配资源-CPU时间、系统内存、网络带宽亦或者是这些的组合。同时，也可以监控你配置的cgroup，拒绝cgroup访问某些资源。主要提供的功能如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eResource Limitation\u003c/code\u003e： 限制资源使用\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ePrioritization\u003c/code\u003e: 优先级控制，例如CPU使用和磁盘IO吞吐\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eAccounting\u003c/code\u003e：审计统计，主要用于计费\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eControl\u003c/code\u003e：挂起进程，恢复执行进程\u003c/p\u003e\n\u003cp\u003e在真正的实践当中，system admin一般会利用CGroup做以下的事：\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e对进程集合进行隔离，限制他们所消费的资源，例如绑定CPU core\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e为这组进程分配足够使用的内存\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e为这组进程分配响应的网络带宽和磁盘存储限制\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e限制访问某些设备（白名单）\u003c/p\u003e\n\u003cp\u003eLinux实际上把CGroup实现成了一个文件系统，你可以mount。在linux环境输入下面的可以看到cgroup已经为你mount好：\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ederios@ubuntu:~$ mount -t cgroup\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecgroup on /sys/fs/cgroup/cpuset \u003cspan class=\"nb\"\u003etype\u003c/span\u003e cgroup \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,relatime,cpuset\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecgroup on /sys/fs/cgroup/cpu \u003cspan class=\"nb\"\u003etype\u003c/span\u003e cgroup \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,relatime,cpu\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecgroup on /sys/fs/cgroup/cpuacct \u003cspan class=\"nb\"\u003etype\u003c/span\u003e cgroup \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,relatime,cpuacct\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecgroup on /sys/fs/cgroup/memory \u003cspan class=\"nb\"\u003etype\u003c/span\u003e cgroup \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,relatime,memory\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecgroup on /sys/fs/cgroup/devices \u003cspan class=\"nb\"\u003etype\u003c/span\u003e cgroup \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,relatime,devices\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecgroup on /sys/fs/cgroup/freezer \u003cspan class=\"nb\"\u003etype\u003c/span\u003e cgroup \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,relatime,freezer\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecgroup on /sys/fs/cgroup/blkio \u003cspan class=\"nb\"\u003etype\u003c/span\u003e cgroup \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,relatime,blkio\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecgroup on /sys/fs/cgroup/net_prio \u003cspan class=\"nb\"\u003etype\u003c/span\u003e cgroup \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,net_prio\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecgroup on /sys/fs/cgroup/net_cls \u003cspan class=\"nb\"\u003etype\u003c/span\u003e cgroup \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,net_cls\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecgroup on /sys/fs/cgroup/perf_event \u003cspan class=\"nb\"\u003etype\u003c/span\u003e cgroup \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,relatime,perf_event\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecgroup on /sys/fs/cgroup/hugetlb \u003cspan class=\"nb\"\u003etype\u003c/span\u003e cgroup \u003cspan class=\"o\"\u003e(\u003c/span\u003erw,relatime,hugetlb\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e可以看到，在\u003ccode\u003e/sys/fs\u003c/code\u003e下有\u003ccode\u003ecgroup\u003c/code\u003e目录，这个目录下面有各种子目录：\u003ccode\u003ecpu\u003c/code\u003e，\u003ccode\u003ecpuset\u003c/code\u003e，\u003ccode\u003ememory\u003c/code\u003e\u0026hellip;。这些都是cgroup的子系统，分别用来干不同的事。\u003c/p\u003e","title":"Docker Fundamentals: Cgroup"},{"content":"容器技术出现已经很久，只不过Docker容器平台的出现它变火了。Docker是第一个让容器能在不同机器之间移植的系统，它简化了打包应用的流程，也简化了打包应用的库和各种依赖。思考下整个OS的file system能直接被打包成一个简单的可移植的包，一开始的时候概念上还是很有趣的。\n有时候我认为自己的阅读比较碎片化(short-term memory越来越少)，所以我想把之前学习容器知识的一些基础技术再整理出来，也算是给自己学习的反馈。这个基础系列从Linux Namespace开始，后续会陆续介绍比如cgroup、aufs、devicemapper等技术。\n参考 Namespace in operation\nLinux namespace man page\nIntroduction to linux namespace\n什么是Namespace 简单来说，linux namespace是Linux提供的一种内核级别环境隔离的方法。在早期的Unix中，提供了一种叫做chroot的系统调用：通过修改root目录把用户关到一个特定的目录下面。这种就是简单的隔离方式，也就是chroot内部的file system无法访问外部的内容。Linux Namespace在此基础之上，提供了对UTS、IPC、mount、network、PID、User等隔离机制。\n这里可以简单举例，比如Linux的超级父进程的PID为1，如果我们可以把用户的进程空间关到某个进程分支之下，并且像chroot那样能够让下面的进程看到那个超级父进程的PID为1，而不同PID Namespace中的进程无法看到彼此，这样就能达到进程隔离。\nLinux Namespace有以下的种类，供给后续参考（刚看有个印象就行）：\n分类 系统调用参数 相关内核版本 Mount namespaces CLONE_NEWNS Linux 2.4.19 UTS namespaces CLONE_NEWUTS Linux 2.6.19 IPC namespaces CLONE_NEWIPC Linux 2.6.19 PID namespaces CLONE_NEWPID Linux 2.6.24 Network namespaces CLONE_NEWNET 始于Linux 2.6.24 完成于 Linux 2.6.29 User namespaces CLONE_NEWUSER 始于 Linux 2.6.23 完成于 Linux 3.8) 其主要涉及到三个系统调用：\nclone()： 实现线程的系统调用，用来创建新的线程，并可通过涉及上述参数做到隔离 unshare()： 让某一个线程脱离某namespace setns(): 把某一个线程加到某namespace 如果读者你想看具体的实例，请自己man一下(关注一下自己的linux虚拟机内核)，或者google一下，我这里贴一个clone()的source code：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #define _GNU_SOURCE #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/wait.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;sched.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; /* 定义一个给 clone 用的栈，栈大小1M */ #define STACK_SIZE (1024 * 1024) static char container_stack[STACK_SIZE]; char* const container_args[] = { \u0026#34;/bin/bash\u0026#34;, NULL }; int container_main(void* arg) { printf(\u0026#34;Container - inside the container!\\n\u0026#34;); /* 直接执行一个shell，以便我们观察这个进程空间里的资源是否被隔离了 */ execv(container_args[0], container_args); printf(\u0026#34;Something\u0026#39;s wrong!\\n\u0026#34;); return 1; } int main() { printf(\u0026#34;Parent - start a container!\\n\u0026#34;); /* 调用clone函数，其中传出一个函数，还有一个栈空间的（为什么传尾指针，因为栈是反着的） */ int container_pid = clone(container_main, container_stack+STACK_SIZE, SIGCHLD, NULL); /* 等待子进程结束 */ waitpid(container_pid, NULL, 0); printf(\u0026#34;Parent - container stopped!\\n\u0026#34;); return 0; } 上面的程序注释写的比较明白，和pthreads差不多。不过这个程序里，父子进程的进程空间没有什么区别，父进程能访问到的明显子进程也能访问。\n我们用几个例子来看看linux的namespace到底是啥样的，运行的虚拟机为ubuntu14.4\nUTS Namespace 这里略去一些头文件和数据结构的定义：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int container_main(void* arg) { printf(\u0026#34;Container - inside the container!\\n\u0026#34;); sethostname(\u0026#34;container\u0026#34;,10); /* 设置hostname */ execv(container_args[0], container_args); printf(\u0026#34;Something\u0026#39;s wrong!\\n\u0026#34;); return 1; } int main() { printf(\u0026#34;Parent - start a container!\\n\u0026#34;); int container_pid = clone(container_main, container_stack+STACK_SIZE, CLONE_NEWUTS | SIGCHLD, NULL); /*启用CLONE_NEWUTS Namespace隔离 */ waitpid(container_pid, NULL, 0); printf(\u0026#34;Parent - container stopped!\\n\u0026#34;); return 0; } 执行上述的c++程序，会发现子进程的hostname变为了container\n1 2 3 4 5 6 7 derios@ubuntu:~$ sudo ./uts Parent - start a container! Container - inside the container! root@container:~# hostname container root@container:~# uname -n container IPC Namespace IPC(Inter-Process Communication)，是Unix/Linux下的一种通信方式。IPC有共享内存、信号量、消息队列等方法。所以如果要隔离我们也要把IPC进行隔离。换句话说，这样可以保证只有在同一个namespace下的进程之间才能互相通信。目前我对IPC的原理没什么研究，查了查资料，IPC需要有个全局的ID，那么如果我们要做隔离，namespace肯定需要对这个全局ID进行隔离，不能和其他namespace中的进程共享。\n要启动IPC隔离，我们需要在clone时加上CLONE_NEWPIC的参数:\n1 2 int container_pid = clone(container_main, container_stack+STACK_SIZE, CLONE_NEWUTS | CLONE_NEWIPC | SIGCHLD, NULL); 我们先创建一个IPC的queue，下面的全局ID为0：\n1 2 3 4 5 6 derios@ubuntu:~$ ipcmk -Q Message queue id: 0 derios@ubuntu:~$ ipcs -q ------ Message Queues -------- key msqid owner perms used-bytes messages 0xd0d56eb2 0 hchen 644 0 0 如果我们不加CLONE_NEWIPC参数运行程序，我们可以看到在子进程中还是能看到全局的IPC queue：\n1 2 3 4 5 6 7 derios@ubuntu:~$ sudo ./uts Parent - start a container! Container - inside the container! root@container:~# ipcs -q ------ Message Queues -------- key msqid owner perms used-bytes messages 0xd0d56eb2 0 hchen 644 0 0 如果我们运行加上了CLONE_NEWIPC的程序，可以有如下的结果:\n1 2 3 4 5 6 root@ubuntu:~$ sudo./ipc Parent - start a container! Container - inside the container! root@container:~/linux_namespace# ipcs -q ------ Message Queues -------- key msqid owner perms used-bytes messages 可见IPC已经被隔离。\nPID Namespace 我们继续修改上述的程序：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int container_main(void* arg) { /* 查看子进程的PID，我们可以看到其输出子进程的 pid 为 1 */ printf(\u0026#34;Container [%5d] - inside the container!\\n\u0026#34;, getpid()); sethostname(\u0026#34;container\u0026#34;,10); execv(container_args[0], container_args); printf(\u0026#34;Something\u0026#39;s wrong!\\n\u0026#34;); return 1; } int main() { printf(\u0026#34;Parent [%5d] - start a container!\\n\u0026#34;, getpid()); /*启用PID namespace - CLONE_NEWPID*/ int container_pid = clone(container_main, container_stack+STACK_SIZE, CLONE_NEWUTS | CLONE_NEWPID | SIGCHLD, NULL); waitpid(container_pid, NULL, 0); printf(\u0026#34;Parent - container stopped!\\n\u0026#34;); return 0; } 运行看一下，发现子进程的PID为1：\n1 2 3 4 5 derios@ubuntu:~$ sudo ./pid Parent [ 3474] - start a container! Container [ 1] - inside the container! root@container:~# echo $$ 1 这里的1有啥意义，你可能会问。其实在传统UNIX系统中，PID为1的进程地位比较特殊，指代init\n，作为所有进程的父进程，有非常多的特权（信号屏蔽etc.），此外它还会检查所有进程的状态，而且如果子进程脱离了父进程（父进程没有wait它），那么init会负责回收资源并结束这个子进程。所以，要做到进程空间的隔离，首先要创建pid为1的进程，比如可以像chroot一样，把子进程的pid在容器内变为1。\n不过，很奇怪的是，**我们在子进程的shell里执行top, ps等命令，还是可以看到所有的进程。**这意味着隔离并没有完全。因为像ps, top这些命令会读取/proc文件系统，而因为/proc文件系统在父子进程里都是一样的，所以命令的回显也都是一样的。\n因此，我们还要做到对文件系统的隔离。\nMount Namespace 下面的程序，我们在启用mount namespace并在子进程中重新mount了/proc文件系统。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 int container_main(void* arg) { printf(\u0026#34;Container [%5d] - inside the container!\\n\u0026#34;, getpid()); sethostname(\u0026#34;container\u0026#34;,10); /* 重新mount proc文件系统到 /proc下 */ system(\u0026#34;mount -t proc proc /proc\u0026#34;); execv(container_args[0], container_args); printf(\u0026#34;Something\u0026#39;s wrong!\\n\u0026#34;); return 1; } int main() { printf(\u0026#34;Parent [%5d] - start a container!\\n\u0026#34;, getpid()); /* 启用Mount Namespace - 增加CLONE_NEWNS参数 */ int container_pid = clone(container_main, container_stack+STACK_SIZE, CLONE_NEWUTS | CLONE_NEWPID | CLONE_NEWNS | SIGCHLD, NULL); waitpid(container_pid, NULL, 0); printf(\u0026#34;Parent - container stopped!\\n\u0026#34;); return 0; } 执行结果如下:\n1 2 3 4 5 6 7 derioshen@ubuntu:~$ sudo ./pid.mnt Parent [ 3502] - start a container! Container [ 1] - inside the container! root@container:~# ps -elf F S UID PID PPID C PRI NI ADDR SZ WCHAN STIME TTY TIME CMD 4 S root 1 0 0 80 0 - 6917 wait 19:55 pts/2 00:00:00 /bin/bash 0 R root 14 1 0 80 0 - 5671 - 19:56 pts/2 00:00:00 ps -elf 我们看到只有2个进程了，pid=1的是我们的/bin/bash，同时再看看/proc目录，也变得比较干净:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 root@container:~# ls /proc 1 dma key-users net sysvipc 16 driver kmsg pagetypeinfo timer_list acpi execdomains kpagecount partitions timer_stats asound fb kpageflags sched_debug tty buddyinfo filesystems loadavg schedstat uptime bus fs locks scsi version cgroups interrupts mdstat self version_signature cmdline iomem meminfo slabinfo vmallocinfo consoles ioports misc softirqs vmstat cpuinfo irq modules stat zoneinfo crypto kallsyms mounts swaps devices kcore mpt sys diskstats keys mtrr sysrq-trigger 通过CLONE_NEWNS创建mount namespace以后，父进程会把自己的文件结构复制给子进程。而子进程中新的namespace中所有mount操作都只会影响自身的文件系统，不会对外界产生任何影响，这就做到了严格的隔离。\n那么我们是不是还有别的一些文件系统也要mount？答案是肯定的。\nDocker的Mount Namespace 我们可以简单搞个小的镜像，这种玩法是我google参考来的，模仿docker的mount namespace。\n首先，我们需要一个rootfs， 也就是我们需要把我们要做的镜像中的那些命令什么的copy到一个rootfs的目录下，我们模仿Linux构建如下的目录：\n1 2 derios@ubuntu:~/rootfs$ ls bin dev etc home lib lib64 mnt opt proc root run sbin sys tmp usr var 然后，我们把一些我们需要的命令copy到 rootfs/bin目录中（sh命令必需要copy进去，不然我们无法 chroot ）：\n1 2 3 4 5 6 7 8 9 10 derios@ubuntu:~/rootfs$ ls ./bin ./usr/bin ./bin: bash chown gzip less mount netstat rm tabs tee top tty cat cp hostname ln mountpoint ping sed tac test touch umount chgrp echo ip ls mv ps sh tail timeout tr uname chmod grep kill more nc pwd sleep tar toe truncate which ./usr/bin: awk env groups head id mesg sort strace tail top uniq vi wc xargs 注：你可以使用ldd命令把这些命令相关的那些so文件copy到对应的目录：\n1 2 3 4 5 6 derios@ubuntu:~/rootfs/bin$ ldd bash linux-vdso.so.1 =\u0026gt; (0x00007fffd33fc000) libtinfo.so.5 =\u0026gt; /lib/x86_64-linux-gnu/libtinfo.so.5 (0x00007f4bd42c2000) libdl.so.2 =\u0026gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f4bd40be000) libc.so.6 =\u0026gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f4bd3cf8000) /lib64/ld-linux-x86-64.so.2 (0x00007f4bd4504000) 下面是我的rootfs中的一些so文件：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 derios@ubuntu:~/rootfs$ ls ./lib64 ./lib/x86_64-linux-gnu/ ./lib64: ld-linux-x86-64.so.2 ./lib/x86_64-linux-gnu/: libacl.so.1 libmemusage.so libnss_files-2.19.so libpython3.4m.so.1 libacl.so.1.1.0 libmount.so.1 libnss_files.so.2 libpython3.4m.so.1.0 libattr.so.1 libmount.so.1.1.0 libnss_hesiod-2.19.so libresolv-2.19.so libblkid.so.1 libm.so.6 libnss_hesiod.so.2 libresolv.so.2 libc-2.19.so libncurses.so.5 libnss_nis-2.19.so libselinux.so.1 libcap.a libncurses.so.5.9 libnss_nisplus-2.19.so libtinfo.so.5 libcap.so libncursesw.so.5 libnss_nisplus.so.2 libtinfo.so.5.9 libcap.so.2 libncursesw.so.5.9 libnss_nis.so.2 libutil-2.19.so libcap.so.2.24 libnsl-2.19.so libpcre.so.3 libutil.so.1 libc.so.6 libnsl.so.1 libprocps.so.3 libuuid.so.1 libdl-2.19.so libnss_compat-2.19.so libpthread-2.19.so libz.so.1 libdl.so.2 libnss_compat.so.2 libpthread.so.0 libgpm.so.2 libnss_dns-2.19.so libpython2.7.so.1 libm-2.19.so libnss_dns.so.2 libpython2.7.so.1.0 包括这些命令依赖的一些配置文件：\n1 2 3 derios@ubuntu:~/rootfs$ ls ./etc bash.bashrc group hostname hosts ld.so.cache nsswitch.conf passwd profile resolv.conf shadow 看到现在你可能比较懵逼，有的比较熟悉os的同学也可能会问：有的配置希望是在容器起动时给他设置的，而不是hard code在镜像中的。比如：/etc/hosts，/etc/hostname，还有DNS的/etc/resolv.conf文件。OK, 那我们在rootfs外面，我们再创建一个conf目录，把这些文件放到这个目录中:\n1 2 derios@ubuntu:~$ ls ./conf hostname hosts resolv.conf 这样，我们的父进程就可以动态地设置容器需要的这些文件的配置， 然后再把他们mount进容器，这样，容器的镜像中的配置就比较灵活了。\n接下来是程序(Google真好)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 #define _GNU_SOURCE #include \u0026lt;sys types.h=\u0026#34;\u0026#34;\u0026gt; #include \u0026lt;sys wait.h=\u0026#34;\u0026#34;\u0026gt; #include \u0026lt;sys mount.h=\u0026#34;\u0026#34;\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;sched.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #define STACK_SIZE (1024 * 1024) static char container_stack[STACK_SIZE]; char* const container_args[] = { \u0026#34;/bin/bash\u0026#34;, \u0026#34;-l\u0026#34;, NULL }; int container_main(void* arg) { printf(\u0026#34;Container [%5d] - inside the container!\\n\u0026#34;, getpid()); //set hostname sethostname(\u0026#34;container\u0026#34;,10); //remount \u0026#34;/proc\u0026#34; to make sure the \u0026#34;top\u0026#34; and \u0026#34;ps\u0026#34; show container\u0026#39;s information if (mount(\u0026#34;proc\u0026#34;, \u0026#34;rootfs/proc\u0026#34;, \u0026#34;proc\u0026#34;, 0, NULL) !=0 ) { perror(\u0026#34;proc\u0026#34;); } if (mount(\u0026#34;sysfs\u0026#34;, \u0026#34;rootfs/sys\u0026#34;, \u0026#34;sysfs\u0026#34;, 0, NULL)!=0) { perror(\u0026#34;sys\u0026#34;); } if (mount(\u0026#34;none\u0026#34;, \u0026#34;rootfs/tmp\u0026#34;, \u0026#34;tmpfs\u0026#34;, 0, NULL)!=0) { perror(\u0026#34;tmp\u0026#34;); } if (mount(\u0026#34;udev\u0026#34;, \u0026#34;rootfs/dev\u0026#34;, \u0026#34;devtmpfs\u0026#34;, 0, NULL)!=0) { perror(\u0026#34;dev\u0026#34;); } if (mount(\u0026#34;devpts\u0026#34;, \u0026#34;rootfs/dev/pts\u0026#34;, \u0026#34;devpts\u0026#34;, 0, NULL)!=0) { perror(\u0026#34;dev/pts\u0026#34;); } if (mount(\u0026#34;shm\u0026#34;, \u0026#34;rootfs/dev/shm\u0026#34;, \u0026#34;tmpfs\u0026#34;, 0, NULL)!=0) { perror(\u0026#34;dev/shm\u0026#34;); } if (mount(\u0026#34;tmpfs\u0026#34;, \u0026#34;rootfs/run\u0026#34;, \u0026#34;tmpfs\u0026#34;, 0, NULL)!=0) { perror(\u0026#34;run\u0026#34;); } /* * 模仿Docker的从外向容器里mount相关的配置文件 * 你可以查看：/var/lib/docker/containers/\u0026lt;container_id\u0026gt;/目录， * 你会看到docker的这些文件的。 */ if (mount(\u0026#34;conf/hosts\u0026#34;, \u0026#34;rootfs/etc/hosts\u0026#34;, \u0026#34;none\u0026#34;, MS_BIND, NULL)!=0 || mount(\u0026#34;conf/hostname\u0026#34;, \u0026#34;rootfs/etc/hostname\u0026#34;, \u0026#34;none\u0026#34;, MS_BIND, NULL)!=0 || mount(\u0026#34;conf/resolv.conf\u0026#34;, \u0026#34;rootfs/etc/resolv.conf\u0026#34;, \u0026#34;none\u0026#34;, MS_BIND, NULL)!=0 ) { perror(\u0026#34;conf\u0026#34;); } /* 模仿docker run命令中的 -v, --volume=[] 参数干的事 */ if (mount(\u0026#34;/tmp/t1\u0026#34;, \u0026#34;rootfs/mnt\u0026#34;, \u0026#34;none\u0026#34;, MS_BIND, NULL)!=0) { perror(\u0026#34;mnt\u0026#34;); } /* chroot 隔离目录 */ if ( chdir(\u0026#34;./rootfs\u0026#34;) != 0 || chroot(\u0026#34;./\u0026#34;) != 0 ){ perror(\u0026#34;chdir/chroot\u0026#34;); } execv(container_args[0], container_args); perror(\u0026#34;exec\u0026#34;); printf(\u0026#34;Something\u0026#39;s wrong!\\n\u0026#34;); return 1; } int main() { printf(\u0026#34;Parent [%5d] - start a container!\\n\u0026#34;, getpid()); int container_pid = clone(container_main, container_stack+STACK_SIZE, CLONE_NEWUTS | CLONE_NEWIPC | CLONE_NEWPID | CLONE_NEWNS | SIGCHLD, NULL); waitpid(container_pid, NULL, 0); printf(\u0026#34;Parent - container stopped!\\n\u0026#34;); return 0; } \u0026lt;/container_id\u0026gt;\u0026lt;/unistd.h\u0026gt;\u0026lt;/signal.h\u0026gt;\u0026lt;/sched.h\u0026gt;\u0026lt;/stdio.h\u0026gt;\u0026lt;/sys\u0026gt;\u0026lt;/sys\u0026gt;\u0026lt;/sys\u0026gt; sudo运行上面的程序，你会看到下面的挂载信息以及一个所谓的“镜像”：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 derios@ubuntu:~$ sudo ./mount Parent [ 4517] - start a container! Container [ 1] - inside the container! root@container:/# mount proc on /proc type proc (rw,relatime) sysfs on /sys type sysfs (rw,relatime) none on /tmp type tmpfs (rw,relatime) udev on /dev type devtmpfs (rw,relatime,size=493976k,nr_inodes=123494,mode=755) devpts on /dev/pts type devpts (rw,relatime,mode=600,ptmxmode=000) tmpfs on /run type tmpfs (rw,relatime) /dev/disk/by-uuid/18086e3b-d805-4515-9e91-7efb2fe5c0e2 on /etc/hosts type ext4 (rw,relatime,errors=remount-ro,data=ordered) /dev/disk/by-uuid/18086e3b-d805-4515-9e91-7efb2fe5c0e2 on /etc/hostname type ext4 (rw,relatime,errors=remount-ro,data=ordered) /dev/disk/by-uuid/18086e3b-d805-4515-9e91-7efb2fe5c0e2 on /etc/resolv.conf type ext4 (rw,relatime,errors=remount-ro,data=ordered) root@container:/# ls /bin /usr/bin /bin: bash chmod echo hostname less more mv ping rm sleep tail test top truncate uname cat chown grep ip ln mount nc ps sed tabs tar timeout touch tty which chgrp cp gzip kill ls mountpoint netstat pwd sh tac tee toe tr umount /usr/bin: awk env groups head id mesg sort strace tail top uniq vi wc xargs User Namespace User Namespace 主要用到了CLONE_NEWUSER参数，当我们使用这个参数以后，在内部看到的UID和GID和外部就不一样了，默认为65534。因为容器找不到其真正的UID，因此设置成了最大的UID（/proc/sys/kernel/overflowuid）。\n要把容器中的uid和真实系统的uid给映射在一起，需要修改 /proc//uid_map 和 /proc//gid_map 这两个文件。这两个文件的格式为：\nID-inside-ns ID-outside-ns length\n第一个字段ID-inside-ns表示在容器显示的UID或GID， 第二个字段ID-outside-ns表示容器外映射的真实的UID或GID。 第三个字段表示映射的范围，一般填1，表示一一对应。 比如，把真实的uid=1000映射成容器内的uid=0\n1 2 $ cat /proc/2465/uid_map 0 1000 1 再比如下面的示例：表示把namespace内部从0开始的uid映射到外部从0开始的uid，其最大范围是无符号32位整形：\n1 2 $ cat /proc/$$/uid_map 0 0 4294967295 写这两个文件的进程需要这个namespace中的CAP_SETUID (CAP_SETGID)权限（可参看Capabilities） 写入的进程必须是此user namespace的父或子的user namespace进程。 另外需要满如下条件之一：1）父进程将effective uid/gid映射到子进程的user namespace中，2）父进程如果有CAP_SETUID/CAP_SETGID权限，那么它将可以映射到父进程中的任一uid/gid。 User Namespace是以普通用户运行，但是别的Namespace需要root权限，那么，如果我要同时使用多个Namespace，该怎么办呢？一般来说，我们先用一般用户创建User Namespace，然后把这个一般用户映射成root，在容器内用root来创建其它的Namesapce。\nNetwork Namespace 在linux中，一般用ip命令创建network namespace。不过在docker源码中并没有使用ip，而是自己实现了ip命令的一些内容。在这还是用ip命令描述一下做了啥。\n首先我们来看一个图，这个图是Docker在host主机上的网络示意图\n实际上图还是有问题的，因为Docker也可以运行在虚拟机中，所以所谓的物理网卡其实也就是一个有能够路由的IP的网卡。\n图中Docker用了一个私有的网段: 172.40.1.0，此外docker还会使用10.0.0.0以及192.168.0.0两个私有网段。如果你机器的路由表配置了(占用)所有的私有网段，那么docker就会无法启动。\n启动docker以后，可以使用ip link show和ip addr show来查看目前宿主机的网络情况。这里我在minikube容器里执行了指令:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 root@minikube:/# ip link show 1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 2: tunl0@NONE: \u0026lt;NOARP\u0026gt; mtu 1480 qdisc noop state DOWN mode DEFAULT group default qlen 1000 link/ipip 0.0.0.0 brd 0.0.0.0 3: ip6tnl0@NONE: \u0026lt;NOARP\u0026gt; mtu 1452 qdisc noop state DOWN mode DEFAULT group default qlen 1000 link/tunnel6 :: brd :: 4: docker0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default link/ether 02:42:2e:11:a4:ae brd ff:ff:ff:ff:ff:ff 6: vetha68cfee@if5: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue master docker0 state UP mode DEFAULT group default link/ether 46:2d:cf:22:79:9f brd ff:ff:ff:ff:ff:ff link-netnsid 1 12: veth8b65072@if11: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue master docker0 state UP mode DEFAULT group default link/ether 3e:fb:54:6d:ae:1e brd ff:ff:ff:ff:ff:ff link-netnsid 3 14: veth61918b0@if13: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue master docker0 state UP mode DEFAULT group default link/ether d2:68:38:76:73:c9 brd ff:ff:ff:ff:ff:ff link-netnsid 4 18: vethd7fa219@if17: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue master docker0 state UP mode DEFAULT group default link/ether 1e:14:79:68:f1:50 brd ff:ff:ff:ff:ff:ff link-netnsid 5 20: eth0@if21: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default link/ether 02:42:c0:a8:31:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0 21: veth3b477c9@if19: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue master docker0 state UP mode DEFAULT group default link/ether 7e:b1:5d:53:00:ff brd ff:ff:ff:ff:ff:ff link-netnsid 2 23: veth265059d@if22: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue master docker0 state UP mode DEFAULT group default link/ether 4a:22:a4:05:79:e1 brd ff:ff:ff:ff:ff:ff link-netnsid 6 可以看到有docker0还有一些虚拟网卡。\n为了能够做成这样，我又google了一段代码:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 ## 首先，我们先增加一个网桥lxcbr0，模仿docker0 brctl addbr lxcbr0 brctl stp lxcbr0 off ifconfig lxcbr0 192.168.10.1/24 up #为网桥设置IP地址 ## 接下来，我们要创建一个network namespace - ns1 # 增加一个namesapce 命令为 ns1 （使用ip netns add命令） ip netns add ns1 # 激活namespace中的loopback，即127.0.0.1（使用ip netns exec ns1来操作ns1中的命令） ip netns exec ns1 ip link set dev lo up ## 然后，我们需要增加一对虚拟网卡 # 增加一个pair虚拟网卡，注意其中的veth类型，其中一个网卡要按进容器中 ip link add veth-ns1 type veth peer name lxcbr0.1 # 把 veth-ns1 按到namespace ns1中，这样容器中就会有一个新的网卡了 ip link set veth-ns1 netns ns1 # 把容器里的 veth-ns1改名为 eth0 （容器外会冲突，容器内就不会了） ip netns exec ns1 ip link set dev veth-ns1 name eth0 # 为容器中的网卡分配一个IP地址，并激活它 ip netns exec ns1 ifconfig eth0 192.168.10.11/24 up # 上面我们把veth-ns1这个网卡按到了容器中，然后我们要把lxcbr0.1添加上网桥上 brctl addif lxcbr0 lxcbr0.1 # 为容器增加一个路由规则，让容器可以访问外面的网络 ip netns exec ns1 ip route add default via 192.168.10.1 # 在/etc/netns下创建network namespce名称为ns1的目录， # 然后为这个namespace设置resolv.conf，这样，容器内就可以访问域名了 mkdir -p /etc/netns/ns1 echo \u0026#34;nameserver 8.8.8.8\u0026#34; \u0026gt; /etc/netns/ns1/resolv.conf 上述就是docker网络的原理，但是有几点要注意的\ndocker的resolv.conf（配置系统DNS解析器）没有采取这样的方式，而是采取类似上述mount namespace的方式 另外，docker采用进程的PID来做network namepspace的名称 我们原理了解了，甚至可以给正在运行的docker容器新增网卡:\n1 2 3 4 5 6 7 ip link add peerA type veth peer name peerB brctl addif docker0 peerA ip link set peerA up ip link set peerB netns ${container-pid} ip netns exec ${container-pid} ip link set dev peerB name eth1 ip netns exec ${container-pid} ip link set eth1 up ; ip netns exec ${container-pid} ip addr add ${ROUTEABLE_IP} dev eth1 ; 上述指令即为一个正在运行的docker容器新增一个eth1网卡，以及给了一个可以被外部访问到的IP静态IP地址。\n这种做法，需要把外部的物理网卡设置为混杂模式(Promiscuous Model)，也就是网卡接受所有流过网卡的帧(数据包)，包括那些不是发给本机的包，不验证MAC地址。这样这个eth1网卡就会向外部通过ARP地址解析协议发送自己的MAC地址，然后外部的交换机就会把这个IP地址的包转到物理网卡上。因为网卡工作在混杂模式，因此eth1就能收到相关的数据。如果发现是自己的数据，那么就接受，这样Docker容器的网络就与外部相通。\n其实不管是Docker的NAT模式，还是混杂模式都会存在性能问题。NAT很明显转发(NAT转换)就有开销，而混杂模式下，网卡收到的负载都会完全交给所有的虚拟网卡，所以想想哪怕一个网卡没有数据，也会被其他网卡的数据影响。\n因此这两种方式都不算完美，真正解决这样网络问题的是VLAN技术。因此Google的开发者为linux内核实现了一个IPVLAN驱动，基本为Docker量身定制。\nNamespace文件 整理完了linux namespace的玩法，在看一下ns的文件。\n我们再运行一遍PID Namepace篇章中的pid.mnt程序(mount proc)，然后不退出:\n1 2 3 4 $ sudo ./pid.mnt [sudo] password for derios: Parent [ 4599] - start a container! Container [ 1] - inside the container! 打开另外一个shell看一下父子进程的PID:\n1 2 derios@ubuntu:~$ pstree -p 4599 pid.mnt(4599)───bash(4600) 我们可以到proc下（/proc//ns）查看进程的各个namespace的id（内核版本需要3.8以上），下面是父进程的：\n1 2 3 4 5 6 7 8 derios@ubuntu:~$ sudo ls -l /proc/4599/ns total 0 lrwxrwxrwx 1 root root 0 4月 7 22:01 ipc -\u0026gt; ipc:[4026531839] lrwxrwxrwx 1 root root 0 4月 7 22:01 mnt -\u0026gt; mnt:[4026531840] lrwxrwxrwx 1 root root 0 4月 7 22:01 net -\u0026gt; net:[4026531956] lrwxrwxrwx 1 root root 0 4月 7 22:01 pid -\u0026gt; pid:[4026531836] lrwxrwxrwx 1 root root 0 4月 7 22:01 user -\u0026gt; user:[4026531837] lrwxrwxrwx 1 root root 0 4月 7 22:01 uts -\u0026gt; uts:[4026531838] 下面是子进程的:\n1 2 3 4 5 6 7 8 derios@ubuntu:~$ sudo ls -l /proc/4600/ns total 0 lrwxrwxrwx 1 root root 0 4月 7 22:01 ipc -\u0026gt; ipc:[4026531839] lrwxrwxrwx 1 root root 0 4月 7 22:01 mnt -\u0026gt; mnt:[4026532520] lrwxrwxrwx 1 root root 0 4月 7 22:01 net -\u0026gt; net:[4026531956] lrwxrwxrwx 1 root root 0 4月 7 22:01 pid -\u0026gt; pid:[4026532522] lrwxrwxrwx 1 root root 0 4月 7 22:01 user -\u0026gt; user:[4026531837] lrwxrwxrwx 1 root root 0 4月 7 22:01 uts -\u0026gt; uts:[4026532521] 仔细看一下区别，发现ipc, net, user为相同ID，而mnt, pid, uts都不同。如果两个进程指向的namespace编号相同，则说明它俩在同一个namespace下，否则就不在。（如果读者你想验证，docker exec -it \u0026lt;container name\u0026gt; bash到一个容器里，top找两个进程，然后cat一下proc中对应PID的ns即可）\n这些文件还有另一个作用，那就是，一旦这些文件被打开，只要其fd被占用着，那么就算PID所属的所有进程都已经结束，创建的namespace也会一直存在。比如：我们可以通过：mount –bind /proc/4600/ns/uts ~/uts 来hold这个namespace。\n我们在最开始点了一下setns系统调用，函数声明如下:\n1 int setns(int fd, int nstype); 其中第一个参数就是一个fd，也就是一个open()系统调用打开了上述文件后返回的fd，比如：\n1 2 fd = open(\u0026#34;/proc/4600/ns/nts\u0026#34;, O_RDONLY); // 获取namespace文件描述符 setns(fd, 0); // 加入新的namespace ","permalink":"http://localhost:64667/posts/programming/cloud-computing/docker-namespace/","summary":"\u003cp\u003e容器技术出现已经很久，只不过Docker容器平台的出现它变火了。Docker是第一个让容器能在不同机器之间移植的系统，它简化了打包应用的流程，也简化了打包应用的库和各种依赖。思考下整个OS的file system能直接被打包成一个简单的可移植的包，一开始的时候概念上还是很有趣的。\u003c/p\u003e\n\u003cp\u003e有时候我认为自己的阅读比较碎片化(\u003cdel\u003eshort-term memory越来越少\u003c/del\u003e)，所以我想把之前学习容器知识的一些基础技术再整理出来，也算是给自己学习的反馈。这个基础系列从Linux Namespace开始，后续会陆续介绍比如cgroup、aufs、devicemapper等技术。\u003c/p\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://lwn.net/Articles/531114/\"\u003eNamespace in operation\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://man7.org/linux/man-pages/man7/namespaces.7.html\"\u003eLinux namespace man page\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://blog.jtlebi.fr/2013/12/22/introduction-to-linux-namespaces-part-1-uts/\"\u003eIntroduction to linux namespace\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"什么是namespace\"\u003e什么是Namespace\u003c/h2\u003e\n\u003cp\u003e简单来说，linux namespace是Linux提供的一种内核级别环境隔离的方法。在早期的Unix中，提供了一种叫做chroot的系统调用：通过修改root目录把用户关到一个特定的目录下面。这种就是简单的隔离方式，也就是chroot内部的file system无法访问外部的内容。Linux Namespace在此基础之上，提供了对UTS、IPC、mount、network、PID、User等隔离机制。\u003c/p\u003e\n\u003cp\u003e这里可以简单举例，比如Linux的超级父进程的PID为1，如果我们可以把用户的进程空间关到某个进程分支之下，并且像chroot那样能够让下面的进程看到那个超级父进程的PID为1，而不同PID Namespace中的进程无法看到彼此，这样就能达到进程隔离。\u003c/p\u003e\n\u003cp\u003eLinux Namespace有以下的种类，供给后续参考（刚看有个印象就行）：\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e分类\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e系统调用参数\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e相关内核版本\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003eMount namespaces\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCLONE_NEWNS\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ca href=\"http://lwn.net/2001/0301/a/namespaces.php3\"\u003eLinux 2.4.19\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003eUTS namespaces\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCLONE_NEWUTS\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ca href=\"http://lwn.net/Articles/179345/\"\u003eLinux 2.6.19\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003eIPC namespaces\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCLONE_NEWIPC\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ca href=\"http://lwn.net/Articles/187274/\"\u003eLinux 2.6.19\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003ePID namespaces\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCLONE_NEWPID\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ca href=\"http://lwn.net/Articles/259217/\"\u003eLinux 2.6.24\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003eNetwork namespaces\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCLONE_NEWNET\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ca href=\"http://lwn.net/Articles/219794/\"\u003e始于Linux 2.6.24 完成于 Linux 2.6.29\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003eUser namespaces\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCLONE_NEWUSER\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ca href=\"http://lwn.net/Articles/528078/\"\u003e始于 Linux 2.6.23 完成于 Linux 3.8)\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e其主要涉及到三个系统调用：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eclone()\u003c/code\u003e： 实现线程的系统调用，用来创建新的线程，并可通过涉及上述参数做到隔离\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eunshare()\u003c/code\u003e： 让某一个线程脱离某namespace\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esetns()\u003c/code\u003e: 把某一个线程加到某namespace\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e如果读者你想看具体的实例，请自己man一下(关注一下自己的linux虚拟机内核)，或者google一下，我这里贴一个\u003ccode\u003eclone()\u003c/code\u003e的source code：\u003c/p\u003e","title":"Docker Fundamentals: Namespace"},{"content":"概述 最近在看kubernetes的kubectl部分源码，记录一下其中用到的visitor编程模式(实际上kubectl主要用到了builder和visitor)。visitor模式是将算法和操作对象结构分离的一种方法。换句话说，这样的分离能够在不修改对象结构的情况下向原有对象新增操作，是符合开闭原则的。这个文章以一些例子去讨论kubectl中到底如何玩的。\n从一个例子出发 写一个简单的Visitor模式示例：\n我们的代码中有一个Visitor的函数定义，还有一个Shape接口，其需要使用 Visitor函数做为参数 我们的实例的对象 Circle和 Rectangle实现了 Shape 的接口的 accept() 方法，这个方法就是等外面给我传递一个Visitor。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;encoding/xml\u0026#34; \u0026#34;fmt\u0026#34; ) type Visitor func(shape Shape) type Shape interface { accept(Visitor) } type Circle struct { Radius int } func (c Circle) accept(v Visitor) { v(c) } type Rectangle struct { Width, Heigh int } func (r Rectangle) accept(v Visitor) { v(r) } 然后，我们实现两个Visitor，一个是用来做JSON序列化的，另一个是用来做XML序列化的:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 func JsonVisitor(shape Shape) { bytes, err := json.Marshal(shape) if err != nil { panic(err) } fmt.Println(string(bytes)) } func XmlVisitor(shape Shape) { bytes, err := xml.Marshal(shape) if err != nil { panic(err) } fmt.Println(string(bytes)) } 下面是我们的使用Visitor这个模式的代码：\n1 2 3 4 5 6 7 8 9 func main() { c := Circle{10} r := Rectangle{100, 200} shapes := []Shape{c, r} for _, s := range shapes { s.accept(JsonVisitor) s.accept(XmlVisitor) } } 写这些代码的目的是为了解耦数据结构和算法，其实用Strategy模式也可以做到，在模式上也更简单点。但是需要注意的一点：在有些情况下，多个Visitor是来访问一个数据结构的不同部分，这种情况下，数据结构有点像一个数据库，而各个Visitor会成为一个个小应用。那么kubectl无疑是这样的场景。\nk8s一些背景 在博客的kubernetes \u0026amp; docker的专栏里，介绍了k8s的一些基本知识。其实对于k8s来说，其抽象出了很多资源Resource：Pod，ReplicaSet，ConfigMap，Volumes，Namespace, Roles\u0026hellip;等等。而这些构成了k8s的数据模型( Kubernetes Resources 地图)\nkubectl为k8s的客户端命令，其对接Kubernetes API Server，开发和运维通过此去和k8s进行交互。而API Server则联系到每个节点的kubelet控制每个节点。\nkubectl主要的工作就是处理用户提交的例如：命令行参数、yaml/json文件等。将用户提交的这些组织成数据结构体，发送给API Server。\n源码：src/k8s.io/cli-runtime/pkg/resource/visitor.go (链接)\n当然kubectl的源码复杂，用简单的话阐述其基本原理就是：它从命令行和yaml文件中获取信息，通过Builder模式并把其转成一系列的资源，最后用 Visitor 模式模式来迭代处理这些Reources。\n我先用一个小的例子来说明，忽略掉很多复杂的代码逻辑\nkubectl的实现 Visitor模式的定义 首先，kubectl 主要是用来处理 Info结构体，下面是相关的定义：\n1 2 3 4 5 6 7 8 9 10 11 12 type VisitorFunc func(*Info, error) error type Visitor interface { Visit(VisitorFunc) error } type Info struct { Namespace string Name string OtherThings string } func (info *Info) Visit(fn VisitorFunc) error { return fn(info, nil) } 上述拆解一下：\n有一个VisitorFunc函数类型的定义 Visitor接口，需要实现一个Visit(VisitorFunc) error的方法 最后，为Info实现Visitor接口中的Visit()方法，其就是直接调用传进来的fn 接下来再定义几种不同类型的Visitor\nName Visitor 这个Visitor 主要是用来访问 Info 结构中的 Name 和 NameSpace 成员\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 type NameVisitor struct { visitor Visitor } func (v NameVisitor) Visit(fn VisitorFunc) error { return v.visitor.Visit(func(info *Info, err error) error { fmt.Println(\u0026#34;NameVisitor() before call function\u0026#34;) err = fn(info, err) if err == nil { fmt.Printf(\u0026#34;==\u0026gt; Name=%s, NameSpace=%s\\n\u0026#34;, info.Name, info.Namespace) } fmt.Println(\u0026#34;NameVisitor() after call function\u0026#34;) return err }) } 拆解代码，可以看到:\n声明了一个NameVistor结构体，多态得加了一个Visitor接口成员 实现Visit()方法时，调用内部Visitor的Visit()方法，这也是一种修饰器模式。 Other Visitor 这个Visitor主要用来访问 Info 结构中的 OtherThings 成员\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 type OtherThingsVisitor struct { visitor Visitor } func (v OtherThingsVisitor) Visit(fn VisitorFunc) error { return v.visitor.Visit(func(info *Info, err error) error { fmt.Println(\u0026#34;OtherThingsVisitor() before call function\u0026#34;) err = fn(info, err) if err == nil { fmt.Printf(\u0026#34;==\u0026gt; OtherThings=%s\\n\u0026#34;, info.OtherThings) } fmt.Println(\u0026#34;OtherThingsVisitor() after call function\u0026#34;) return err }) } Log Visitor 1 2 3 4 5 6 7 8 9 10 11 type LogVisitor struct { visitor Visitor } func (v LogVisitor) Visit(fn VisitorFunc) error { return v.visitor.Visit(func(info *Info, err error) error { fmt.Println(\u0026#34;LogVisitor() before call function\u0026#34;) err = fn(info, err) fmt.Println(\u0026#34;LogVisitor() after call function\u0026#34;) return err }) } 如何使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 func main() { info := Info{} var v Visitor = \u0026amp;info v = LogVisitor{v} v = NameVisitor{v} v = OtherThingsVisitor{v} loadFile := func(info *Info, err error) error { info.Name = \u0026#34;Hao Chen\u0026#34; info.Namespace = \u0026#34;MegaEase\u0026#34; info.OtherThings = \u0026#34;We are running as remote team.\u0026#34; return nil } v.Visit(loadFile) } 拆解上述代码：\nVisitor为嵌套式的 LoadFile模拟读取文件数据 最后一条v.Visit()激活上述流程 上述的代码输出如下:\n1 2 3 4 5 6 7 8 LogVisitor() before call function NameVisitor() before call function OtherThingsVisitor() before call function ==\u0026gt; OtherThings=We are running as remote team. OtherThingsVisitor() after call function ==\u0026gt; Name=Hao Chen, NameSpace=MegaEase NameVisitor() after call function LogVisitor() after call function 我们可以看到，这种做法实现了几点功能：\n解耦了数据和算法程序 使用修饰器模式 有pipeline模式的味道 我们接下来再以修饰器模式重构下上述代码\nVisitor修饰器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 type DecoratedVisitor struct { visitor Visitor decorators []VisitorFunc } func NewDecoratedVisitor(v Visitor, fn ...VisitorFunc) Visitor { if len(fn) == 0 { return v } return DecoratedVisitor{v, fn} } // Visit implements Visitor func (v DecoratedVisitor) Visit(fn VisitorFunc) error { return v.visitor.Visit(func(info *Info, err error) error { if err != nil { return err } if err := fn(info, nil); err != nil { return err } for i := range v.decorators { if err := v.decorators[i](info, nil); err != nil { return err } } return nil }) } 上述代码，实际上做了以下几点事情:\n以DecoratedVisitor结构存放所有的VisitorFunc NewDecoratedVisitor把所有的VisitorFunc传进去，构造DecoratedVisitor对象 DecoratedVisitor实现了Visit()方法，里面实际上就是个for-loop，以非嵌套的方式调用所有的VisitorFunc 所以我们可以这么使用这个重构：\n1 2 3 4 info := Info{} var v Visitor = \u0026amp;info v = NewDecoratedVisitor(v, NameVisitor, OtherVisitor) v.Visit(LoadFile) 这样看上去能简单很多。\n基本上如果读懂了上述的逻辑，kubectl的代码也差不多能看明白。\n","permalink":"http://localhost:64667/posts/programming/design-pattern/go-visitor/","summary":"\u003ch2 id=\"概述\"\u003e概述\u003c/h2\u003e\n\u003cp\u003e最近在看kubernetes的\u003ccode\u003ekubectl\u003c/code\u003e部分源码，记录一下其中用到的visitor编程模式(实际上\u003ccode\u003ekubectl\u003c/code\u003e主要用到了builder和visitor)。visitor模式是将\u003cstrong\u003e算法和操作对象结构分离\u003c/strong\u003e的一种方法。换句话说，这样的分离能够在不修改对象结构的情况下向原有对象新增操作，是符合开闭原则的。这个文章以一些例子去讨论\u003ccode\u003ekubectl\u003c/code\u003e中到底如何玩的。\u003c/p\u003e\n\u003ch2 id=\"从一个例子出发\"\u003e从一个例子出发\u003c/h2\u003e\n\u003cp\u003e写一个简单的Visitor模式示例：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e我们的代码中有一个\u003ccode\u003eVisitor\u003c/code\u003e的函数定义，还有一个\u003ccode\u003eShape\u003c/code\u003e接口，其需要使用 \u003ccode\u003eVisitor\u003c/code\u003e函数做为参数\u003c/li\u003e\n\u003cli\u003e我们的实例的对象 \u003ccode\u003eCircle\u003c/code\u003e和 \u003ccode\u003eRectangle\u003c/code\u003e实现了 \u003ccode\u003eShape\u003c/code\u003e 的接口的 \u003ccode\u003eaccept()\u003c/code\u003e 方法，这个方法就是等外面给我传递一个Visitor。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s\"\u003e\u0026#34;encoding/json\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s\"\u003e\u0026#34;encoding/xml\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003eVisitor\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eshape\u003c/span\u003e \u003cspan class=\"nx\"\u003eShape\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003eShape\u003c/span\u003e \u003cspan class=\"kd\"\u003einterface\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eaccept\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eVisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003eCircle\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003eRadius\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ec\u003c/span\u003e \u003cspan class=\"nx\"\u003eCircle\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eaccept\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ev\u003c/span\u003e \u003cspan class=\"nx\"\u003eVisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003eRectangle\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003eWidth\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eHeigh\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e \u003cspan class=\"nx\"\u003eRectangle\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eaccept\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ev\u003c/span\u003e \u003cspan class=\"nx\"\u003eVisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e然后，我们实现两个Visitor，一个是用来做JSON序列化的，另一个是用来做XML序列化的:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003eJsonVisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eshape\u003c/span\u003e \u003cspan class=\"n\"\u003eShape\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003ebytes\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMarshal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eshape\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003ebytes\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003eXmlVisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eshape\u003c/span\u003e \u003cspan class=\"n\"\u003eShape\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003ebytes\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003exml\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMarshal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eshape\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003ebytes\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e下面是我们的使用Visitor这个模式的代码：\u003c/p\u003e","title":"Go编程模式：Visitor（k8s）"},{"content":"使用minikube构建本地单节点k8s集群 minikube ssh kubectl cluster-info kubectl get nodes #查看节点信息 kubectl describe node minikube #详细信息 多节点k8s集群，使用Google K8s Engine 构建方式看GKE官网即可\nk8s初步使用 kubectl run kubia \u0026ndash;image=derios/kubia \u0026ndash;port=8080 \u0026ndash;generator=run/v1\n--image=derios/kubia代表要运行的容器镜像 这里的--generator会被废弃，其含义指代的是创建一个ReplicationController而不是Deployment。 kubectl apply -f 更常用 kubectl get pods kubectl get pods -o wide 显示pod ip和pod的节点 如果使用GWE，可以访问集群的dashborad: kubectl clusert-info获取地址 gcloud container clusters describe kubia | grep -E \u0026ldquo;(username|password):\u0026ldquo;获取用户名和密码\n如果仅仅使用minikube，则如下不需要任何凭证即可访问: 1 minikube dashboard Namespace相关操作 1 kubectl config set-context --current --namespace=my-namespace 创建服务对象，访问Web应用 如果使用minikube或者kubeadm等自定义k8s，loadbalancer是没有集成的，需要AWS或者Google Cloud。最好使用NodePort或者Ingress Controller。如果真要用minikube, 可以使用minikube tunnel解决, 或者minikube service kubia-http\nkubectl expose rc/po/svc kubia \u0026ndash;type=LoadBalancer \u0026ndash;name kubia-http创建出的service介于pod和node之间, kubectl get services可以查看\n如果没有外部IP地址，因为k8s运行的云基础设施新建lb需要一段时间，lb启动以后应该会显示\nReplicationController的角色 复制pod，replica扩缩 kubectl scale rc kubia --replicas=3 可以将rc下的pods方便进行扩缩容 为何需要service 解决不断变化的pod IP问题，以及在一个固定的IP和端口上对外暴露多个pod。\n当一个service被创建，会得到一个静态IP，在service的生命周期这个IP不会被改变，service会确保其中提个pod接受连接，而非关注这个pod运行在何处.\nk8s的pod pod不一定要包含多个容器，单独容器的pod也是很常见的。如果pod包含多个容器，那么这些容器都工作在同一个工作节点上，pod是不能跨多个工作节点工作的。\npod概念的提出，是因为我们不能把多个进程聚集在一个单独的容器中，我们需要另一种更为高级的结构将容器绑定在一起，并把他们欧威一个单元进行管理。\n一个Pod下的所有容器都在相同的额network和UTS命名空间下运行，所以共享相同的主机名和网络接口，也能够通过IPC进行通信，甚至在最新的k8s和docker版本下，能共享相同的PID命名空间。\n容器如何共享相同IP和端口空间 由于pod中的容器运行于相同Namespace命名空间，所以他们共享相同的IP地址和端口空间。这意味着在同一个pod中的容器运行的多个线程不能绑定到相同的端口号，否则会冲突。此外，他们还有相同的loopback网络几口，所以容器可以通过localhost和同一个pod中的其他容器进行通信。\n平坦网络 k8s集群中所有pod都在同一个共享网络地址空间中，也就是说每个pod都可以通过其他pod的IP地址来实现相互访问，表示他们之间没有NAT(网络地址转换)网管。当两个pod彼此之间发送网络数据包时，都把对方的实际IP地址看作数据包中的源IP。\n因此可以看到，pod就是逻辑主机，行为和非容器世界中的物理主机或者虚拟机相似。运行在同一个pod中的进程和运行在同一物理机或者虚拟机上的进程类似，只是每个进程封装在一个容器里。\n通过pod合理管理容器 一个由前端应用服务器和后端数据库组成的多层应用程序，应该讲其配置为单个pod还是两个pod呢？\n把多层应用分散到多个pod中 一个pod下的所有容器运行在一起，而web服务器和数据库真的要在同一台计算机上运行吗？明显是否定的。而且如何k8s集群节点多了，如果只有一个单独的pod，其资源利用率也很低。\n基于扩缩容考虑而分隔到多个pod中 pod是扩缩容的基本单位，k8s不能横向扩缩单个容器，而只能扩缩整个pod，所以明显web服务器和数据库放在一起是不对的。\n而且数据库这种有状态的服务器，比无状态的web服务器更加难扩展，所以如果要单独扩缩容器，这个容器必须明确地部署在单独的pod当中\n在pod中使用多个容器的时机 一般来说，常见场景是应用由一个主进程和多个辅助进程组成，也就是这个容器组是紧密耦合的。举例就是，pod中的主容器是仅仅服务于每个目录中文件的Web服务器，另一个sidecar容器定期从外部资源下载内容并将其存储在Web服务器目录里。这种情形需要使用k8s的Volume，把其挂在到两个容器里。\nsidecar容器包括：日志轮转器、收集器、数据处理器、通信适配器等等\n因此容器如何分组到pod这个问题，我们需要问以下的问题：\n它们是否需要一起运行还是可以在不同的主机上运行？ 它们代表的是一个整体还是相互独立的组件？ 它们必须一起扩缩容还是可以分别单独进行？ 以YAML或者JSON创建pod 好处：kubectl run局限性很多，比如属性配置很有限，而资源配置的方式除了更方便定义k8s资源对象，还能把它们存储在版本控制系统中。\n注意参考: k8s api reference\n检查现有pod的YAML描述 kubectl get po kubia-zxzij -o yaml\napiVersion: v1 kind: Pod metadata: creationTimestamp: \u0026#34;2021-03-31T03:00:40Z\u0026#34; generateName: kubia- labels: app: kubia managedFields: - apiVersion: v1 fieldsType: FieldsV1 fieldsV1: f:metadata: f:generateName: {} f:labels: .: {} f:app: {} f:ownerReferences: .: {} k:{\u0026#34;uid\u0026#34;:\u0026#34;4b78e019-3753-40a1-998c-0d0ec4af9f29\u0026#34;}: .: {} f:apiVersion: {} f:blockOwnerDeletion: {} f:controller: {} f:kind: {} f:name: {} f:uid: {} f:spec: f:containers: k:{\u0026#34;name\u0026#34;:\u0026#34;kubia\u0026#34;}: .: {} f:image: {} f:imagePullPolicy: {} f:name: {} f:ports: .: {} k:{\u0026#34;containerPort\u0026#34;:90,\u0026#34;protocol\u0026#34;:\u0026#34;TCP\u0026#34;}: .: {} f:containerPort: {} f:protocol: {} f:resources: {} f:terminationMessagePath: {} f:terminationMessagePolicy: {} f:dnsPolicy: {} f:enableServiceLinks: {} f:restartPolicy: {} f:schedulerName: {} f:securityContext: {} f:terminationGracePeriodSeconds: {} manager: kube-controller-manager operation: Update time: \u0026#34;2021-03-31T03:00:40Z\u0026#34; - apiVersion: v1 fieldsType: FieldsV1 fieldsV1: f:status: f:conditions: k:{\u0026#34;type\u0026#34;:\u0026#34;ContainersReady\u0026#34;}: .: {} f:lastProbeTime: {} f:lastTransitionTime: {} f:status: {} f:type: {} k:{\u0026#34;type\u0026#34;:\u0026#34;Initialized\u0026#34;}: .: {} f:lastProbeTime: {} f:lastTransitionTime: {} f:status: {} f:type: {} k:{\u0026#34;type\u0026#34;:\u0026#34;Ready\u0026#34;}: .: {} f:lastProbeTime: {} f:lastTransitionTime: {} f:status: {} f:type: {} f:containerStatuses: {} f:hostIP: {} f:phase: {} f:podIP: {} f:podIPs: .: {} k:{\u0026#34;ip\u0026#34;:\u0026#34;172.17.0.7\u0026#34;}: .: {} f:ip: {} f:startTime: {} manager: kubelet operation: Update time: \u0026#34;2021-03-31T03:00:47Z\u0026#34; name: kubia-2r2pb namespace: default ownerReferences: - apiVersion: v1 blockOwnerDeletion: true controller: true kind: ReplicationController name: kubia uid: 4b78e019-3753-40a1-998c-0d0ec4af9f29 resourceVersion: \u0026#34;11025\u0026#34; selfLink: /api/v1/namespaces/default/pods/kubia-2r2pb uid: 342307fe-f6d8-4201-ba02-0210cd75d0a8 spec: containers: - image: derios/kubia imagePullPolicy: Always name: kubia ports: - containerPort: 90 protocol: TCP resources: {} terminationMessagePath: /dev/termination-log terminationMessagePolicy: File volumeMounts: - mountPath: /var/run/secrets/kubernetes.io/serviceaccount name: default-token-whxzx readOnly: true dnsPolicy: ClusterFirst enableServiceLinks: true nodeName: minikube preemptionPolicy: PreemptLowerPriority priority: 0 restartPolicy: Always schedulerName: default-scheduler securityContext: {} serviceAccount: default serviceAccountName: default terminationGracePeriodSeconds: 30 tolerations: - effect: NoExecute key: node.kubernetes.io/not-ready operator: Exists tolerationSeconds: 300 - effect: NoExecute key: node.kubernetes.io/unreachable operator: Exists tolerationSeconds: 300 volumes: - name: default-token-whxzx secret: defaultMode: 420 secretName: default-token-whxzx status: conditions: - lastProbeTime: null lastTransitionTime: \u0026#34;2021-03-31T03:00:40Z\u0026#34; status: \u0026#34;True\u0026#34; type: Initialized - lastProbeTime: null lastTransitionTime: \u0026#34;2021-03-31T03:00:47Z\u0026#34; status: \u0026#34;True\u0026#34; type: Ready - lastProbeTime: null lastTransitionTime: \u0026#34;2021-03-31T03:00:47Z\u0026#34; status: \u0026#34;True\u0026#34; type: ContainersReady - lastProbeTime: null lastTransitionTime: \u0026#34;2021-03-31T03:00:40Z\u0026#34; status: \u0026#34;True\u0026#34; type: PodScheduled containerStatuses: - containerID: docker://1cce1d07039838f1f4d825d088fca52b54b15808efebf20d1f38cc2952a65ebd image: derios/kubia:latest imageID: docker-pullable://derios/kubia@sha256:7aa603e50514206f8d40126520409a6814001c1bae68b9f286cca9c1ca271f7a lastState: {} name: kubia ready: true restartCount: 0 started: true state: running: startedAt: \u0026#34;2021-03-31T03:00:46Z\u0026#34; hostIP: 192.168.49.2 phase: Running podIP: 172.17.0.7 podIPs: - ip: 172.17.0.7 qosClass: BestEffort startTime: \u0026#34;2021-03-31T03:00:40Z\u0026#34; 虽然看着比较复杂，主要包含了k8s对象/资源类型、k8s API版本、pod元数据、pod规格和内容、pod和内部容器的详细状态等。\npod定义的主要部分 metadata: 名称、命名空间、标签和关于该容器的其他信息 spec：包含pod内容的实际说明，例如pod的容器、卷和其他数据 status: 包含运行中的pod的当前信息，比如pod所处的条件、每个容器的描述和状态，以及内部IP和其他基本信息 创建新的pod的时候，不需要提供status部分，这只是运行时数据。实际上深究每个属性的意义不是很大，我们需要关注创建pod的最基本信息。\n创建一个简单的YAML描述 1 2 3 4 5 6 7 8 9 10 11 apiVersion: v1 kind: Pod metadata: name: kubia-manual spec: containers: - image: derios/kubia name: kubia ports: - containerPort: 8080 protocol: TCP 可以用kubectl explain pods、kubectl explain pod.spec之类去看资源定义\n用kubectl create来创建pod 1 $ kubectl create -f kubia-manual.yaml 1 $ kubectl get pods 查看应用程序日志 小型node.js应用把日志记录到进程的标准输出，容器化的应用程序通常把日志记录到标准输出和标准错误流，而不是写入文件。所以这就允许user通过标准的方式查看不同应用程序的日志。\nDocker(或者广义的container runtime)把这些流重定向到文件，可以用以下命令获取容器的日志：\n1 $ docker logs \u0026lt;container id\u0026gt; 一般可以ssh到pod运行节点然后这样查看，不过k8s提供了更为简单的方式。\n使用kubectl logs命令获取pod日志：\n1 $ kubectl logs kubia-manual 如果一个pod只包含一个容器，那么查看k8s应用程序的日志会变得很简单。\n获取多容器pod的日志时指定容器名称\n1 $ kubectl logs kubia-manual -c kubia 请注意，如果pod被删了，那么pod里的日志也会被删。如果希望在pod删除之后仍然可以获取其日志，需要设置中心化、集群范围的日志系统，把所有日志存储到中心存储中，这个在后续会讨论。\n向pod发送请求 通过端口转发连接到pod以进行测试和调试。\n将本地网络端口转发到pod中的端口 如果不想通过service情形下对某个特定的pod进行通信(debug)，可以通过kubectl port-forward命令完成端口转发:\n1 $kubectl port-forward kubia-munual 8888:8080 这样就能通过本地端口连接到我们的pod。\n通过端口转发连接到pod 另一个终端curl localhost:8888即可调试。实际上述指令起了一个线程进行对调试请求的处理。\n使用Tag组织pod 对于微服务架构，部署数量能很轻松膨胀：多副本、不同版本等等。所以需要进行Pod分组去管理对象。Tag标签不仅仅可以组织pod，还包括了其他k8s资源。\n标签的定义：可以附加到资源的任意键值对。只要标签的key在资源内唯一，那么一个资源便可以拥有多个标签，一般我们在创建资源的时候回把标签附加到资源上，当然后续可以新增、修改标签。举个例子：\napp: 指定pod属于哪个应用、组件或者微服务 rel：显示在pod中运行的应用程序版本是stable、beta还是canary 利用这种组织形式，访问集群的开发或者运维能通过查看pod标签轻松看到系统结构以及每个pod的角色。\n创建pod的时候指定标签 1 2 3 4 5 6 7 8 9 10 11 12 13 14 apiVersion: v1 kind: Pod metadata: name: kubia-manual-v2 labels: creation_method: manual env: prod spec: containers: - image: derios/kubia name: kubia ports: - containerPort: 91 protocol: TCP 可以通过以下查看标签\n1 $ kubectl get po --show-labels 如果只对某些标签的pod感兴趣，可以使用-L选项把tag放在列上：\n1 $ kubectl get po -L creation_method,env 1 2 3 4 5 6 7 NAME READY STATUS RESTARTS AGE CREATION_METHOD ENV kubia-2r2pb 1/1 Running 0 5h7m kubia-kt6gz 1/1 Running 0 5h7m kubia-manual-v2 1/1 Running 0 2m24s manual prod kubia-tqt52 1/1 Running 0 5h7m nginx-r4hdr 1/1 Running 0 18h nginx-rg76b 1/1 Running 0 18h 修改现有pod标签 新增的话，用kubectl label即可:\n1 kubectl label po kubia-manual creation_method=manual 更改的话，需要使用--overwrite选项:\nkubectl label po kubia-manual-v2 env=debug --overwrite 通过标签选择器列出pod子集 标签的强大功能体现在这里。\n标签选择器根据资源的以下条件来筛选资源:\n包含(or not)使用特定key的标签 包含具有特定key和value的标签 包含具有特定key的标签，但值和我们指定的不同 使用标签选择器列出pod 1 2 3 $ kubectl get po -l creation_method=manual NAME READY STATUS RESTARTS AGE kubia-manual-v2 1/1 Running 0 9m5s 列出包含env标签的所有pod，无论其值多少：\n1 2 3 $ kubectl get po -l env NAME READY STATUS RESTARTS AGE kubia-manual-v2 1/1 Running 0 10m 列出没有env标签的pod：\n1 2 3 4 5 6 7 $ kubectl get po -l \u0026#39;!env\u0026#39; NAME READY STATUS RESTARTS AGE kubia-2r2pb 1/1 Running 0 5h17m kubia-kt6gz 1/1 Running 0 5h17m kubia-tqt52 1/1 Running 0 5h17m nginx-r4hdr 1/1 Running 0 18h nginx-rg76b 1/1 Running 0 18h 其他的选择器语法解释：\ncreation_method!=manual：选择带有creation_method标签，但其值不为manual的pod env in (prod, devel): 选择带有env标签且值为prod或者devel的pod env notin (prod, devel): 差不多自己理解 在标签选择器中使用多个条件 精确匹配：app=pc,rel=beta\n这种列出pod子集的做法能够让我们能够进行子集的操作，简单的例如删除自己的pod\n使用标签和选择器约束pod调度 pod的随机调度是k8s集群的工作方式，但如果我们希望对将pod调度到何处有一定的发言权，比如我们的硬件是异构或者非同质的：cpu架构区别、节点磁盘种类区别、GPU密集型运算加速特定节点等。\n当然，我们不是说明pod应该调度到哪个节点，因为基础架构和应用程序的强耦合不是k8s的玩法。我们通过用某种方式描述对节点的需求，使得k8s选择一个符合这个需求的节点，也就是用节点标签和节点标签选择器完成。\n用标签分类工作节点 假设集群中的一个节点刚添加完成，其包含一个用于通用GPU计算的GPU，我们希望加标签去展现这个节点特性:\n1 $ kubectl label node \u0026lt;node name\u0026gt; gpu=true 1 2 3 $ kubectl get nodes -l gpu=true NAME STATUS ROLES AGE VERSION minikube Ready master 20h v1.19.2 将pod调度到特定节点 假设已经给节点打上了标签，为了让调度器只在提供了确定标签的节点中进行选择，需要在pod的YAML文件中添加一个节点选择器(这里是deploy:test标签的节点):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 apiVersion: v1 kind: Pod metadata: name: kubia-manual-v2 labels: creation_method: manual env: prod spec: nodeSelector: deploy: \u0026#34;test\u0026#34; containers: - image: derios/kubia name: kubia ports: - containerPort: 91 protocol: TCP 调度到特定一个节点(不推荐) 每个node有自己的一个唯一标签: kubernetes.io/hostname，但是如果节点离线了，就会导致pod无法调度，因此用标签选择器比较符合工作流程。当讨论Replication-Controllers和Service的时候，标签选择器的重要性也会彰显。\n注解pod 这块暂时不想深究，知道用法就行\n使用命名空间对资源进行分组 待研究\n停止和移除pod 按名称删除 1 \u0026amp; kubectl delete po kubia 注意删除pod的时候，是k8s向进程发送SIGTERM信号并等待一定的秒数(30s默认)，如果还没有正常关闭，则发送SIGKILL终止线程。因此，为了保证线程可以正常关闭，需要正确处理SIGTERM信号。\n使用标签选择器删除 1 $ kubectl delete po -l creation_method=manual 即删除带有此标签的所有pod。\n通过删除整个命名空间来删除pod 1 $ kubectl delete ns custom-namespace 删除命名空间的所有pod，但保留命名空间 1 $ kubectl delete po --all 删除当前命名空间的所有pod。\n注意如果空间内创建了replication controllers，删除所有还会新增新的pod出来，所以还需要删除rc。\n删除命名空间中(几乎)所有资源 1 kubectl delete all --all 使用all并不意味着会删除所有的内容，比如secret还是会被保留，这些是要明确指定删除的。\n注意：该命令会删除名为kubernetes的service，不过在几分钟之内会被重新创建。\n","permalink":"http://localhost:64667/posts/programming/cloud-computing/k8s-basic/","summary":"\u003ch2 id=\"使用minikube构建本地单节点k8s集群\"\u003e使用minikube构建本地单节点k8s集群\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eminikube ssh\u003c/li\u003e\n\u003cli\u003ekubectl cluster-info\u003c/li\u003e\n\u003cli\u003ekubectl get nodes #查看节点信息\u003c/li\u003e\n\u003cli\u003ekubectl describe node minikube #详细信息\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"多节点k8s集群使用google-k8s-engine\"\u003e多节点k8s集群，使用Google K8s Engine\u003c/h2\u003e\n\u003cp\u003e构建方式看GKE官网即可\u003c/p\u003e\n\u003ch2 id=\"k8s初步使用\"\u003ek8s初步使用\u003c/h2\u003e\n\u003cp\u003ekubectl run kubia \u0026ndash;image=derios/kubia \u0026ndash;port=8080 \u0026ndash;generator=run/v1\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--image=derios/kubia\u003c/code\u003e代表要运行的容器镜像\u003c/li\u003e\n\u003cli\u003e这里的\u003ccode\u003e--generator\u003c/code\u003e会被废弃，其含义指代的是创建一个\u003ccode\u003eReplicationController\u003c/code\u003e而不是\u003ccode\u003eDeployment\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003ekubectl apply -f \u003cyaml name\u003e 更常用\u003c/li\u003e\n\u003cli\u003ekubectl get pods\u003c/li\u003e\n\u003cli\u003ekubectl get pods -o wide 显示pod ip和pod的节点\u003c/li\u003e\n\u003cli\u003e如果使用GWE，可以访问集群的dashborad:\u003c/li\u003e\n\u003cli\u003ekubectl clusert-info获取地址\u003c/li\u003e\n\u003cli\u003egcloud container clusters describe kubia | grep -E \u0026ldquo;(username|password):\u0026ldquo;获取用户名和密码\u003cbr\u003e\n如果仅仅使用minikube，则如下不需要任何凭证即可访问:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eminikube dashboard\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"namespace相关操作\"\u003eNamespace相关操作\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"l\"\u003ekubectl config set-context --current --namespace=my-namespace\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"创建服务对象访问web应用\"\u003e创建服务对象，访问Web应用\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e如果使用minikube或者kubeadm等自定义k8s，loadbalancer是没有集成的，需要AWS或者Google Cloud。最好使用NodePort或者Ingress Controller。如果真要用minikube, 可以使用minikube tunnel解决, 或者minikube service kubia-http\u003c/code\u003e\u003c/p\u003e","title":"Kubernetes Handbook (Start \u0026 Pod)"},{"content":"Books Docker in Action (English ver.)\nDocker入门到实践(中文)\n速查 Docker Cheat Sheet\n全量CLI 容器管理CLI 查看容器CLI 容器交互CLI 镜像管理CLI 镜像传输CLI DOCKERFILE主要命令 Dockerfile 基底 1 FROM ruby:2.2.2 变量 1 2 ENV APP_HOME/myapp RUN mkdir $APP_HOME 初始化 1 RUN bundle install 1 WORKDIR /myapp 1 2 VOLUME [\u0026#34;/data\u0026#34;] # Specification for mount point 1 2 ADD file.xyz /file.xyz COPY --chown=user:group host_file.xyz /path/container_file.xyz Onbuild 1 2 ONBUILD RUN bundle install # when used with another file 命令 1 2 EXPOSE 5900 CMD [\u0026#34;bundle\u0026#34;, \u0026#34;exec\u0026#34;, \u0026#34;rails\u0026#34;, \u0026#34;server\u0026#34;] Entrypoint 1 ENTRYPOINT exec top -b Metadata 1 LABEL version=\u0026#34;1.0\u0026#34; 1 2 LABEL \u0026#34;com.example.vendor\u0026#34;=\u0026#34;ACME Incorporated\u0026#34; LABEL com.example.label-with-value=\u0026#34;foo\u0026#34; 1 2 LABEL description=\u0026#34;This text illustrates \\ that label-values can span multiple lines.\u0026#34; Docker Compose 基本用法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # docker-compose.yml version: \u0026#39;2\u0026#39; services: web: build: . # build from Dockerfile context: ./Path dockerfile: Dockerfile ports: - \u0026#34;5000:5000\u0026#34; volumes: - .:/code redis: image: redis 指令 1 2 docker-compose start docker-compose stop 1 2 docker-compose pause docker-compose unpause 1 2 3 docker-compose ps docker-compose up docker-compose down Reference(例子) 构建 1 2 3 web: # build from Dockerfile build: . 1 2 3 4 # build from custom Dockerfile build: context: ./dir dockerfile: Dockerfile.dev 1 2 3 4 5 6 # build from image image: ubuntu image: ubuntu:14.04 image: tutum/influxdb image: example-registry:4000/postgresql image: a4bc65fd 端口 1 2 3 ports: - \u0026#34;3000\u0026#34; - \u0026#34;8000:80\u0026#34; # guest:host 1 2 # expose ports to linked services (not to host) expose: [\u0026#34;3000\u0026#34;] 指令 1 2 3 # command to execute command: bundle exec thin -p 3000 command: [bundle, exec, thin, -p, 3000] 1 2 3 # override the entrypoint entrypoint: /app/start.sh entrypoint: [php, -d, vendor/bin/phpunit] 环境变量 1 2 3 4 5 # environment vars environment: RACK_ENV: development environment: - RACK_ENV=development 1 2 3 # environment vars from file env_file: .env env_file: [.env, .development.env] 依赖 1 2 3 4 5 # makes the `db` service available as the hostname `database` # (implies depends_on) links: - db:database - redis 1 2 3 # make sure `db` is alive before starting depends_on: - db 其他选项 1 2 3 4 # make this service extend another extends: file: common.yml # optional service: webapp 1 2 3 volumes: - /var/lib/mysql - ./_data:/var/lib/mysql 高级特性 打标签 1 2 3 4 services: web: labels: com.example.description: \u0026#34;Accounting web app\u0026#34; DNS服务器 1 2 3 4 5 6 services: web: dns: 8.8.8.8 dns: - 8.8.8.8 - 8.8.4.4 设备绑定 1 2 3 4 services: web: devices: - \u0026#34;/dev/ttyUSB0:/dev/ttyUSB0\u0026#34; 外部链接 1 2 3 4 5 services: web: external_links: - redis_1 - project_db_1:mysql 主机设置 1 2 3 4 services: web: extra_hosts: - \u0026#34;somehost:192.168.1.100\u0026#34; Services 1 2 3 4 5 6 7 8 9 10 11 # To view list of all the services runnning in swarm docker service ls # To see all running services docker stack services stack_name # to see all services logs docker service logs stack_name service_name # To scale services quickly across qualified node docker service scale stack_name_service_name=replicas Clean up 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # To clean or prune unused (dangling) images docker image prune # To remove all images which are not in use containers , add - a docker image prune -a # To Purne your entire system docker system prune # To leave swarm docker swarm leave # To remove swarm ( deletes all volume data and database info) docker stack rm stack_name # To kill all running containers docker kill $(docekr ps -q ) ","permalink":"http://localhost:64667/posts/programming/cloud-computing/docker-basic/","summary":"\u003ch2 id=\"books\"\u003eBooks\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://pepa.holla.cz/wp-content/uploads/2016/10/Docker-in-Action.pdf\"\u003eDocker in Action (English ver.)\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://yeasy.gitbook.io/docker_practice/\"\u003eDocker入门到实践(中文)\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"速查\"\u003e速查\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/wsargent/docker-cheat-sheet/tree/master/zh-cn\"\u003eDocker Cheat Sheet\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"全量cli\"\u003e全量CLI\u003c/h3\u003e\n\u003cp\u003e\u003cimg alt=\"docker cheat sheet\" loading=\"lazy\" src=\"https://raw.githubusercontent.com/sangam14/dockercheatsheets/master/dockercheatsheet8.png\"\u003e\u003c/p\u003e\n\u003ch3 id=\"容器管理cli\"\u003e容器管理CLI\u003c/h3\u003e\n\u003cp\u003e\u003cimg alt=\"container management commands\" loading=\"lazy\" src=\"https://raw.githubusercontent.com/sangam14/dockercheatsheets/master/dockercheatsheet1.png\"\u003e\u003c/p\u003e\n\u003ch3 id=\"查看容器cli\"\u003e查看容器CLI\u003c/h3\u003e\n\u003cp\u003e\u003cimg alt=\"inspect container commands\" loading=\"lazy\" src=\"https://raw.githubusercontent.com/sangam14/dockercheatsheets/master/dockercheatsheet3.png\"\u003e\u003c/p\u003e\n\u003ch3 id=\"容器交互cli\"\u003e容器交互CLI\u003c/h3\u003e\n\u003cp\u003e\u003cimg alt=\"interact with container commands\" loading=\"lazy\" src=\"https://raw.githubusercontent.com/sangam14/dockercheatsheets/master/dockercheatsheet4.png\"\u003e\u003c/p\u003e\n\u003ch3 id=\"镜像管理cli\"\u003e镜像管理CLI\u003c/h3\u003e\n\u003cp\u003e\u003cimg alt=\"image management commands\" loading=\"lazy\" src=\"https://raw.githubusercontent.com/sangam14/dockercheatsheets/master/dockercheatsheet5.png\"\u003e\u003c/p\u003e\n\u003ch3 id=\"镜像传输cli\"\u003e镜像传输CLI\u003c/h3\u003e\n\u003cp\u003e\u003cimg alt=\"image transfer commands\" loading=\"lazy\" src=\"https://raw.githubusercontent.com/sangam14/dockercheatsheets/master/dockercheatsheet6.png\"\u003e\u003c/p\u003e\n\u003ch3 id=\"dockerfile主要命令\"\u003eDOCKERFILE主要命令\u003c/h3\u003e\n\u003cp\u003e\u003cimg alt=\"builder main commands\" loading=\"lazy\" src=\"https://raw.githubusercontent.com/sangam14/dockercheatsheets/master/dockercheatsheet7.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"dockerfile\"\u003eDockerfile\u003c/h2\u003e\n\u003ch3 id=\"基底\"\u003e基底\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dockerfile\" data-lang=\"dockerfile\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"s\"\u003e ruby:2.2.2\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"变量\"\u003e变量\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dockerfile\" data-lang=\"dockerfile\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eENV\u003c/span\u003e APP_HOME/myapp\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eRUN\u003c/span\u003e mkdir \u003cspan class=\"nv\"\u003e$APP_HOME\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"初始化\"\u003e初始化\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dockerfile\" data-lang=\"dockerfile\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eRUN\u003c/span\u003e bundle install\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dockerfile\" data-lang=\"dockerfile\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eWORKDIR\u003c/span\u003e\u003cspan class=\"s\"\u003e /myapp\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dockerfile\" data-lang=\"dockerfile\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eVOLUME\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/data\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"c\"\u003e# Specification for mount point\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dockerfile\" data-lang=\"dockerfile\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eADD\u003c/span\u003e file.xyz /file.xyz\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eCOPY\u003c/span\u003e --chown\u003cspan class=\"o\"\u003e=\u003c/span\u003euser:group host_file.xyz /path/container_file.xyz\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"onbuild\"\u003eOnbuild\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dockerfile\" data-lang=\"dockerfile\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eONBUILD\u003c/span\u003e \u003cspan class=\"k\"\u003eRUN\u003c/span\u003e bundle install\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"c\"\u003e# when used with another file\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"命令\"\u003e命令\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dockerfile\" data-lang=\"dockerfile\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eEXPOSE\u003c/span\u003e\u003cspan class=\"s\"\u003e 5900\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eCMD\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;bundle\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;exec\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;rails\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;server\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"entrypoint\"\u003eEntrypoint\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dockerfile\" data-lang=\"dockerfile\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eENTRYPOINT\u003c/span\u003e \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e top -b\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"metadata\"\u003eMetadata\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dockerfile\" data-lang=\"dockerfile\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eLABEL\u003c/span\u003e \u003cspan class=\"nv\"\u003eversion\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;1.0\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dockerfile\" data-lang=\"dockerfile\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eLABEL\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;com.example.vendor\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;ACME Incorporated\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eLABEL\u003c/span\u003e com.example.label-with-value\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dockerfile\" data-lang=\"dockerfile\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eLABEL\u003c/span\u003e \u003cspan class=\"nv\"\u003edescription\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;This text illustrates \\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003ethat label-values can span multiple lines.\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"docker-compose\"\u003eDocker Compose\u003c/h2\u003e\n\u003ch3 id=\"基本用法\"\u003e基本用法\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c\"\u003e# docker-compose.yml\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003eversion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;2\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003eservices\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eweb\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003ebuild\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003e.\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c\"\u003e# build from Dockerfile\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003econtext\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003e./Path\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003edockerfile\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eDockerfile\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003eports\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e- \u003cspan class=\"s2\"\u003e\u0026#34;5000:5000\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003evolumes\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e- \u003cspan class=\"l\"\u003e.:/code\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eredis\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003eimage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eredis\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"指令\"\u003e指令\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker-compose start\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker-compose stop\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker-compose pause\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker-compose unpause\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker-compose ps\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker-compose up\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker-compose down\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"reference例子\"\u003eReference(例子)\u003c/h2\u003e\n\u003ch3 id=\"构建\"\u003e构建\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003eweb\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c\"\u003e# build from Dockerfile\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003ebuild\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003e.\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c\"\u003e# build from custom Dockerfile\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003ebuild\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003econtext\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003e./dir\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003edockerfile\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eDockerfile.dev\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c\"\u003e# build from image\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eimage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eubuntu\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eimage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eubuntu:14.04\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eimage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003etutum/influxdb\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eimage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eexample-registry:4000/postgresql\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eimage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ea4bc65fd\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"端口\"\u003e端口\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eports\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- \u003cspan class=\"s2\"\u003e\u0026#34;3000\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- \u003cspan class=\"s2\"\u003e\u0026#34;8000:80\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c\"\u003e# guest:host\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c\"\u003e# expose ports to linked services (not to host)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eexpose\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;3000\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"指令-1\"\u003e指令\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c\"\u003e# command to execute\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003ecommand\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ebundle exec thin -p 3000\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003ecommand\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"l\"\u003ebundle, exec, thin, -p, 3000]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c\"\u003e# override the entrypoint\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eentrypoint\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003e/app/start.sh\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eentrypoint\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"l\"\u003ephp, -d, vendor/bin/phpunit]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"环境变量\"\u003e环境变量\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c\"\u003e# environment vars\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eenvironment\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003eRACK_ENV\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003edevelopment\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eenvironment\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- \u003cspan class=\"l\"\u003eRACK_ENV=development\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c\"\u003e# environment vars from file\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eenv_file\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003e.env\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eenv_file\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"l\"\u003e.env, .development.env]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"依赖\"\u003e依赖\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c\"\u003e# makes the `db` service available as the hostname `database`\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c\"\u003e# (implies depends_on)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003elinks\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- \u003cspan class=\"l\"\u003edb:database\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- \u003cspan class=\"l\"\u003eredis\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c\"\u003e# make sure `db` is alive before starting\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003edepends_on\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- \u003cspan class=\"l\"\u003edb\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"其他选项\"\u003e其他选项\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c\"\u003e# make this service extend another\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eextends\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ecommon.yml \u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c\"\u003e# optional\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003eservice\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003ewebapp\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003evolumes\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- \u003cspan class=\"l\"\u003e/var/lib/mysql\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- \u003cspan class=\"l\"\u003e./_data:/var/lib/mysql\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"高级特性\"\u003e高级特性\u003c/h2\u003e\n\u003ch3 id=\"打标签\"\u003e打标签\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003eservices\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eweb\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003elabels\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003ecom.example.description\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Accounting web app\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"dns服务器\"\u003eDNS服务器\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003eservices\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eweb\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003edns\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"m\"\u003e8.8.8.8\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003edns\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- \u003cspan class=\"m\"\u003e8.8.8.8\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- \u003cspan class=\"m\"\u003e8.8.4.4\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"设备绑定\"\u003e设备绑定\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003eservices\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eweb\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003edevices\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- \u003cspan class=\"s2\"\u003e\u0026#34;/dev/ttyUSB0:/dev/ttyUSB0\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"外部链接\"\u003e外部链接\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003eservices\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eweb\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003eexternal_links\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- \u003cspan class=\"l\"\u003eredis_1\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- \u003cspan class=\"l\"\u003eproject_db_1:mysql\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"主机设置\"\u003e主机设置\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003eservices\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eweb\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003eextra_hosts\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- \u003cspan class=\"s2\"\u003e\u0026#34;somehost:192.168.1.100\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"services\"\u003eServices\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# To view list of all the services runnning in swarm\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker service ls \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# To see all running services\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker stack services stack_name\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# to see all services logs\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker service logs stack_name service_name \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# To scale services quickly across qualified node\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker service scale \u003cspan class=\"nv\"\u003estack_name_service_name\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ereplicas\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"clean-up\"\u003eClean up\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# To clean or prune unused (dangling) images\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker image prune \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# To remove all images which are not in use containers , add - a\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker image prune -a \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# To Purne your entire system\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker system prune \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# To leave swarm\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker swarm leave\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# To remove swarm ( deletes all volume data and database info)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker stack rm stack_name \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# To kill all running containers\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker \u003cspan class=\"nb\"\u003ekill\u003c/span\u003e \u003cspan class=\"k\"\u003e$(\u003c/span\u003edocekr ps -q \u003cspan class=\"k\"\u003e)\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"Docker Cheat Sheet"},{"content":"这篇文章的启发是我在阅读Go的http源码时获得的，之前对这块缺乏深入的了解，这篇文章会结合源码讨论包括典型http request的路由，还会涉及到一些并发和中间件的issue。\n我们先从一个简单的go server谈起，下面的代码从https://gobyexample.com/http-servers 截取：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; ) func hello(w http.ResponseWriter, req *http.Request) { fmt.Fprintf(w, \u0026#34;hello\\n\u0026#34;) } func headers(w http.ResponseWriter, req *http.Request) { for name, headers := range req.Header { for _, h := range headers { fmt.Fprintf(w, \u0026#34;%v: %v\\n\u0026#34;, name, h) } } } func main() { http.HandleFunc(\u0026#34;/hello\u0026#34;, hello) http.HandleFunc(\u0026#34;/headers\u0026#34;, headers) http.ListenAndServe(\u0026#34;:8090\u0026#34;, nil) } 追踪请求的生命周期我们从http.ListenAndServe这个方法开始，下面的图示说明了这一层的调用关系:\n这里实际上inlined了一些代码，因为初始的代码有很多其他的细节不好追踪。\n主要的flow其实和我们预期的一致：ListenAndServe方法对你一个目标地址监听一个TCP端口，而后循环不断接受新的连接。每一个连接，它会起一个新的goroutine去serve，serve的具体操作是:\n从连接里解析HTTP请求： 产生http.Request 将http.Request传给用户自定义的handler 一个handler实际上就是实现了http.Handler接口：\n1 2 3 type Handler interface { ServeHTTP(ResponseWriter, *Request) } 默认Handler 在我们上述的代码中，ListenAndServe方法的第二个参数为nil，实际上应该是用户自定义的handler, 这是为何？我们的图解中省去了很多细节，实际上当HTTP包serve一个请求的时候，它并没有直接调用用户的handlers而是使用一个adaptor：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 type serverHandler struct { srv *Server } func (sh serverHandler) ServeHTTP(rw ResponseWriter, req *Request) { handler := sh.srv.Handler if handler == nil { handler = DefaultServeMux } if req.RequestURI == \u0026#34;*\u0026#34; \u0026amp;\u0026amp; req.Method == \u0026#34;OPTIONS\u0026#34; { handler = globalOptionsHandler{} } handler.ServeHTTP(rw, req) } 上述代码表示了，如果handler == nil, http.DefaultServeMux会作为默认的handler。这个default server mux是在http包中一个http.ServeMux类全局实例。而当我们的样例代码通过http.HandleFunc注册handlers的时候，同样会注册到default mux中。\n所以我们可以重写我们的样例代码如下:\n1 2 3 4 5 6 7 func main() { mux := http.NewServeMux() mux.HandleFunc(\u0026#34;/hello\u0026#34;, hello) mux.HandleFunc(\u0026#34;/headers\u0026#34;, headers) http.ListenAndServe(\u0026#34;:8090\u0026#34;, mux) } ServeMux只是一个Handler 在看了很多Go的server例子以后，很容易会把ListenAndServe想象成把mux作为参数，但是这个明显是不准确的。从上面的例子看到，ListenAndServe实际传入的是实现了http.Handler接口的值，我们可以重写一下代码并且不用任何的muxes：\n1 2 3 4 5 6 7 8 9 10 11 type PoliteServer struct { } func (ms *PoliteServer) ServeHTTP(w http.ResponseWriter, req *http.Request) { fmt.Fprintf(w, \u0026#34;Welcome! Thanks for visiting!\\n\u0026#34;) } func main() { ps := \u0026amp;PoliteServer{} log.Fatal(http.ListenAndServe(\u0026#34;:8090\u0026#34;, ps)) } 这个snippet里面没有路由，所有的HTTP请求直接传进PoliteServer的ServeHTTP参数里，并且所有的请求都有相同的响应。可以尝试用不同的路径和方法去curl一下这个server。\n然后我们再用http.HandlerFunc简化一下这个polite server:\n1 2 3 4 5 6 7 func politeGreeting(w http.ResponseWriter, req *http.Request) { fmt.Fprintf(w, \u0026#34;Welcome! Thanks for visiting!\\n\u0026#34;) } func main() { log.Fatal(http.ListenAndServe(\u0026#34;:8090\u0026#34;, http.HandlerFunc(politeGreeting))) } http.HadnlerFunc是http包里的一个很好用的adaptor:\n1 2 3 4 5 6 7 8 9 10 // The HandlerFunc type is an adapter to allow the use of // ordinary functions as HTTP handlers. If f is a function // with the appropriate signature, HandlerFunc(f) is a // Handler that calls f. type HandlerFunc func(ResponseWriter, *Request) // ServeHTTP calls f(w, r). func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) { f(w, r) } 在这篇文章最开始的例子里，用到了http.HandleFunc，注意和http.HandlerFunc很像，但是他们是完全不同的实体，也承担着不同的任务。\n如同PoliteServer表现的那样，http.ServeMux是实现http.Handler接口的一个类，这里查看源码\nServeMux维护了一个以长度排序的{pattern, handler}切片 Handle或者HandleFunc向这个切片添加新的handler ServeHTTP: 通过查询这个排序好的切片，找到对应请求path的handler 调用handler的ServeHTTP方法 至此，mux可以被看作为一个forwarding handler，这种编程模式在HTTP server中很常见，也就是middleware。\nhttp.Handler Middleware 如何去定义清楚middleware的含义是比较困难的，因为在不同的上下文、语言以及框架里它的概念都有一些不同。我们再看一下文章一开始的信息流图解，这里我们再简化一下，隐藏一些http包做的细节：\n下面是我们增加了middleware以后的图解:\n在Go中，middleware只是一个HTTP handler，而这个handler包了一个不同的handler。middleware handler通过调用ListenAndServe被注册，当这个middleware被调用到，他可以做任意的预处理，调用到被包的handler然后做任意的后处理。\n我们在上面了解了一个middleware的例子\u0026ndash;http.ServeMux, 在那个例子中，预处理指的是基于特定的请求path去选择用户定义的handler，然后去调用。并且没有对应的后处理。\n举一个另外的例子，我们可以在polite server中加一个基本的logging middleware， 这个middleware能够对所有请求的的细节记录日志，包括了请求执行的时间等：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 type LoggingMiddleware struct { handler http.Handler } func (lm *LoggingMiddleware) ServeHTTP(w http.ResponseWriter, req *http.Request) { start := time.Now() lm.handler.ServeHTTP(w, req) log.Printf(\u0026#34;%s %s %s\u0026#34;, req.Method, req.RequestURI, time.Since(start)) } type PoliteServer struct { } func (ms *PoliteServer) ServeHTTP(w http.ResponseWriter, req *http.Request) { fmt.Fprintf(w, \u0026#34;Welcome! Thanks for visiting!\\n\u0026#34;) } func main() { ps := \u0026amp;PoliteServer{} lm := \u0026amp;LoggingMiddleware{handler: ps} log.Fatal(http.ListenAndServe(\u0026#34;:8090\u0026#34;, lm)) } 请注意logging middleware其本身就是一个http.Handler包含了用户定义的handler作为一个field。当ListenAndServe调用其ServeHTTP方法的时候，做了以下的事情:\n预处理： 在user handler被执行前打时间戳 调用user handler，传入请求体和response writer 后处理：日志记录请求细节，包括耗费的时间 middleware一个巨大的优点是composable（组合性），被middleware包着的handler可以是另一个middleware等等。所以这个是一个相互包裹的http.Handler链。实际上，这个是在Go中的常见模式，这个例子也像我们展现一个经典的Go middleware是怎么样的。下面是一个logging polite server的详细例子，写法上更容易辨认：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 func politeGreeting(w http.ResponseWriter, req *http.Request) { fmt.Fprintf(w, \u0026#34;Welcome! Thanks for visiting!\\n\u0026#34;) } func loggingMiddleware(next http.Handler) http.Handler { return http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) { start := time.Now() next.ServeHTTP(w, req) log.Printf(\u0026#34;%s %s %s\u0026#34;, req.Method, req.RequestURI, time.Since(start)) }) } func main() { lm := loggingMiddleware(http.HandlerFunc(politeGreeting)) log.Fatal(http.ListenAndServe(\u0026#34;:8090\u0026#34;, lm)) } 这里省去了通过方法对结构体的创建，loggingMiddleware利用了http.HandlerFunc以及闭包让代码变得更为简洁，当然功能还是和前面代码相同。但是这个写法，彰显了一个middleware的标准特征：一个函数传入一个http.Handler以及其他状态，然后返回另一个http.Handler。被返回的handler可以视作传入middleware的handler的替代品，而且会magically执行middleware所拥有的功能。\n例如，标准库里有如下的middleware:\n1 func TimeoutHandler(h Handler, dt time.Duration, msg string) Handler 所以我们可以这样玩:\n1 handler = http.TimeoutHandler(handler, 2 * time.Second, \u0026#34;timed out\u0026#34;) 这样就能创建一个2秒超时机制的handler了。\n而middleware的组合可以由如下所示：\n1 2 handler = http.TimeoutHandler(handler, 2 * time.Second, \u0026#34;timed out\u0026#34;) handler = loggingMiddleware(handler) 仅仅两行，handler能够有超时和记录日志的功能，你或许会感觉middleware的链条写起来可能比较繁琐，不过Go有很多流行的包会解决这个问题，当然已经超出了这篇文章讨论的范围，后续我也会补充。\n除此之外，http包本身也在按照其需求使用middleware，比如之前serverHandler适应器的例子，它能够使用非常简洁的手段去默认处理nilhandler的情况（通过把请求传给default mux）\n因此，middleware可以说是一种attractive design aid，我们能够聚焦在业务逻辑handler，同时利用一般性的middleware去增强handler的功能，更多的探讨会新开一些文章。\n并发和panic处理 最后我们来研究额外的两个主题：并发和panic处理，作为我们探究Go HTTP Server中HTTP请求路径问题的结尾。\n首先关于并发的问题，前面讨论了对于每一个连接，其都由http.Server.Serve去起一个新的gorountine去处理。这利用了Go强大的并发能力，因为goroutine非常cheap并且这种简洁的并发模型对于HTTP handlers的处理也很适宜。一个handler可以阻塞（例如读取数据库）且不会停止其他handlers。不过在处理一些共享数据的goroutine并发时，还是要注意一些东西，这点我会在另外的文章谈。\n最后，panic处理。HTTP Server一般来说是一个长期运行的程序。如果在一个用户定义的handler中发生了问题，例如一些导致runtime panic的bug，有可能会让整个server都挂掉。所以最好能够在main里用recover来保护你的server，不过这种方式还是有以下的问题:\n当控制返回到main中时，ListenAndServe已经结束了所以其他serving也结束了。 因为每一个独立的goroutine处理一个connection，handlers里的panic甚至不会到达main而是挂掉整个进程。 为了防止这些问题，net/http内置了对每个goroutine的recovery(在conn.serve方法中)，我们可以看一个例子:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 func hello(w http.ResponseWriter, req *http.Request) { fmt.Fprintf(w, \u0026#34;hello\\n\u0026#34;) } func doPanic(w http.ResponseWriter, req *http.Request) { panic(\u0026#34;oops\u0026#34;) } func main() { http.HandleFunc(\u0026#34;/hello\u0026#34;, hello) http.HandleFunc(\u0026#34;/panic\u0026#34;, doPanic) http.ListenAndServe(\u0026#34;:8090\u0026#34;, nil) } 如果我们起这个server并且用/panic去curl:\n$ curl localhost:8090/panic curl: (52) Empty reply from server server端会打下以下的日志:\n2021/02/16 09:44:31 http: panic serving 127.0.0.1:52908: oops goroutine 8 [running]: net/http.(*conn).serve.func1(0xc00010cbe0) /usr/local/go/src/net/http/server.go:1801 +0x147 panic(0x654840, 0x6f0b80) /usr/local/go/src/runtime/panic.go:975 +0x47a main.doPanic(0x6fa060, 0xc0001401c0, 0xc000164200) [... rest of stack dump here ...] 当然server还在持续运行。\n虽然这种内置的方式比挂掉整个进程好，不过开发者还是觉得这样有很多限制。它能做的只有关闭连接然后记录下日志，但是一般的情形下，最好给client端返回一些错误信息（例如错误码500等）。\n","permalink":"http://localhost:64667/posts/programming/golang/lifecycle-of-http/","summary":"\u003cp\u003e这篇文章的启发是我在阅读Go的http源码时获得的，之前对这块缺乏深入的了解，这篇文章会结合源码讨论包括典型http request的路由，还会涉及到一些并发和中间件的issue。\u003c/p\u003e\n\u003cp\u003e我们先从一个简单的go server谈起，下面的代码从https://gobyexample.com/http-servers 截取：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"s\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"s\"\u003e\u0026#34;net/http\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003ehello\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ew\u003c/span\u003e \u003cspan class=\"nx\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eResponseWriter\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ereq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eFprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;hello\\n\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eheaders\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ew\u003c/span\u003e \u003cspan class=\"nx\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eResponseWriter\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ereq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eheaders\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eHeader\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eh\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003eheaders\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eFprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;%v: %v\\n\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eh\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eHandleFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;/hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ehello\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eHandleFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;/headers\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eheaders\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eListenAndServe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;:8090\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e追踪请求的生命周期我们从\u003ccode\u003ehttp.ListenAndServe\u003c/code\u003e这个方法开始，下面的图示说明了这一层的调用关系:\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"diagram\" loading=\"lazy\" src=\"https://eli.thegreenplace.net/images/2021/http-request-listenandserve.png\"\u003e\u003c/p\u003e\n\u003cp\u003e这里实际上\u003ccode\u003einlined\u003c/code\u003e了一些代码，因为初始的代码有很多其他的细节不好追踪。\u003c/p\u003e\n\u003cp\u003e主要的flow其实和我们预期的一致：\u003ccode\u003eListenAndServe\u003c/code\u003e方法对你一个目标地址监听一个TCP端口，而后循环不断接受新的连接。每一个连接，它会起一个新的goroutine去serve，serve的具体操作是:\u003c/p\u003e","title":"Life of an HTTP request in a Go server"},{"content":"如果你在考虑将你的在线电子业务转移到云上，下面三个名词会经常遇到：\nIaaS PaaS SaaS 这些是云计算领域的三个主要类别\n你很可能早就听说过它们，在各种各样的业务转移到云上的趋势下，它们各自占据的不同的比例：\nSaaS占据大概24%的企业负载 IaaS在12%左右波动 PaaS是近年来最流行的模型，大概占据32%，且当下和未来会有更多的增长 On-Premise, SaaS, PaaS, IaaS的关键区别 on-premise这里理解成本地部署的含义，比如企业内部部署的CRM软件系统，其反义词即为云端\n不久以前，所有公司的IT系统都是on-premise的，云的概念比较模糊和遥远。\nSaaS, PaaS, IaaS只是三种简单描述你如何为你的业务使用云设施的方式：\nIaaS: cloud-based services, 为存储、网络以及虚拟化等服务提供pay-as-you-go PaaS: 通过internet提供硬件和软件工具 SaaS: 完全由第三方提供的软件服务 On-Premise: 企业内部部署 下面是一个图解：\nSaaS, PaaS, IaaS 举例 大多数的业务一般使用SaaS以及IaaS云计算服务模型的组合，此外有很多业务会鼓励开发者使用PaaS去构建应用。\nSaaS举例： BigCommerce, Google Apps, Salesforce, Dropbox, MailChimp, ZenDesk, DocuSign, Slack, Hubspot.\nPaaS举例： AWS Elastic Beanstalk, Heroku, Windows Azure (mostly used as PaaS), Force.com, OpenShift, Apache Stratos, Magento Commerce Cloud.\nIaaS举例： AWS EC2, Rackspace, Google Compute Engine (GCE), Digital Ocean, Magento 1 Enterprise Edition*.\n三类云计算服务模型解释 IaaS (Infrastructure as a Service) IaaS业务提供诸如存储、网络和虚拟化的pay-as-you-go服务，也是对on-premise基础设施的替代。因此业务可以避免对庞大的on-site资源的投入。\n传统on-premise IT基础设施的维护是耗时耗力且耗费资金的，通常这种基础设施需要大量的初始投资在物理硬件，而且你经常也需要额外的IT运营去维护硬件以及维持更新。\nWith IaaS, you can buy what you need, as you need it, and purchase more as your business grows.\nIaaS解决方案非常灵活且便于扩展，使用者能够轻易得进行方案替代，并且使用方能对基础设施进行全面掌控，其特征为：\nHighly flexible and highly scalable.\nAccessible by multiple users.\nCost-effective.\n使用IaaS的时机：\nIaaS适用于所有体量的业务，因为它能让你对基础设施进行全面掌控，同时因为其工作模式为pay-as-you-use，因此任何的预算都能够很好cover。\nPaaS (Platform as a Service) PaaS供应商通过网络提供软硬件工具，用户基于此去开发应用，所以PaaS使用者倾向于开发者。\nA PaaS solution provides the platform for developers to create unique, customizable software.\n这意味着开发者不需要在开发应用时从零开始，也就意味着帮助他们节省资金和精力。因此PaaS对于那些目标为创建独特应用的同时避免承担所有责任的人是一个流行的选择。\nPaaS平台的特征为：\nAccessible by multiple users.\nScalable – you can choose from various tiers of resources to suit the size of your business.\nBuilt on virtualization technology.\nEasy to run without extensive system administration knowledge.\n使用PaaS的时机：\n开发者只需要投入app的开发、测试和部署，而不用关注其他细节比如软件更新维护、安全补丁等等。\nPaaS 的Non-Ecommerce例子：\n一个很好的例子就是AWS Elastic Beanstalk.\nAWS提供超过100个云计算服务比如EC2，RDS和S3。大多数这些服务可以被作为IaaS使用，而且大多数使用AWS的公司会选择他们想要的服务。\n然而，对于用户来说，管理很多不同的服务会很快变得艰难和耗时，所以AWS Elatsic Beanstalk的作用就在于：其工作为基础设施上面的一层，能够自动解决很多底层细节例如容量预测、负载均衡、扩缩容以及应用健康监控。\nPaaS的Ecommerce例子：\nMagento Commerce Cloud (also known as Magento Enterprise Cloud Edition) 便是最常见的例子。\nSaaS （Software as a Service） SaaS平台让用户能够通过网络使用软件，收费方式通常为月度订阅计费。\n其优势为，使用SaaS意味着你不需要在自身的计算机中运行软件应用，只需要登录账户即可。只要有网络连接，你就能在任何设备上访问你的软件。例如你的员工能够有个人的登录账户，对应着不同的访问权限。\nYou no longer need to engage an IT specialist to download the software onto multiple computers throughout your office or worry about keeping the software on every computer up-to-date.\n大部分订阅包含维护、编译以及安全服务，这些服务在on-premise中是非常费时费力的。\nSaaS平台的特征:\nAvailable over the internet.\nHosted on a remote server by a third-party provider.\nScalable, with different tiers for small, medium, and enterprise-level businesses.\nInclusive, offering security, compliance, and maintenance as part of the cost.\n使用SaaS的时机：\nSaaS platforms are ideal for when you want an application to run smoothly and reliably with minimal input from you.\nSaaS Ecommerce举例：\nBigCommerce是一个典型。\nBigCommerce provides complete shopping cart software, as well as hosting infrastructure to the user, allowing businesses to create an online shop within minutes without worrying about coding, hosting, or software.\nExecutive Summary 基本上三种云计算服务模型的流行也削减了on-premise的部署形式，可以用pizza再去总结刚开始的图:\n总结来看，具体的区别如下：\nIaaS is there to provide you with maximum flexibility when it comes to hosting custom-built apps, as well as a providing a general data center for data storage. PaaS is most often built on top of an IaaS platform to reduce the need for system administration. It allows you to focus on app development instead of infrastructure management. SaaS offers ready-to-use, out-of-the-box solutions that meet a particular business need (such as website or email). Most modern SaaS platforms are built on IaaS or PaaS platforms. ","permalink":"http://localhost:64667/posts/programming/iaas-paas-diff/","summary":"\u003cp\u003e如果你在考虑将你的在线电子业务转移到云上，下面三个名词会经常遇到：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eIaaS\u003c/li\u003e\n\u003cli\u003ePaaS\u003c/li\u003e\n\u003cli\u003eSaaS\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e这些是\u003ca href=\"https://www.bigcommerce.com/ecommerce-answers/what-is-cloud-computing/\"\u003e云计算领域的三个主要类别\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e你很可能早就听说过它们，在各种各样的业务转移到云上的趋势下，它们各自占据的不同的比例：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eSaaS占据大概24%的企业负载\u003c/li\u003e\n\u003cli\u003eIaaS在12%左右波动\u003c/li\u003e\n\u003cli\u003ePaaS是近年来最流行的模型，大概占据32%，且当下和未来会有更多的增长\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"on-premise-saas-paas-iaas的关键区别\"\u003eOn-Premise, SaaS, PaaS, IaaS的关键区别\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eon-premise这里理解成本地部署的含义，比如企业内部部署的CRM软件系统，其反义词即为云端\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e不久以前，所有公司的IT系统都是on-premise的，云的概念比较模糊和遥远。\u003c/p\u003e\n\u003cp\u003eSaaS, PaaS, IaaS只是三种简单描述你如何为你的业务使用云设施的方式：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eIaaS\u003c/strong\u003e:  cloud-based services, 为存储、网络以及虚拟化等服务提供pay-as-you-go\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePaaS\u003c/strong\u003e: 通过internet提供硬件和软件工具\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSaaS\u003c/strong\u003e: 完全由第三方提供的软件服务\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOn-Premise\u003c/strong\u003e: 企业内部部署\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e下面是一个图解：\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"breakdown\" loading=\"lazy\" src=\"https://www.bigcommerce.com/blog/wp-content/uploads/2018/10/saas-vs-paas-vs-iaas-breakdown.jpg\"\u003e\u003c/p\u003e\n\u003ch3 id=\"saas-paas-iaas-举例\"\u003eSaaS, PaaS, IaaS 举例\u003c/h3\u003e\n\u003cp\u003e大多数的业务一般使用SaaS以及IaaS云计算服务模型的组合，此外有很多业务会鼓励开发者使用PaaS去构建应用。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSaaS举例\u003c/strong\u003e： BigCommerce, Google Apps, Salesforce, Dropbox, MailChimp, ZenDesk, DocuSign, Slack, Hubspot.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePaaS举例\u003c/strong\u003e： AWS Elastic Beanstalk, Heroku, Windows Azure (mostly used as PaaS), Force.com, OpenShift, Apache Stratos, Magento Commerce Cloud.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eIaaS举例\u003c/strong\u003e： AWS EC2, Rackspace, Google Compute Engine (GCE), Digital Ocean, Magento 1 Enterprise Edition*.\u003c/p\u003e","title":"IaaS vs PaaS vs SaaS"},{"content":"概述 这篇文章介绍Go编程里的Pipeline模式。如果是对Unix/Linux命令行熟悉的人会知道，Pipeline其实就是把每个命令拼接起来完成一个组合功能的技术。当下诸如流式处理，函数式编程，以及应用Gateway对微服务进行简单API编排，其实都受pipeline技术方式的影响。换句话说，这种技术能够很容易得把代码按照单一职责的原则拆分成多个高内聚低耦合的小模块，然后拼装起来去完成比较复杂的功能。\n​\n","permalink":"http://localhost:64667/posts/programming/design-pattern/go-pipeline/","summary":"\u003ch2 id=\"概述\"\u003e概述\u003c/h2\u003e\n\u003cp\u003e这篇文章介绍Go编程里的Pipeline模式。如果是对Unix/Linux命令行熟悉的人会知道，Pipeline其实就是把每个命令拼接起来完成一个组合功能的技术。当下诸如流式处理，函数式编程，以及应用Gateway对微服务进行简单API编排，其实都受pipeline技术方式的影响。换句话说，这种技术能够很容易得把代码按照\u003ccode\u003e单一职责\u003c/code\u003e的原则拆分成多个\u003ccode\u003e高内聚低耦合\u003c/code\u003e的小模块，然后拼装起来去完成比较复杂的功能。\u003c/p\u003e\n\u003cp\u003e​\u003c/p\u003e","title":"Go编程模式：Pipeline"},{"content":"这篇文章摘自陈皓（左耳朵耗子）的blog（2019/12/01上传），作为给自己的提醒。\n这一两周与几个朋友聊天，有年轻的90后，也有大叔级的70后，这些人在我看来都是很有能力的人，但是一些喜好过于强烈，让我不经意地回顾了我工作20年来身边的人，有发展得好的，也有发展的不好的，有些人是很可惜的，因为限制他们的不是其它人，也不是环境，而是自己，所以，很想写下这篇文章。（注：这篇文章可能会是一篇说教的文章，所以，可能会让你看着犯困，所以，我会尽量地短一些，而且尽可能多讲故事，少道理，这里的故事，全是真实发生的）\n几个故事 2019年年初，我面试了一个很年轻的小伙子（93/94年出生），这个小伙子特别有灵性，也很聪明，计算机专业出身，也很喜欢技术，基础和学习能力也很好。在我这20年来认识的人中，如果他能呆在北京、上海、深圳这样的城市，我保证不出三年，他会成为他们同龄人中非常出色的技术人员，如果有个好的舞台有一个好的团队带他，他的未来会非常成功。然而，这个小伙子有两大喜好：1）只愿（或是说被迫）呆在一个毫无IT的环境的三/四线城市，2）对技术有非常大的偏好，只喜欢Go语言，非常不喜欢其它的语言，比如：Java（离开Java的世界，基本上离开了做架构的世界（相关解释见文末））。\n他的这两个喜好，足以让一个未来会很优秀的人毁掉，因为，这个时代没有限制他，他的能力也没有限制他，但是他的意识完完全全地限制了他。\n他把自己最宝贵的青春放在了很烂的项目上，就算能用一些新的技术，他也只能算是自娱自乐，在实验室中玩玩具罢了。 他把自己的技术栈封闭起来，而直接放弃了这个时代最具工业化的技术Java，对于一个好的程序员来说，同时掌握几门语言和技术完全是没什么问题，但是自己封闭了自己的视野。 实在是非常可惜，我本来是可以为他介绍到一些很不错的公司的，但是他这样的习性，等于自己把自己未来的门给关上了，虽然我跟他长谈过，但是我也没有办法叫醒不想醒的人……\n视野、环境和舞台，对一个人的限制是非常大的。井蛙不知道大海，被空间维度所限制；夏虫不知道冬天，是被时间维度所限制；圈养的动物没有斗志，是被自己意识所限制。 偏见和不开放，对一个人的限制是真正有毁灭性的。主动让自己成为一个瞎子和聋子，主动把自己的能力阉割掉，这是一件令人痛心的事。想想大清的闭关锁国是如何让亚洲第一的北洋水师给毁掉的…… 我还有个同学，他的技术并不差，就算呆在昆明这种很落后的地方，他也非常地好学，学习英文，学习各种新技术，对技术没有任何的偏好，喜欢C/C++/Java/Python/Shell，同样喜欢前端Javascript，对基础知识非常地踏实，他在技术上没有限制自己的潜力，有什么就学什么。后来，我带他玩Docker/Go/K8S……分布式架构，他也上手的很快……像他这样的人，技术能力完全没得说，比我还大一岁，44岁了，还是一样的天天追代码细节，看Youtube的各种大会，翻github里的各种issue和pull request……\n我同学这人，拥有了成为一个技术牛人几乎所有的条件：基础知识过硬，细节扎得深，面很广，学习能力强，有英文能力，逻辑思维能力不错，非常的自律，执行力也很强，抓得住重点……然而，只有一个小问题，就是没有到大公司历练过，我三番五次叫他从昆明出来，但是最终他都呆在昆明这个城市没有出来，因为有所谓的家庭约束。然而，我身边还有好些人，把自己家从北京搬到上海，从上海搬到深圳，从厦门搬到深圳……这样的人大有人在……像他这样的能力，在哪个公司都会是主力和骨干，对于一个公司的主力和骨干来说，家庭上的这些问题都是小问题都是有很多解的……\n另外，我这个同学还是一个比较悲观的人，任何事情都是先想到不好的事，他关注负面的东西会胜于正面的东西，而且他还有一定的社交恐惧，怕与人相处和交流，时间越长越害怕，甚至有时候直接跟我说，“我就是不想改变”这样的话……其实，我以前也是一个很害怕与人交流的人，面试的时候，我根本不敢正眼看面试官一眼，也不知道与人怎么交流。但是，我与他不一样，我努力克服，不断地面试，与人面对面的交流，到一线技术客服接用户的电话，在公司里做分享，慢慢地到外面分享……3-5年就完全克服掉了。\n其实，很多事情，完全是有解的，也没有必要担心，自己的心理障碍也是可以克服的，重点就是自己愿不愿意，只要愿意完成了一半，接下来就是不断的摸爬滚打坚持了。\n不限制自己的人，会穷举各种方法来解决问题，限制自己的人，只会找各式各样的问题或借口。 不限制自己的人，会努力改变自己的问题和缺陷，限制自己的人，会放任自己。 另外几个故事 我还有另外几个故事（活到四十多，能看到好多人十几年的发展过程，感觉有点上帝视角了）\n我还有一个以前团队里的一个小伙，人是很聪明，但就完全就是野路子，他对技术没有什么偏好，一个PHP程序员，做那个Discuz!论坛，公司被并购了，转成Java，开始研究Java的各种细节，对技术从来没有什么偏见，有什么就玩什么，每做一个项目，就算是一样的他都要用新的技术做一遍，然后跟着我做云计算，我教他TCP，教他C/C++，后来一起玩Docker/Go，等等，反正是一点就通，他是我见过学习能力最强的人。但是，有一个事他一直与我的想法不一样，就是我希望他先把软件设计好，再写代码，他非常不能理解，他习惯于直接动手开干，然后有什么问题就整什么问题，我也很难教育他。\n有一天，他电话面了一下Facebook，电话面了15分钟后对方就放弃了，他受到了严重的打击。然后，他就开始找菲利宾人练英文口语了，我也让他做算法题，然后，他才发现，一道连算法都不是的纯编程题都提交几次都过不了，等他做完了Leetcode最初的那151道题后，整个人都改变了，写代码前认认真真地在纸上把程序的状态，处理时序以及可能遇到的一些条件先罗列出来，然后，进行逻辑设计后，再写，从此，他就开启他更大的天地了。我后来把他推荐给了微软，先在中国的Bing，在中国升好2-3级，然后去了美国的Azure，现在听说他准备要跟 k8s 的 co-founder Brendan Burns 混了（虽然，他现在还在印度人手下，但是，我真的不知道他未来能玩多大，因为今年他才33岁，而且非常聪明）\n他以前是把自己封闭起来的，我叫他出来，他也不出来，后来因为一些办公室政治的原因不得不来找我，于是我就带着他玩了两年，跟他讲了很多外面的世界是怎么玩的，他这个人也是一个相当不善于社交的人，但是心是开放的，愿意接受新的东西，虽然对技术也有一定偏见，比如不喜欢Windows，但是也不会不喜欢到完全封闭。后来我跟他说，微软的技术相当的强的，你看到的技术只是表面，深层次的东西都是相通的，直到他到了微软后发现各种牛逼的东西，对微软系统的技术的态度也有了改变，而且我让他跟我说很多微软那边的事，我发现，他对技术了解的维度已经是越来越高级的了…… 还是我以前团队的一个小伙，他是一个前端，他说前端的东西没什么意思，想来找我做后端，我也一点点带他……后来，我说，你如果想要玩得好，你必需来北京，无论现在你觉得过得有多好，你都要放弃掉，然后，尽最大可能出去经历一下世界最顶尖的公司，我甚至跟他说，如果他女朋友不跟来的话，就先分开一段时间，先自己立业，他来北京的时候，他之前的同事都等着看他的笑话，我说，那些人连想都不敢想，不必管他们。于是，他去了Amazon，再过了一年去了西雅图，我跟他说，接下来就是去AWS，然后，如果有足够的野心，用自己的年轻这个资本去硅谷创业公司赌一把……未来他怎么样我不知道，但至少他没有限制自己，他的未来不会有封顶……\n也是我的同学，我跟他在大学是上下铺，后来他去了人民大学读计算机博士，大学的时候做国产数据库kingbase，然后去了一家外企，天天被派到用户那边做数据分析，后来，他想回科研单位做国产数据库，我说，别啊，你的技术比我好太多，还有博士理论加持，你不去国外顶尖公司玩玩，你不知道自己有多强的，于是他跟公司申请去了国外做核心，后来因为Hadoop的原因，公司的产品最终成为了历史，于是我说，你来了美国么，你一定要去AWS，于是他就去了AWS的Aurora团队，成为了AWS明星级产品的中坚力量，天天在改MySQL的核心源码，干了两年，正在晋升 Principal Software Engineer ……\n这里我到不是说出国有多牛，也许你只关注能挣多少钱，但是我想说，他们之所以能有这样的际遇，除了他们本来就有实力，还更因为他们从来不给自己设制什么限制，就是那种“艺多不压身”，有什么就学什么，有更高的就去向更高的迈进，其它的像家庭什么的问题其实都是会有解的，真的不必担心太多……\n别限制了自己 上面的这些故事，也许你能看得懂，也许你看得不一定能懂，这里，让我来做个总结吧\n做有价值的事。这个世界对计算机人才的要求是供不应求的，所以，不要让自己为自己找各式各样的借口，让自己活在“玩玩具”、“搬砖”和“使蛮力加班”的境地。其实，我发现这世界上有能力的人并不少，但是有品味的人的确很少。所谓的有价值，就是，别人愿付高价的，高技术门槛的，有创造力的，有颠覆性的…… 扩大自己的眼界，开放自己的内心。人要变得开放，千万不要做一个狭隘的民族主义者，做一个开放的人，把目光放在全人类这个维度，不断地把自己融入到世界上，而不是把自己封闭起来，这里，你的英文语言能力对你能不能融入世界是起决定性的作用。开放自己的心态，正视自己的缺点，你才可能往前迈进。你的视野决定了你的知不知道要去哪，你的开放决定了你想不想去。 站在更高的维度。面的维度会超过点的维点，空间的维度会超过面的维度，在更高维度上思考和学习，你会获得更多。整天在焦虑那些低维度的事（比如自己的薪水、工作的地点、稳不稳定、有没有户口……），只会让你变得越来越平庸，只要你站在更高的维度（比如： 眼界有没有扩大、可能性是不是更多、竞争力是不是更强、能不能解决更大更难的问题、能创造多大的价值……），时间会让你明白那些低维度的东西全都不是事儿。技术学习上也一样，站在学习编程语法特性的维度和站在学习编程范式、设计模式的维度是两种完全不一样的学习方式。 精于计算得失。很多人其实不是很懂计算。绝大多数人都是在算计自己会失去多少，而不会算会得到多少。而一般的人也总是在算短期内会失去什么，优秀则总是会算我投入后未来会有什么样的回报，前者在算计今天，目光短浅，而后者则是舍在今天，得在明天，计算的是未来。*精于计算得失的，就懂得什么是投资，不懂的只会投机。对于赚钱，你可以投机，但是对于自己最好还是投资。* 勇于跳出传统的束缚。有时候，跳出传统并不是一件很容易的事，因为大多数人都会对未知有恐惧的心理。比如：我看到很多人才都被大公司垄断了，其实，有能力的人都不需要加入大公司，有能力的人是少数，这些少数的人应该是所有的公司share着用的，这样一来，对于所有的人都是利益最大化的。这样的事现在也有，比如：律师、设计师……。但是，绝大多数有能力的技术人员是不敢走出这步。我在2015年到2016年实践过一年半，有过这些实践，做“鸡”的比“二奶”好多了，收入也好很多很多（不好意思开车了）…… 庄子说过几句话——\n井蛙不可以语于海者，拘于虚也；//空间局限\n夏虫不可以语于冰者，笃于时也；//时间局限\n曲士不可以语于道者，束于教也。//认识局限\n别自己墙了自己，人最可悲的就是自己限制自己，想都不敢想，共勉！\n————————————————————\n注：这篇文章就是要劝大家更为开放，让自己有更多的可能性，能到更高的层次，做更有价值的事，成为更强更好的人……当然，如果你觉得你只想做一个平凡人，也和本文并不冲突……另外你也不要觉得这篇文章是让你要成为一个精英，但你一定要去摸高……这篇文章是告诉你一种面对人生的思考方式，在这种思考方式下，你会有更多的可能性，更大的场景……而不是直接把自己归到“平常人”，把自己“墙”了！\n注：我以为用Java适合做架构这事应该是常识了，但是评论中有很多人非常反对这个事。那我解释一下吧：首先，小型的项目用什么语言都行，爱用什么用什么。但是，真正的企业级架构就不一样了，其中并不仅仅只是RESTful API或RPC，还有各种配套设施和控制系统，比如：应用网关，服务发现、配置中心、健康检查、服务监控、服务治理（熔断、限流、幂等、重试、隔离、事务补偿）、Tracing监控、SOA/ESB、CQRS、EDA……这些东西在非Java的技术栈体系内，很难看到全貌，Java强大的生态环境，就是让你把注意力放到更高层次的架构和业务上来的。（千万不要觉得，整几个服务RPC一下，加个缓存，加个队列，就能叫架构，那只是系统集成罢了）\n","permalink":"http://localhost:64667/posts/programming/do-not-wall/","summary":"\u003cp\u003e\u003cem\u003e\u003cstrong\u003e这篇文章摘自陈皓（左耳朵耗子）的blog（2019/12/01上传），作为给自己的提醒。\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e这一两周与几个朋友聊天，有年轻的90后，也有大叔级的70后，这些人在我看来都是很有能力的人，但是一些喜好过于强烈，让我不经意地回顾了我工作20年来身边的人，有发展得好的，也有发展的不好的，有些人是很可惜的，因为限制他们的不是其它人，也不是环境，而是自己，所以，很想写下这篇文章。（注：这篇文章可能会是一篇说教的文章，所以，可能会让你看着犯困，所以，我会尽量地短一些，而且尽可能多讲故事，少道理，这里的故事，全是真实发生的）\u003c/p\u003e\n\u003ch2 id=\"几个故事\"\u003e几个故事\u003c/h2\u003e\n\u003cp\u003e2019年年初，我面试了一个很年轻的小伙子（93/94年出生），这个小伙子特别有灵性，也很聪明，计算机专业出身，也很喜欢技术，基础和学习能力也很好。在我这20年来认识的人中，如果他能呆在北京、上海、深圳这样的城市，我保证不出三年，他会成为他们同龄人中非常出色的技术人员，如果有个好的舞台有一个好的团队带他，他的未来会非常成功。然而，这个小伙子有两大喜好：1）只愿（或是说被迫）呆在一个毫无IT的环境的三/四线城市，2）对技术有非常大的偏好，只喜欢Go语言，非常不喜欢其它的语言，比如：Java（离开Java的世界，基本上离开了做架构的世界（\u003cstrong\u003e相关解释见文末\u003c/strong\u003e））。\u003c/p\u003e\n\u003cp\u003e他的这两个喜好，足以让一个未来会很优秀的人毁掉，因为，这个时代没有限制他，他的能力也没有限制他，但是他的意识完完全全地限制了他。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e他把自己最宝贵的青春放在了很烂的项目上，就算能用一些新的技术，他也只能算是自娱自乐，在实验室中玩玩具罢了。\u003c/li\u003e\n\u003cli\u003e他把自己的技术栈封闭起来，而直接放弃了这个时代最具工业化的技术Java，对于一个好的程序员来说，同时掌握几门语言和技术完全是没什么问题，但是自己封闭了自己的视野。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e实在是非常可惜，我本来是可以为他介绍到一些很不错的公司的，但是他这样的习性，等于自己把自己未来的门给关上了，虽然我跟他长谈过，但是我也没有办法叫醒不想醒的人……\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e视野、环境和舞台，对一个人的限制是非常大的。井蛙不知道大海，被空间维度所限制；夏虫不知道冬天，是被时间维度所限制；圈养的动物没有斗志，是被自己意识所限制。\u003c/li\u003e\n\u003cli\u003e偏见和不开放，对一个人的限制是真正有毁灭性的。主动让自己成为一个瞎子和聋子，主动把自己的能力阉割掉，这是一件令人痛心的事。想想大清的闭关锁国是如何让亚洲第一的北洋水师给毁掉的……\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e我还有个同学，他的技术并不差，就算呆在昆明这种很落后的地方，他也非常地好学，学习英文，学习各种新技术，对技术没有任何的偏好，喜欢C/C++/Java/Python/Shell，同样喜欢前端Javascript，对基础知识非常地踏实，他在技术上没有限制自己的潜力，有什么就学什么。后来，我带他玩Docker/Go/K8S……分布式架构，他也上手的很快……像他这样的人，技术能力完全没得说，比我还大一岁，44岁了，还是一样的天天追代码细节，看Youtube的各种大会，翻github里的各种issue和pull request……\u003c/p\u003e\n\u003cp\u003e我同学这人，拥有了成为一个技术牛人几乎所有的条件：基础知识过硬，细节扎得深，面很广，学习能力强，有英文能力，逻辑思维能力不错，非常的自律，执行力也很强，抓得住重点……然而，只有一个小问题，就是没有到大公司历练过，我三番五次叫他从昆明出来，但是最终他都呆在昆明这个城市没有出来，因为有所谓的家庭约束。然而，我身边还有好些人，把自己家从北京搬到上海，从上海搬到深圳，从厦门搬到深圳……这样的人大有人在……像他这样的能力，在哪个公司都会是主力和骨干，对于一个公司的主力和骨干来说，家庭上的这些问题都是小问题都是有很多解的……\u003c/p\u003e\n\u003cp\u003e另外，我这个同学还是一个比较悲观的人，任何事情都是先想到不好的事，他关注负面的东西会胜于正面的东西，而且他还有一定的社交恐惧，怕与人相处和交流，时间越长越害怕，甚至有时候直接跟我说，“我就是不想改变”这样的话……其实，我以前也是一个很害怕与人交流的人，面试的时候，我根本不敢正眼看面试官一眼，也不知道与人怎么交流。但是，我与他不一样，我努力克服，不断地面试，与人面对面的交流，到一线技术客服接用户的电话，在公司里做分享，慢慢地到外面分享……3-5年就完全克服掉了。\u003c/p\u003e\n\u003cp\u003e其实，很多事情，完全是有解的，也没有必要担心，自己的心理障碍也是可以克服的，重点就是自己愿不愿意，只要愿意完成了一半，接下来就是不断的摸爬滚打坚持了。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e不限制自己的人，会穷举各种方法来解决问题，限制自己的人，只会找各式各样的问题或借口。\u003c/li\u003e\n\u003cli\u003e不限制自己的人，会努力改变自己的问题和缺陷，限制自己的人，会放任自己。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"另外几个故事\"\u003e另外几个故事\u003c/h2\u003e\n\u003cp\u003e我还有另外几个故事（活到四十多，能看到好多人十几年的发展过程，感觉有点上帝视角了）\u003c/p\u003e\n\u003cp\u003e我还有一个以前团队里的一个小伙，人是很聪明，但就完全就是野路子，他对技术没有什么偏好，一个PHP程序员，做那个Discuz!论坛，公司被并购了，转成Java，开始研究Java的各种细节，对技术从来没有什么偏见，有什么就玩什么，每做一个项目，就算是一样的他都要用新的技术做一遍，然后跟着我做云计算，我教他TCP，教他C/C++，后来一起玩Docker/Go，等等，反正是一点就通，他是我见过学习能力最强的人。但是，有一个事他一直与我的想法不一样，就是我希望他先把软件设计好，再写代码，他非常不能理解，他习惯于直接动手开干，然后有什么问题就整什么问题，我也很难教育他。\u003c/p\u003e\n\u003cp\u003e有一天，他电话面了一下Facebook，电话面了15分钟后对方就放弃了，他受到了严重的打击。然后，他就开始找菲利宾人练英文口语了，我也让他做算法题，然后，他才发现，一道连算法都不是的纯编程题都提交几次都过不了，等他做完了Leetcode最初的那151道题后，整个人都改变了，写代码前认认真真地在纸上把程序的状态，处理时序以及可能遇到的一些条件先罗列出来，然后，进行逻辑设计后，再写，从此，他就开启他更大的天地了。我后来把他推荐给了微软，先在中国的Bing，在中国升好2-3级，然后去了美国的Azure，现在听说他准备要跟 k8s 的 co-founder \u003ca href=\"https://github.com/brendandburns\"\u003eBrendan Burns\u003c/a\u003e 混了（虽然，他现在还在印度人手下，但是，我真的不知道他未来能玩多大，因为今年他才33岁，而且非常聪明）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e他以前是把自己封闭起来的，我叫他出来，他也不出来，后来因为一些办公室政治的原因不得不来找我，于是我就带着他玩了两年，跟他讲了很多外面的世界是怎么玩的，他这个人也是一个相当不善于社交的人，但是心是开放的，愿意接受新的东西，虽然对技术也有一定偏见，比如不喜欢Windows，但是也不会不喜欢到完全封闭。后来我跟他说，微软的技术相当的强的，你看到的技术只是表面，深层次的东西都是相通的，直到他到了微软后发现各种牛逼的东西，对微软系统的技术的态度也有了改变，而且我让他跟我说很多微软那边的事，我发现，他对技术了解的维度已经是越来越高级的了……\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e还是我以前团队的一个小伙，他是一个前端，他说前端的东西没什么意思，想来找我做后端，我也一点点带他……后来，我说，你如果想要玩得好，你必需来北京，无论现在你觉得过得有多好，你都要放弃掉，然后，尽最大可能出去经历一下世界最顶尖的公司，我甚至跟他说，如果他女朋友不跟来的话，就先分开一段时间，先自己立业，他来北京的时候，他之前的同事都等着看他的笑话，我说，那些人连想都不敢想，不必管他们。于是，他去了Amazon，再过了一年去了西雅图，我跟他说，接下来就是去AWS，然后，如果有足够的野心，用自己的年轻这个资本去硅谷创业公司赌一把……未来他怎么样我不知道，但至少他没有限制自己，他的未来不会有封顶……\u003c/p\u003e\n\u003cp\u003e也是我的同学，我跟他在大学是上下铺，后来他去了人民大学读计算机博士，大学的时候做国产数据库kingbase，然后去了一家外企，天天被派到用户那边做数据分析，后来，他想回科研单位做国产数据库，我说，别啊，你的技术比我好太多，还有博士理论加持，你不去国外顶尖公司玩玩，你不知道自己有多强的，于是他跟公司申请去了国外做核心，后来因为Hadoop的原因，公司的产品最终成为了历史，于是我说，你来了美国么，你一定要去AWS，于是他就去了AWS的Aurora团队，成为了AWS明星级产品的中坚力量，天天在改MySQL的核心源码，干了两年，正在晋升 Principal Software Engineer ……\u003c/p\u003e\n\u003cp\u003e这里我到不是说出国有多牛，也许你只关注能挣多少钱，但是我想说，他们之所以能有这样的际遇，除了他们本来就有实力，还更因为他们从来不给自己设制什么限制，就是那种“艺多不压身”，有什么就学什么，有更高的就去向更高的迈进，其它的像家庭什么的问题其实都是会有解的，真的不必担心太多……\u003c/p\u003e\n\u003ch2 id=\"别限制了自己\"\u003e别限制了自己\u003c/h2\u003e\n\u003cp\u003e上面的这些故事，也许你能看得懂，也许你看得不一定能懂，这里，让我来做个总结吧\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e做有价值的事\u003c/strong\u003e。这个世界对计算机人才的要求是供不应求的，所以，不要让自己为自己找各式各样的借口，让自己活在“玩玩具”、“搬砖”和“使蛮力加班”的境地。其实，我发现这世界上有能力的人并不少，但是有品味的人的确很少。\u003cstrong\u003e所谓的有价值，就是，别人愿付高价的，高技术门槛的，有创造力的，有颠覆性的\u003c/strong\u003e……\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e扩大自己的眼界，开放自己的内心\u003c/strong\u003e。人要变得开放，千万不要做一个狭隘的民族主义者，做一个开放的人，把目光放在全人类这个维度，不断地把自己融入到世界上，而不是把自己封闭起来，这里，\u003cstrong\u003e你的英文语言能力对你能不能融入世界是起决定性的作用\u003c/strong\u003e。开放自己的心态，正视自己的缺点，你才可能往前迈进。\u003cstrong\u003e你的视野决定了你的知不知道要去哪，你的开放决定了你想不想去\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e站在更高的维度\u003c/strong\u003e。面的维度会超过点的维点，空间的维度会超过面的维度，在更高维度上思考和学习，你会获得更多。\u003cstrong\u003e整天在焦虑那些低维度的事（比如自己的薪水、工作的地点、稳不稳定、有没有户口……），只会让你变得越来越平庸，只要你站在更高的维度（比如： 眼界有没有扩大、可能性是不是更多、竞争力是不是更强、能不能解决更大更难的问题、能创造多大的价值……），时间会让你明白那些低维度的东西全都不是事儿\u003c/strong\u003e。技术学习上也一样，站在学习编程语法特性的维度和站在学习编程范式、设计模式的维度是两种完全不一样的学习方式。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e精于计算得失\u003c/strong\u003e。很多人其实不是很懂计算。绝大多数人都是在算计自己会失去多少，而不会算会得到多少。而一般的人也总是在算短期内会失去什么，优秀则总是会算我投入后未来会有什么样的回报，前者在算计今天，目光短浅，而后者则是舍在今天，得在明天，计算的是未来。\u003cem\u003e\u003cstrong\u003e*精于计算得失的，就懂得什么是投资，不懂的只会投机。对于赚钱，你可以投机，但是对于自己最好还是投资。*\u003c/strong\u003e\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e勇于跳出传统的束缚\u003c/strong\u003e。有时候，跳出传统并不是一件很容易的事，因为大多数人都会对未知有恐惧的心理。比如：我看到很多人才都被大公司垄断了，其实，有能力的人都不需要加入大公司，有能力的人是少数，这些少数的人应该是所有的公司share着用的，这样一来，对于所有的人都是利益最大化的。这样的事现在也有，比如：律师、设计师……。但是，绝大多数有能力的技术人员是不敢走出这步。我在2015年到2016年实践过一年半，有过这些实践，做“鸡”的比“二奶”好多了，收入也好很多很多（不好意思开车了）……\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e庄子说过几句话——\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e井蛙不可以语于海者，拘于虚也；//空间局限\u003c/p\u003e\n\u003cp\u003e夏虫不可以语于冰者，笃于时也；//时间局限\u003c/p\u003e\n\u003cp\u003e曲士不可以语于道者，束于教也。//认识局限\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e别自己墙了自己，人最可悲的就是自己限制自己，想都不敢想，共勉！\u003c/p\u003e\n\u003cp\u003e————————————————————\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e注：这篇文章就是要劝大家更为开放，让自己有更多的可能性，能到更高的层次，做更有价值的事，成为更强更好的人……当然，如果你觉得你只想做一个平凡人，也和本文并不冲突……另外你也不要觉得这篇文章是让你要成为一个精英，但你一定要去摸高……这篇文章是告诉你一种面对人生的思考方式，在这种思考方式下，你会有更多的可能性，更大的场景……而不是直接把自己归到“平常人”，把自己“墙”了！\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e注：我以为用Java适合做架构这事应该是常识了，但是评论中有很多人非常反对这个事。那我解释一下吧：首先，小型的项目用什么语言都行，爱用什么用什么。但是，真正的企业级架构就不一样了，其中并不仅仅只是RESTful API或RPC，还有各种配套设施和控制系统，比如：应用网关，服务发现、配置中心、健康检查、服务监控、服务治理（熔断、限流、幂等、重试、隔离、事务补偿）、Tracing监控、SOA/ESB、CQRS、EDA……这些东西在非Java的技术栈体系内，很难看到全貌，\u003cstrong\u003eJava强大的生态环境，就是让你把注意力放到更高层次的架构和业务上来的\u003c/strong\u003e。（千万不要觉得，整几个服务RPC一下，加个缓存，加个队列，就能叫架构，那只是系统集成罢了）\u003c/p\u003e","title":"(转)别让自己墙了自己"},{"content":"此文转自曹春晖blog，也用于自己学习的一些参考\n博客地址\n阅读书籍 对于工程师来说，从书籍得来的知识是必不可少的。现在很多年轻的程序员会从网络博客来学习技术，但博客内容大多缺乏体系(主要说总结性质的博客内容)，不系统。很多博主为了掩饰自己的未知，遇到不知道的关键点就一笔带过，进而导致缺失。即使原作者非常努力，内容上没有缺失，你能从中获取的也只是别人总结好的知识，没有自己的主动思考，这中间便缺少过程式的沉淀，一味地满足于背诵别人总结好的知识，最后也只不过沦为他人的复读机而已。\n对于工程师来说，书籍依然是最重要的知识获取媒介。即使只是通过目录概览，也能获取某个领域的大致蓝图。\n目前大部分优秀的技术书籍依然以英文为主，能够读懂英文技术书籍是工程师的硬实力。英语阅读能力怎么训练呢？如果不是为了应试，可以尝试逼迫自己去翻译一些英文文档/文章来进行专门训练。举个例子，为了学习 Go，笔者曾经和社区的小伙伴合作翻译过《The Go Programming Language》，后来为了深入学习 es，参与了社区的 《es 权威指南》 的翻译和校对工作。如果某篇技术文档你从生理上很厌恶它，但是又觉得内容不得不学习的话，那你就逼迫自己去翻译它。千字以内的文档，周末抽一个下午就可以搞定。这里已经说是逼迫了，自然可以想见这个过程并不像打游戏那么轻松愉快，但只要熬过了这个阶段，阅读技术相关的英文文档可以显著提升速度。\n具备一定的英语能力之后，接下来就是从什么渠道去获取内容。如果对电子书不排斥的话，目前比较经济的选择是申请一个国内的 ACM 会员，并且用该会员去注册oreily 在线书店。一年大概 20 美元，可以及时地阅读到大部分出版社的技术出版物。因为现在出版社的网站大多还支持 early preview，所以你甚至可以在书籍还没有上市之前就预先学习内容，第一时间获取整个业界的一线情报，能够帮助你站在时代的潮头。等两年后同事拿到翻译生涩的中文版的时候，你已经可以从容地 diss 他在信息源上落后了自己整整两年。(当然，如果你有兴趣，国内的出版社一般在英文新书出版的时候会招募翻译志愿者，如果你对一个领域特别感兴趣，关注出版社的这些招募消息也可以去参与。这里要指出，不要对做翻译这件事情抱太高期望，重在提升自己的能力。想赚钱的话就算了。)\n如果喜欢一边阅读一边在页边写写画画，电子书还是稍微困难点，当然这个问题你也可以用 ipad pro + apple pencil 来解决。但有些人比较喜欢实体书捧在手上的实感，国外有些书甚至是个人出版物，例如笔者之前购入的《timeless law of software development》，这些书在互联网上正盗均无，只能考虑通过海淘渠道入手。前些年淘宝的海淘服务也可以用来淘书，书籍大多比较重，运费不菲。有些老书运费可能会到书费的一半让人格外肉疼。又因为国内对出版物管制比较严格，所以为了避险，这两年这些海淘服务商基本上都不帮忙代购出版物了。对于个人用户来说，也就只剩下了直邮和转运两种选择。直邮虽然比较便宜，但是万国联盟的 EMS 一走到中国可能就上了牛车，速度慢到突破极限。基本脑子稍微正常的都会选择转运。除了速度之外，有些出版社的书籍是只在美帝本土销售的，不支持 global delivery。\n走转运的话，需要办一张 visa 或者 mastercard 的多币种信用卡，这样才能在海外网站进行支付 。\n上面这些问题都解决了以后，书籍的获取就不再是问题。\n信息源 虽然文章开头对于传统的书籍大赞特赞，但书籍的缺点也是显而易见的。在技术领域，这个缺点就尤为明显：时效问题。如果我们所学习的是相对比较老的领域知识，那只要读书基本上就够了。\n但技术的发展日新月异，如果你想要成为知晓领域内所有新技术的那个人。你还是需要关注一些书籍以外的新闻源，下面是一些例子：\nGithub Trending Github Trending 代表的是一种风向，一般一个项目能上 trending 的话，可能是作者自己去 hacker news、reddit 做了宣传，也可能是被某个业界大佬带了流量。因为现在 Github 上的国人越来越多，很多国人学习技术比较显著的诉求其实只是面试(汗，一旦什么 xx interview/xx road to 架构师之类的仓库开了就会吸引一大批国人点星，近两年 trending 的质量有下跌趋势。\n不过最近 Github Trending 增加了按照 Spoken Language 筛选功能，所以你可以过滤特定的语言，相对比之前还是好多了。\nGithub 的 trending 一般按照语言区分，如果你想要成为某门语言的专家，那这种语言每天世界各地的人又造了什么新轮子上榜了总还是需要知道的。星星特别多的 Repo 去读读源代码也是一种乐趣。\n除了按照时间和星星来进行聚合，Github 上也有人开了各种 awesome-xxx 的总结页，这种仓库对于学习语言或者特定领域的技术来说也是很实用的。如果你恰巧又发现了领域的空白，拿自己的业余时间去造个轮子，也可以提 PR 进行收录。因为 awesome-xxx 大多是个人项目，因此作者一般还是比较友好的。不过现在 awesome-xxx 的项目越来越多，就有人会想去做一些 awesome 仓库的汇总。然后这些 awesome 的汇总又越来越多，就会有人继续向上进行汇总。所以就陆续有了 awesome-xxx，awesome-awesome，awesome-awesome-awesome。。。真是工程师们的黑色幽默。\nfollow 优秀的工程师 在世界各地有很多杰出的工程师，每天每月每年活跃在 Github 上。我们总是希望自己能在技术上做到一直精进，同时随着年龄和工龄的增长又会时不时陷入迷茫，这时候去看看同龄的优秀工程师，年纪更大的优秀工程师在这个时间段在写什么代码，在写什么博客，可能对于解决自己特定时期的迷茫有益。或许就发现了一个新的领域值得自己去奉献青春。\n在起步阶段你可能不知道该从哪里去找这些优秀的工程师，也有几个源头，如果你阅读到了精辟的代码，觉得作者水平拔群，那么马上去 Github 找到这个项目，并 follow 作者就是一个比较好的选择。如果你在某个地方听人说起了一个传奇的程序员，比如 geohot？那么在 Github 就赶紧 follow 他。如果你发现自己 follow 的人又 follow 了别人，那么也可以对这些延伸关系链上的人进行考察，如果很对自己胃口的话，同样可以考虑。\n在 follow 了足够的人之后，你的 Github 首页就能看到这些人每天的动作了。又是一个新的新闻源。\nreddit 相关社区 很多火起来的语言、技术领域社区在国内其实都有点分裂，大家都想要占个山头当大佬。而每个社区也都零零碎碎地汇集了一些好的内容。但因为谁也不服谁，国内的社区生态被人为地割裂了。我们没有办法在同一个社区获取或者搜索到所有我们想要知道的技术文章、问题、思考、总结。所以我建议还是去关注国外的社区吧。\nreddit 是一个不错的选择。当然，因为敏感词的关系，这个社区本身是被强了的。这里需要考察到你的越墙技能。\nreddit 的 rust 社区。\nThe Morning Paper 除了工程以外，在某个领域做得稍深之后，我们就需要去关注更前沿的理论部分了。作为一个工作了的码农，想要研习理论需要去阅读一些每年新发表的论文。在学校里读过一点论文的基本都知道，再好的文章因为一些荒唐的理由，都会带有大量的废话。\nThe Morning Paper 是一个国外某企业的 CTO(CTO 还天天读论文，神奇)创建的个人 blog，其中会帮助我们去解读很多新论文，省去了我们去阅读大量废话以及对于工业界人来说不那么重要的公式的时间。只当了解的话，是个非常不错的渠道。\n技术会议和公开课 除了阅读文字，阅览视频和与人面对面交流在有些时候也是必不可少的。有些自己冥思苦想而不得解的问题，在牛人的点播下片刻茅塞顿开。这也是所谓听君一席话胜读十年书的充分体现。比我们工作时间长，且经常总结的人经常能够给后入行的人带来广阔的视野和冲击性的理论，这些是文字所不能带给我们的。\n当然，在技术会议上听分享也要保持自己的头脑清醒，不要被那些天花乱坠的概念所吓退。有些人的分享很功利，其实只是一些旧概念的包装。而这些人出现在现场的目的也可能重在宣传自己方便跳槽，不要被骗了。在听主题的时候稍微有一些选择性，尽量避开这种天花乱坠的忽悠选手。\n除了技术会议，ytb 上有很多优秀的公开课。从现在往前推十年的话，很多人抱怨因为经济、家庭原因，没有机会出国深造，接受世界一流大学的计算机教育。而公开课的出现已经使财务、距离对我们的限制消失了。在学校里学习的时候，一门课程也就 36-48 个课时，外加上思考、作业的时间，就算是 72-96 个小时。对于已经工作的社畜来说，一个月的周末有 8 天，稍微努努力，基本上一个月就可以学完一门公开课了。这既可以弥补你学生时代的遗憾，同时也可以填补某些人嘴里所谓的虚无缥缈的“基础不行”。吊打某些自视甚高的老油条。国外的计算机课程往往会随着工业界的发展而随时更新，例如早期 Sony 的 Playstation 3 上市后，便有学校的体系架构课专门讲解 IBM Cell 处理器的架构设计，前年或更早的时候，已经有学校向学生讲解 Intel i7 处理器中的一些更现代的设计理念。这可比一些工作十年但从来不关注新技术的人所告诉你的结论强太多了。\n多做开源 有些同学，在阅读了大量的代码、设计方法论之后，可能依然在工作时陷入焦虑。为什么我们在企业内维护的代码都是一坨屎，为什么我每天写的东西就是在屎山上堆屎？\n大多数公司的软件生命周期其实很短，开源界没有靠谱的解决方案时，为了解决一些临时问题，企业倾向于以最小资源获取最大收益，即使是纯技术项目，我们在做的也都是一些丑陋的临时解决方案。甚至有些 MVP 版本产品的代码能活过一个星期就不错了。有些企业的内部技术工具虽然从性质上可以开源，但为什么开不了？还不是因为历史包袱重，代码写的屎。有些时候不是工程师不追求优秀的代码，工期紧张的情况下写着写着就变形了。\n好在业余时间是属于我们自己的，我们可以用最严格的标准来要求自己编写自己的开源项目。并且以产品的方式来对这些项目进行运营，这不仅能提升我们的技术能力，同时也会给我们带来更多的机会。如果自己的开源项目成功的话，同时可以给自己带来更大的业界影响力，何乐而不为？\n多做总结 在有了足够的信息获取渠道，和个人能力提升手段之后，还应该多进行总结。对于工作 3 年以上的工程师，总结并不只是为了面试。一个人的工作内容一定会随着时间的推进而不断变化，工作领域也可能在跳槽之后发生变化，怎么让自己的历史积累不成为时代的眼泪？就是要做总结。\n比较好的总结手段有：\n建立自己的测试代码库 这一点我认为做的最好的是，learn，这是一个韩国裔的工程师。如果从大学开始就建立这样的习惯的，在技术上走过的所有的路都可以清晰可见。\n如果自己的总结能够让别人看上去也赏心悦目，那还是比较成功的。即使做不到这种程度，我们建立自己的代码库之后，想要搜索一些拿来演示的代码片段也会方便不少。\n建立自己的 blog 博客是个人思考的轨迹，我们的工作并不是简单的完成任务。在完成任务的同时应提炼自己的方法论，逐渐形成自己看待技术问题，看待业务，看待公司，看待业界乃至看待整个世界的观点。独立思考是一个人最重要的品质。\n从进入滴滴开始，我写个人 blog 也大概有 4 年有余，即使初始只能写一些简单的内容，到现在我已经可以从任意我想要的角度切入进行较为完备的分析和观点总结。\n对于工程师来说，除了代码能力之外，文字能力也是需要进行训练的。能够把事情做好，还要能在必要的时候，通过文章来把自己的工作宣传出去。建立自己的个人品牌。\n建立自己的笔记库 除了完整的博客输出，有一些零散的知识不好组织，便可以放在自己的笔记里，这些可以是别人的分享的备份，也可能只是记录一些简单的命令。记录笔记是很好的习惯，因为一个人不可能永远记得所有工具的使用方法。必要的时候通过查阅笔记快速地回忆起来就已经足够了。\n锻炼演技 因为工程师工作 80% 的时间都是在和技术、代码打交道，所以也比较容易忽视一些软技能的训练，这里不说一些敏感的内容，只说说口才。据我观察，大多数的工程师其实并没有意识到这是一个问题。即使在纯技术人员交流的场合也会发现有些人的表达能力著实一般，其它技术人员理解起来都费劲，何况去和非技术人员交流。\n人这一辈子，最重要的是能把路越走越宽。对于工程师来说，能够锻炼软技能的场合其实不是很多，但也不代表完全没有。即使没有也可以自己创造机会，例如组内、组间、部门内的技术分享都是不错的机会。\n更大规模的技术分享可能因为主办方“势力眼”，在你级别不高或者影响力不大的时候，不提供给你这样的机会，但是作为一个向上的人，迟早会有走到这一步的一天。你所要做的是提前做好准备，在那一天到来的时候，在聚光灯下旁征博引，谈笑风生。\n祝大家都能成为更好的自己！\n","permalink":"http://localhost:64667/posts/programming/how-to-learn/","summary":"\u003cp\u003e\u003ccode\u003e此文转自曹春晖blog，也用于自己学习的一些参考\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://xargin.com/every-arch-will-finally-become-shit/\"\u003e博客地址\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"阅读书籍\"\u003e阅读书籍\u003c/h2\u003e\n\u003cp\u003e对于工程师来说，从书籍得来的知识是必不可少的。现在很多年轻的程序员会从网络博客来学习技术，但博客内容大多缺乏体系(主要说总结性质的博客内容)，不系统。很多博主为了掩饰自己的未知，遇到不知道的关键点就一笔带过，进而导致缺失。即使原作者非常努力，内容上没有缺失，你能从中获取的也只是别人总结好的知识，没有自己的主动思考，这中间便缺少过程式的沉淀，一味地满足于背诵别人总结好的知识，最后也只不过沦为他人的复读机而已。\u003c/p\u003e\n\u003cp\u003e对于工程师来说，书籍依然是最重要的知识获取媒介。即使只是通过目录概览，也能获取某个领域的大致蓝图。\u003c/p\u003e\n\u003cp\u003e目前大部分优秀的技术书籍依然以英文为主，能够读懂英文技术书籍是工程师的硬实力。英语阅读能力怎么训练呢？如果不是为了应试，可以尝试逼迫自己去翻译一些英文文档/文章来进行专门训练。举个例子，为了学习 Go，笔者曾经和社区的小伙伴合作翻译过\u003ca href=\"https://github.com/gopl-zh/gopl-zh.github.com\"\u003e《The Go Programming Language》\u003c/a\u003e，后来为了深入学习 es，参与了社区的 \u003ca href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html\"\u003e《es 权威指南》\u003c/a\u003e 的翻译和校对工作。如果某篇技术文档你从生理上很厌恶它，但是又觉得内容不得不学习的话，那你就逼迫自己去翻译它。千字以内的文档，周末抽一个下午就可以搞定。这里已经说是逼迫了，自然可以想见这个过程并不像打游戏那么轻松愉快，但只要熬过了这个阶段，阅读技术相关的英文文档可以显著提升速度。\u003c/p\u003e\n\u003cp\u003e具备一定的英语能力之后，接下来就是从什么渠道去获取内容。如果对电子书不排斥的话，目前比较经济的选择是申请一个国内的 ACM 会员，并且用该会员去注册\u003ca href=\"https://learning.oreilly.com/home/\"\u003eoreily 在线书店\u003c/a\u003e。一年大概 20 美元，可以及时地阅读到大部分出版社的技术出版物。因为现在出版社的网站大多还支持 early preview，所以你甚至可以在书籍还没有上市之前就预先学习内容，第一时间获取整个业界的一线情报，能够帮助你站在时代的潮头。等两年后同事拿到翻译生涩的中文版的时候，你已经可以从容地 diss 他在信息源上落后了自己整整两年。(当然，如果你有兴趣，国内的出版社一般在英文新书出版的时候会招募翻译志愿者，如果你对一个领域特别感兴趣，关注出版社的这些招募消息也可以去参与。这里要指出，不要对做翻译这件事情抱太高期望，重在提升自己的能力。想赚钱的话就算了。)\u003c/p\u003e\n\u003cp\u003e如果喜欢一边阅读一边在页边写写画画，电子书还是稍微困难点，当然这个问题你也可以用 ipad pro + apple pencil 来解决。但有些人比较喜欢实体书捧在手上的实感，国外有些书甚至是个人出版物，例如笔者之前购入的《timeless law of software development》，这些书在互联网上正盗均无，只能考虑通过海淘渠道入手。前些年淘宝的海淘服务也可以用来淘书，书籍大多比较重，运费不菲。有些老书运费可能会到书费的一半让人格外肉疼。又因为国内对出版物管制比较严格，所以为了避险，这两年这些海淘服务商基本上都不帮忙代购出版物了。对于个人用户来说，也就只剩下了直邮和转运两种选择。直邮虽然比较便宜，但是万国联盟的 EMS 一走到中国可能就上了牛车，速度慢到突破极限。基本脑子稍微正常的都会选择转运。除了速度之外，有些出版社的书籍是只在美帝本土销售的，不支持 global delivery。\u003c/p\u003e\n\u003cp\u003e走转运的话，需要办一张 visa 或者 mastercard 的多币种信用卡，这样才能在海外网站进行支付 。\u003c/p\u003e\n\u003cp\u003e上面这些问题都解决了以后，书籍的获取就不再是问题。\u003c/p\u003e\n\u003ch2 id=\"信息源\"\u003e信息源\u003c/h2\u003e\n\u003cp\u003e虽然文章开头对于传统的书籍大赞特赞，但书籍的缺点也是显而易见的。在技术领域，这个缺点就尤为明显：时效问题。如果我们所学习的是相对比较老的领域知识，那只要读书基本上就够了。\u003c/p\u003e\n\u003cp\u003e但技术的发展日新月异，如果你想要成为知晓领域内所有新技术的那个人。你还是需要关注一些书籍以外的新闻源，下面是一些例子：\u003c/p\u003e\n\u003ch3 id=\"github-trending\"\u003eGithub Trending\u003c/h3\u003e\n\u003cp\u003eGithub Trending 代表的是一种风向，一般一个项目能上 trending 的话，可能是作者自己去 hacker news、reddit 做了宣传，也可能是被某个业界大佬带了流量。因为现在 Github 上的国人越来越多，很多国人学习技术比较显著的诉求其实只是面试(汗，一旦什么 xx interview/xx road to 架构师之类的仓库开了就会吸引一大批国人点星，近两年 trending 的质量有下跌趋势。\u003c/p\u003e\n\u003cp\u003e不过最近 Github Trending 增加了按照 Spoken Language 筛选功能，所以你可以过滤特定的语言，相对比之前还是好多了。\u003c/p\u003e","title":"(转)工程师应该如何高效学习"},{"content":"这篇文章是我研究高负载网络服务器架构看到的的一个有趣的story，添加了我自身学习websocket的感受和记录，希望我能在飞机落地前写完:-)\nPreface 我们先描述一个问题作为讨论的中心：用户邮件的存储方法。\n对于这种主题，有很多种方式在系统内对邮件状态进行持续的追踪，比如系统事件是一个方式，另一种方式可以通过定期的系统轮询有关状态变化。\n这两种方式各有利弊，不过当我们讨论到邮件的时候，用户希望收到新邮件的速度越快越好。邮件轮询每秒约有50000个HTTP请求，其中60%返回304状态，也就是邮箱内没有任何修改。\n因此，为了减少服务器的负载并加快向用户传递邮件的速度，我们决定通过编写publisher-subscriber服务器(即bus, message broker, event channel)来重新发明轮子。一方面接受有关状态变更的通知，另外一个方面接受此类通知的订阅。\n改进前：\n+--------------+ (2) +-------------+ (1) +-----------+ | | \u0026lt;--------+ | | \u0026lt;--------+ | | | Storage | | API | HTTP | Browser | | | +--------\u0026gt; | | +--------\u0026gt; | | +--------------+ (3) +-------------+ (4) +-----------+ 改进后:\n+--------------+ +-------------+ WebSocket +-----------+ | Storage | | API | +----------\u0026gt; | Browser | +--------------+ +-------------+ (3) +-----------+ + ^ | (1) | (2) v + +-----------------------------------------+ | Bus | +-----------------------------------------+ 改进前的方案也就是browser定期去查询api并访问存储更改\n改进后的方案描述了新的架构，browser和通知api建立websocket连接，通知api是总线服务器的客户端，收到新的电子邮件后，storage会将它的通知发送到总线，并将总线发送给其subscribers。api确定发送接收通知的连接，并将其发送到用户的浏览器。\n这里我们将讨论API或Websocket服务器，最后我会告诉你这个服务器能够保持三百万的在线连接。\n常见方式 我们先来看在没有任何优化的情况下使用Go功能实现服务器的某个部分。在使用net/http\t之前，先来看看如何去接受和发送数据。注意，基于WebSocket协议的数据(例如JSON对象)在上下文中被称为packets(分组)。\nChannel struct 先来实现Channel，它包含通过WebSocket连接发送和接受此类数据包的逻辑结构\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // Packet represents application level data. type Packet struct { } // Channel wraps user connection. type Channel struct { conn net.Conn // WebSocket connection send chan Packet // Outgoing packets queue } func NewChannel(conn net.Conn) *Channel { c := \u0026amp;Channel{ conn: conn, send: make(chan Packet, N), } go c.reader() go c.writer() return c } 这里有个信息需要重视，也就是这两个reader/writer的goroutine，每一个goroutine需要自己的内存栈，初始大小为2~8KB，取决于操作系统和Go版本。根据上面提到的三百万在线连接的数量，我们需要24GB的内存(设堆栈为4KB)来用于存储所有连接，这里甚至还没有为Channel结构，以及传出数据库包ch.send和其他内部字段分配内存。可见问题比较大。\nI/O goroutine 我们来看看 reader 的实现：\n1 2 3 4 5 6 7 8 func (c *Channel) reader() { // We make a buffered read to reduce read syscalls. buf := bufio.NewReader(c.conn) for { pkt, _ := readPacket(buf) c.handle(pkt) } } 这里我们使用 bufio.Reader 来减少 read() 系统调用的数量，并读取 buf 缓冲区大小允许的数量。在无限循环中，我们_期待新数据的到来_。注意：是_期待新数据的到来_，我们一会儿再仔细讨论这一点。\n我们不考虑传入数据包的解析和处理，因为它对我们将讨论的优化并不重要。但是，buf 现在值得我们注意：默认情况下，它为 4KB，这意味着我们的连接还剩余 12 GB 内存没有使用。同样的，我们可以实现 writer：\n1 2 3 4 5 6 7 8 9 func (c *Channel) writer() { // we make buffered write to reduce write syscalls. buf := bufio.NewWriter(c.conn) for pkt := range c.send { _ := writePacket(buf, pkt) buf.Flush() } } HTTP 我们已经写好了一个简单的 Channel 实现，现在我们需要制造一个 WebSocket 连接来协同工作。由于我们任然处于_常见做法_一节中，因此我们不妨也用常见的方式来完成。\n注意：如果你不知道 WebSocket 的工作原理，值得一提的就是客户端通过一个特殊的 HTTP Upgrade 机制来切换到 WebSocket 协议。成功处理 Upgrade 请求后，服务器和客户端将使用 TCP 连接来交换 Websocket 的二进制帧。这里 给出了连接内帧结构的描述。\n1 2 3 4 5 6 7 8 9 10 import ( \u0026#34;net/http\u0026#34; \u0026#34;some/websocket\u0026#34; ) http.HandleFunc(\u0026#34;/v1/ws\u0026#34;, func(w http.ResponseWriter, r *http.Request) { conn, _ := websocket.Upgrade(r, w) ch := NewChannel(conn) // ... }) 请注意，http.ResponseWriter 会为 bufio.Reader 和 bufio.Writer 分配内存（各需要 4KB 的缓存）来初始化 *http.Request 和之后的响应写入。\n无论使用哪种 WebSocket 库，在成功响应 Upgrade 请求后，在 responseWriter.Hijack() 调用后服务器会收到 IO 缓存和 TCP 连接。\n提示：在某些情况下，go:linkname 可以使用 net/http.putBufio{Read,Writer} 将缓存返回给 net/http 内部的 sync.Pool 。\n因此，我们还需要 24 GB 内存来支撑三百万的链接。\n终上所述，我们需要 72GB 内存来支撑一个什么都还没做的应用。\n优化 我们来回顾一下我们介绍部分中讨论的内容，并记住用户连接的行为方式。切换到 WebSocket 后，客户端发送包含相关事件的数据包，或者说订阅事件。然后（不考虑诸如技术消息 ping/pong），客户端可以在整个生命周期中不发送任何其他内容。连接寿命可能持续几秒到几天。\n因此对于大多数的时间来说，我们的 Channel.reader() 和 Channel.writer() 在等待数据的处理用于接受或发送。与他们一起等待的是每个 4KB 的 IO 缓存。\nNetpoller ","permalink":"http://localhost:64667/posts/programming/golang/websocket/","summary":"\u003cp\u003e\u003cem\u003e这篇文章是我研究高负载网络服务器架构看到的的一个有趣的story，添加了我自身学习websocket的感受和记录，希望我能在飞机落地前写完:-)\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"preface\"\u003ePreface\u003c/h2\u003e\n\u003cp\u003e我们先描述一个问题作为讨论的中心：用户邮件的存储方法。\u003c/p\u003e\n\u003cp\u003e对于这种主题，有很多种方式在系统内对邮件状态进行持续的追踪，比如系统事件是一个方式，另一种方式可以通过定期的系统轮询有关状态变化。\u003c/p\u003e\n\u003cp\u003e这两种方式各有利弊，不过当我们讨论到邮件的时候，用户希望收到新邮件的速度越快越好。邮件轮询每秒约有50000个HTTP请求，其中60%返回304状态，也就是邮箱内没有任何修改。\u003c/p\u003e\n\u003cp\u003e因此，为了减少服务器的负载并加快向用户传递邮件的速度，我们决定通过编写publisher-subscriber服务器(即bus, message broker, event channel)来重新发明轮子。一方面接受有关状态变更的通知，另外一个方面接受此类通知的订阅。\u003c/p\u003e\n\u003cp\u003e改进前：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e+--------------+     (2)    +-------------+      (1)    +-----------+\n|              | \u0026lt;--------+ |             |  \u0026lt;--------+ |           |\n|    Storage   |            |     API     |     HTTP    |  Browser  |\n|              | +--------\u0026gt; |             |  +--------\u0026gt; |           |\n+--------------+     (3)    +-------------+      (4)    +-----------+\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e改进后:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e+--------------+            +-------------+   WebSocket  +-----------+\n|    Storage   |            |     API     | +----------\u0026gt; |  Browser  |\n+--------------+            +-------------+      (3)     +-----------+\n       +                           ^\n       | (1)                       | (2)\n       v                           +\n+-----------------------------------------+\n|                  Bus                    |\n+-----------------------------------------+\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e改进前的方案也就是browser定期去查询api并访问存储更改\u003c/p\u003e","title":"A Million WebSocket and Go"},{"content":"最近在看网络模型和go net的源码，以及各web框架例如fasthttp, weaver, gnet(更轻量)源码。fasthttp在github上已经写上了一个go开发的best practices examples,这里我也记录一些在源码中看到的一些技巧\n[]byte buffer的tricks 下面的一些tricks在fasthttp中被使用，自己的代码也可以用\n标准Go函数能够处理nil buffer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var ( // both buffers are uninitialized dst []byte src []byte ) dst = append(dst, src...) // is legal if dst is nil and/or src is nil copy(dst, src) // is legal if dst is nil and/or src is nil (string(src) == \u0026#34;\u0026#34;) // is true if src is nil (len(src) == 0) // is true if src is nil src = src[:0] // works like a charm with nil src // this for loop doesn\u0026#39;t panic if src is nil for i, ch := range src { doSomething(i, ch) } 所以可以去掉一些对[]bytebuffer的nil校验:\n1 2 3 4 srcLen := 0 if src != nil { srcLen = len(src) } 改成\n1 srcLen := len(src) 字符串能够直接append到[]byte上 1 dst = append(dst, \u0026#34;foobar\u0026#34;...) []bytebuffer能够扩展到它的cap 1 2 3 buf := make([]byte, 100) a := buf[:10] // len(a) == 10, cap(a) == 100. b := a[:100] // is valid, since cap(a) == 100. 所有fasthtto函数都接受nil的[]bytebuffer 1 2 statusCode, body, err := fasthttp.Get(nil, \u0026#34;http://google.com/\u0026#34;) uintBuf := fasthttp.AppendUint(nil, 1234) 减少[]byte的分配，尽量复用 有两种方式进行复用:\nsync.Pool slice = slice[:0] 所有的类型的Reset方法，都用了这个方式。比如类型URL，Args, ByteBuffer, Cookie, RequestHeader, ResponseHeader等 fasthttp里共有35个地方使用了sync.Pool。sync.Pool除了降低GC的压力，还能复用对象，减少内存分配，所以在自己写的goroutine pool中也对worker对象使用了sync.Pool。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 // 例如类型Server type Server struct { // ... ctxPool sync.Pool // 存RequestCtx对象 readerPool sync.Pool // 存bufio对象，用于读HTTP Request writerPool sync.Pool // 存bufio对象，用于写HTTP Request hijackConnPool sync.Pool bytePool sync.Pool } // 例如cookies var cookiePool = \u0026amp;sync.Pool{ New: func() interface{} { return \u0026amp;Cookie{} }, } func AcquireCookie() *Cookie { return cookiePool.Get().(*Cookie) } func ReleaseCookie(c *Cookie) { c.Reset() cookiePool.Put(c) } // 例如workPool. 每个请求以一个新的goroutine运行。就是workpool做的调度 type workerPool struct { // ... workerChanPool sync.Pool } func (wp *workerPool) getCh() *workerChan { var ch *workerChan // ... if ch == nil { if !createWorker { // 已经达到worker数量上限，不允许创建了 return nil } // 尝试复用旧worker vch := wp.workerChanPool.Get() if vch == nil { vch = \u0026amp;workerChan{ ch: make(chan net.Conn, workerChanCap), } } ch = vch.(*workerChan) // 创建新的goroutine处理请求 go func() { wp.workerFunc(ch) // 用完了返回去 wp.workerChanPool.Put(vch) }() } return ch } 复用已经分配的[]byte。\ns = s[:0]和s = append(s[:0], b…)这两种复用方式，总共出现了191次。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 // 清空 URI func (u *URI) Reset() { u.pathOriginal = u.pathOriginal[:0] u.scheme = u.scheme[:0] u.path = u.path[:0] // .... } // 清空 ResponseHeader func (h *ResponseHeader) resetSkipNormalize() { h.noHTTP11 = false h.connectionClose = false h.statusCode = 0 h.contentLength = 0 h.contentLengthBytes = h.contentLengthBytes[:0] h.contentType = h.contentType[:0] h.server = h.server[:0] h.h = h.h[:0] h.cookies = h.cookies[:0] } // 清空Cookies func (c *Cookie) Reset() { c.key = c.key[:0] c.value = c.value[:0] c.expire = zeroTime c.maxAge = 0 c.domain = c.domain[:0] c.path = c.path[:0] c.httpOnly = false c.secure = false c.sameSite = CookieSameSiteDisabled } func (c *Cookie) SetKey(key string) { c.key = append(c.key[:0], key...) } 方法参数尽量用[]byte, write only场景可以避免用bytes.Buffer 方法参数使用[]byte， 可以避免从[]byte到string转换时带来的内存分配和拷贝的开销。毕竟从net.Conn中读出来的数据也是[]byte类型。\n某些地方如果的确想穿string类型，fasthttp也提供XXXString()的方法。\nString方法用了a = append(a, string…)，这种写法不会造成string到[]byte的转换(汇编里没有用到runtime.stringtoslicebyte方法)\n1 2 3 4 5 // 例如写Response时，提供专门的String方法 func (resp *Response) SetBodyString(body string) { // ... bodyBuf.WriteString(body) } 上面的bodyBuf变量类型为ByteBuffer，来源于作者另外写的一个库，bytebufferpool。\n正如介绍一样，库的主要目标是反对多余的内存分配行为。与标准库的bytes.Buffer类型对比，性能高30%。\n但ByteBuffer只提供了write类操作。适合高频写场景。\n先看下标准库bytes.Buffer是如何增长底层slice的。重点是bytes.Buffer没有内存复用:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // 增长slice时，都会调用grow方法 func (b *Buffer) grow(n int) int { // ... if m+n \u0026lt;= cap(b.buf)/2 { copy(b.buf[:], b.buf[b.off:]) } else { // 通过makeSlice获取新的slice buf := makeSlice(2*cap(b.buf) + n) // 而且还要拷贝 copy(buf, b.buf[b.off:]) b.buf = buf } // ... } func makeSlice(n int) []byte { // maekSlice 是直接分配出新的slice，没有复用的意思 return make([]byte, n) } 再看ByteBuffer的做法。重点是复用内存:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // 通过复用减少内存分配，下次复用 func (b *ByteBuffer) Reset() { b.B = b.B[:0] } // 提供专门String方法，通过append避免string到[]byte转换带来的内存分配和拷贝 func (b *ByteBuffer) WriteString(s string) (int, error) { b.B = append(b.B, s...) return len(s), nil } // 如果写buffer的内容很大呢？增长的事情交给append // 但因为Reset()做了复用，所以cap足够情况下，append速度会很快 func (b *ByteBuffer) Write(p []byte) (int, error) { b.B = append(b.B, p...) return len(p), nil } Request和Response都是用ByteBuffer存body的。清空body是把ByteBuffer交还给pool，方便复用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 var ( responseBodyPool bytebufferpool.Pool requestBodyPool bytebufferpool.Pool ) func (req *Request) ResetBody() { req.RemoveMultipartFormFiles() req.closeBodyStream() if req.body != nil { if req.keepBodyBuffer { req.body.Reset() } else { requestBodyPool.Put(req.body) req.body = nil } } } func (resp *Response) ResetBody() { resp.bodyRaw = nil resp.closeBodyStream() if resp.body != nil { if resp.keepBodyBuffer { resp.body.Reset() } else { responseBodyPool.Put(resp.body) resp.body = nil } } } 极限复用内存的地方 有些地方需要kv型数据，一般使用map[string]string。但map不利于复用。所以fasthttp使用slice来实现了map，这个优化其实挺极限的，而且查询复杂度会降到O(n)。所以这种优化适用于key数量不多，而且并发量大的场景，这样slice的方式就能很好得减少内存。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 type argsKV struct { key []byte value []byte noValue bool } // 增加新的kv func appendArg(args []argsKV, key, value string, noValue bool) []argsKV { var kv *argsKV args, kv = allocArg(args) // 复用原来key的内存空间 kv.key = append(kv.key[:0], key...) if noValue { kv.value = kv.value[:0] } else { // 复用原来value的内存空间 kv.value = append(kv.value[:0], value...) } kv.noValue = noValue return args } func allocArg(h []argsKV) ([]argsKV, *argsKV) { n := len(h) if cap(h) \u0026gt; n { // 复用底层数组空间，不用分配 h = h[:n+1] } else { // 空间不足再分配 h = append(h, argsKV{}) } return h, \u0026amp;h[n] } 避免[]byte与string的转化开销 和上述提到的一样，这两种结构转化是带内存分配和拷贝开销的，这里fasthttp做了个trick避免开销。就是利用了string和slice在runtime里结构只差一个Cap字段实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 type StringHeader struct { Data uintptr Len int } type SliceHeader struct { Data uintptr Len int Cap int } // []byte -\u0026gt; string func b2s(b []byte) string { return *(*string)(unsafe.Pointer(\u0026amp;b)) } // string -\u0026gt; []byte func s2b(s string) []byte { sh := (*reflect.StringHeader)(unsafe.Pointer(\u0026amp;s)) bh := reflect.SliceHeader{ Data: sh.Data, Len: sh.Len, Cap: sh.Len, } return *(*[]byte)(unsafe.Pointer(\u0026amp;bh)) } 不过这种trick的影响是：\n转换出来的[]byte不能有修改操作 依赖了XXHeader结构，runtime更改结构会受到影响 如果unsafe.Pointer作用被更改，也受到影响 总结 fasthttp github中提到的:\nDo not allocate objects and []byte buffers - just reuse them as much as possible. Fasthttp API design encourages this. sync.Pool is your best friend. Profile your program in production. go tool pprof --alloc_objects your-program mem.pprof usually gives better insights for optimization opportunities than go tool pprof your-program cpu.pprof. Write tests and benchmarks for hot paths. Avoid conversion between []byte and string, since this may result in memory allocation+copy. Fasthttp API provides functions for both []byte and string - use these functions instead of converting manually between []byte and string. There are some exceptions - see this wiki page for more details. Verify your tests and production code under race detector on a regular basis. Prefer quicktemplate instead of html/template in your webserver. 总结下来一些要点就是:\n","permalink":"http://localhost:64667/posts/programming/golang/fasthttp/","summary":"\u003cp\u003e\u003cem\u003e最近在看网络模型和go net的源码，以及各web框架例如fasthttp, weaver, gnet(更轻量)源码。fasthttp在github上已经写上了一个go开发的best practices \u003ca href=\"https://github.com/valyala/fasthttp#fasthttp-best-practices\"\u003eexamples\u003c/a\u003e,这里我也记录一些在源码中看到的一些技巧\u003c/em\u003e\u003c/p\u003e\n\u003ch3 id=\"byte-buffer的tricks\"\u003e\u003ccode\u003e[]byte\u003c/code\u003e buffer的tricks\u003c/h3\u003e\n\u003cp\u003e下面的一些tricks在fasthttp中被使用，自己的代码也可以用\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e标准Go函数能够处理nil buffer\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// both buffers are uninitialized\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003edst\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003esrc\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003edst\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003esrc\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// is legal if dst is nil and/or src is nil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecopy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// is legal if dst is nil and/or src is nil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// is true if src is nil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// is true if src is nil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003esrc\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003esrc\u003c/span\u003e\u003cspan class=\"p\"\u003e[:\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// works like a charm with nil src\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// this for loop doesn\u0026#39;t panic if src is nil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ech\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003esrc\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003edoSomething\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ech\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e所以可以去掉一些对\u003ccode\u003e[]byte\u003c/code\u003ebuffer的nil校验:\u003c/p\u003e","title":"fasthttp对性能的优化压榨"},{"content":"- 当多个goroutine都需要创建同一个对象，如果gorountine数过多，导致对象的创建数目剧增，进而导致GC压力增大，形成“并发大-占用内存大-GC缓慢-并发处理能力弱-并发更大”这样的恶性循环 - 在这个时候，需要一个对象池，每个goroutine不再自己单独创建对象，而是从对象池中取出一个对象（如果池中已有） ","permalink":"http://localhost:64667/posts/programming/golang/sync-pool/","summary":"\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e- 当多个goroutine都需要创建同一个对象，如果gorountine数过多，导致对象的创建数目剧增，进而导致GC压力增大，形成“并发大-占用内存大-GC缓慢-并发处理能力弱-并发更大”这样的恶性循环\n- 在这个时候，需要一个对象池，每个goroutine不再自己单独创建对象，而是从对象池中取出一个对象（如果池中已有）\n\u003c/code\u003e\u003c/pre\u003e","title":"[源码分析]sync pool"},{"content":"高性能Goroutine Pool go调度器没有限制对goroutine的数量，在goroutine瞬时大规模爆发的场景下来不及复用goroutine从而导致大量goroutine被创建，会导致大量的系统资源占用，尝试池化。\ngo调度器本身不应该对goroutine数量有限制，因为语言层面无法界定需要限制多少，毕竟程序跑在不同性能的环境，在并发规模不太大的场景做限制甚至会降低性能，原生支持限制goroutine数量无疑是得不偿失的。如果只是中等规模和比较小规模的并发场景其实pool的性能并没有优势\n目前设计上还需要加上周期性对空闲队列的prune，等写完再加看看benchmark会提升多少。目前来说对大规模goroutine异步并发的场景(1M, 10M)内存优化(10倍往上)和吞吐量优化效果(2-6倍)非常好。\n需求场景与目标 限制并发goroutine的数量 复用goroutine，减轻runtime调度压力，提升程序性能 规避过多的goroutine创建侵占系统资源，cpu\u0026amp;内存 关键技术 锁同步: golang有CAS机制，用spin-lock替代mutex 原理， 讨论 LIFO/FIFO队列: LIFO队列能直接有时间排序功能，方便对需要关联入队时间的操作进行处理 Pool容量限制和弹性伸缩 代码实现 pool.gopackage go_pool import ( \u0026#34;errors\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;sync/atomic\u0026#34; \u0026#34;time\u0026#34; ) const( OPEN = iota CLOSED ) var ( ErrPoolClosed = errors.New(\u0026#34;this pool has been closed\u0026#34;) ErrPoolOverload = errors.New(\u0026#34;too many goroutines blocked on submit or Nonblocking is set\u0026#34;) ErrInvalidExpiryTime = errors.New(\u0026#34;invalid expiration time\u0026#34;) ErrInvalidPoolCapacity = errors.New(\u0026#34;invalid pool capacity\u0026#34;) DefaultScanInterval = time.Second ) type Pool struct { capacity int32 running int32 lock sync.Locker scanDuration time.Duration blockingTasksNum int maxBlockingTasks int state int32 cond *sync.Cond workers WorkerQueue // LIFO queue workerCache sync.Pool } func (p *Pool) Submit(task func()) error{ if atomic.LoadInt32(\u0026amp;p.state) == CLOSED{ return ErrPoolClosed } // retrieve worker to do the task // return error if no workers available var w *Worker if w = p.retrieveWorker(); w == nil{ return ErrPoolOverload } w.task \u0026lt;- task return nil } func (p *Pool) Shutdown() { atomic.StoreInt32(\u0026amp;p.state, CLOSED) p.lock.Lock() // reset worker queue p.workers.reset() p.lock.Unlock() } func (p *Pool) isClosed() bool{ return atomic.LoadInt32(\u0026amp;p.state) == CLOSED } // change the capacity of the pool func (p *Pool) Resize(size int){ if p.Cap() == size{ return } atomic.StoreInt32(\u0026amp;p.capacity, int32(size)) // need to stop certain workers if #running_workers \u0026gt; #new_capacity diff := p.Running() - size if diff \u0026gt; 0{ for i := 0; i\u0026lt; diff; i++{ p.retrieveWorker().task \u0026lt;- nil } } } func (p *Pool) Reboot() { if atomic.CompareAndSwapInt32(\u0026amp;p.state, CLOSED, OPEN){ // initialize the purging go routine go p.scavengerRoutine() } } func (p *Pool) Running() int{ return int(atomic.LoadInt32(\u0026amp;p.running)) } func (p *Pool) Cap() int{ return int(atomic.LoadInt32(\u0026amp;p.capacity)) } func (p *Pool) Free() int{ return p.Cap() - p.Running() } func (p *Pool) incRunning(){ atomic.AddInt32(\u0026amp;p.running, 1) } func (p *Pool) decRunning(){ atomic.AddInt32(\u0026amp;p.running, -1) } // put the worker back into the pool for recycling func (p *Pool) recycleWorker(worker *Worker) bool{ capacity := p.Cap() if p.isClosed() || (capacity \u0026gt;= 0 \u0026amp;\u0026amp; p.Running() \u0026gt; capacity){ return false } worker.recycleTime = time.Now() p.lock.Lock() // need to double check if state is CLOSED if p.isClosed(){ p.lock.Unlock() return false } err := p.workers.add(worker) if err != nil{ p.lock.Unlock() return false } // notify any request stuck in retrieveWorker that there is an available worker in pool p.cond.Signal() p.lock.Unlock() return true } func (p *Pool) spawnWorker() *Worker{ worker := p.workerCache.Get().(*Worker) worker.Run() return worker } func (p *Pool) retrieveWorker() (worker *Worker){ p.lock.Lock() worker = p.workers.detach() // get worker from queue successfully if worker != nil{ p.lock.Unlock() }else if capacity := p.Cap();capacity == -1{ p.lock.Unlock() // spawn worker return p.spawnWorker() }else if p.Running() \u0026lt; capacity{ // infinite pool p.lock.Unlock() // spawn worker return p.spawnWorker() }else{ // if the number of blocking tasks reaches the maximum blocking tasks threshold then returns nil // and throw the ErrPoolOverload error in Submit method if p.maxBlockingTasks != 0 \u0026amp;\u0026amp; p.maxBlockingTasks \u0026lt;= p.blockingTasksNum{ p.lock.Unlock() return } // the pool is full need to wait until worker is available for task handling Retry: // handle the number of blocking task handling requests // wait until condition being notified p.blockingTasksNum++ p.cond.Wait() p.blockingTasksNum-- // ensure there is a worker available because you don\u0026#39;t know if the recycled worker being closed then if p.Running() == 0{ p.lock.Unlock() // spawn worker return p.spawnWorker() } worker = p.workers.detach() if worker == nil{ goto Retry } p.lock.Unlock() } return } func (p *Pool) scavengerRoutine(){ heartbeat := time.NewTicker(p.scanDuration) defer heartbeat.Stop() for range heartbeat.C{ if p.isClosed(){ break } // all workers get cleaned up and some invokers still get stuck on cond.Wait() // we need to wake up all invokers in that situation. if p.Running() == 0{ p.cond.Broadcast() } } } func NewPool(capacity int)(*Pool, error){ if capacity \u0026lt;= 0{ capacity = -1 } pool := \u0026amp;Pool{ capacity: int32(capacity), lock: NewSpinLock(), } pool.workerCache.New = func() interface{}{ return \u0026amp;Worker{ pool: pool, task: make(chan func(), 1), } } pool.scanDuration = DefaultScanInterval // initialize the worker queue if capacity == -1{ return nil, ErrInvalidPoolCapacity } pool.workers = NewWorkerQueue(0) pool.cond = sync.NewCond(pool.lock) // initialize the purging goroutine go pool.scavengerRoutine() return pool, nil } worker.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 package go_pool import ( \u0026#34;time\u0026#34; ) type Worker struct{ pool *Pool task chan func() recycleTime time.Time } func (w *Worker) Run(){ w.pool.incRunning() go func(){ defer func(){ w.pool.decRunning() w.pool.workerCache.Put(w) // todo: panic recovery strategy }() for f := range w.task{ // receiving nil indicates that the worker should stop and quit go routine if f == nil{ return } f() // recycle worker back into the pool, if not success quit go routine if success := w.pool.recycleWorker(w); !success{ return } } }() } worker_queue.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 package go_pool type WorkerQueue interface { len() int isEmpty() bool add(worker *Worker) error detach() *Worker reset() } func NewWorkerQueue(size int) WorkerQueue{ return NewSimpleWorkerQueue(size) } func NewSimpleWorkerQueue(size int) *simpleWorkerQueue{ return \u0026amp;simpleWorkerQueue{ size: size, workers: make([]*Worker, 0, size), } } type simpleWorkerQueue struct{ workers []*Worker size int } func(sq *simpleWorkerQueue) len() int{ return len(sq.workers) } func(sq *simpleWorkerQueue) isEmpty() bool{ return sq.len() == 0 } func (sq *simpleWorkerQueue) add(worker *Worker) error{ sq.workers = append(sq.workers, worker) return nil } func (sq *simpleWorkerQueue) detach() *Worker{ length := sq.len() if length == 0{ return nil } worker := sq.workers[length - 1] sq.workers[length - 1] = nil // slice operation should avoid memory leak sq.workers = sq.workers[:length-1] return worker } func (sq *simpleWorkerQueue) reset(){ for i := 0;i \u0026lt; sq.len(); i++{ sq.workers[i].task \u0026lt;- nil sq.workers[i] = nil } sq.workers = sq.workers[:0] } lock.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package go_pool import ( \u0026#34;runtime\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;sync/atomic\u0026#34; ) type spinLock uint32 func (sl *spinLock) Lock() { for !atomic.CompareAndSwapUint32((*uint32)(sl), 0, 1) { runtime.Gosched() } } func (sl *spinLock) Unlock() { atomic.StoreUint32((*uint32)(sl), 0) } // NewSpinLock instantiates a spin-lock. func NewSpinLock() sync.Locker { return new(spinLock) } pool_test.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 package go_pool import ( \u0026#34;math\u0026#34; \u0026#34;runtime\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;testing\u0026#34; \u0026#34;time\u0026#34; ) const( _ = 1 \u0026lt;\u0026lt; (10 * iota) KiB //1024 MiB // 1048578 ) const ( InfinitePoolSize = math.MaxInt32 PoolSize = 10000 SleepTime = 100 OverSizeTaskNum = 10 * PoolSize UnderSizeTaskNum = 0.2 * PoolSize ) var currentMem uint64 func demoTaskFunc(args interface{}){ n := args.(int) time.Sleep(time.Duration(n) * time.Millisecond) } func TestPoolWaitToGetWorker(t *testing.T){ var wg sync.WaitGroup p, err := NewPool(PoolSize) defer p.Shutdown() if err != nil { t.Errorf(\u0026#34;err: %s\u0026#34;, err.Error()) } for i:=0; i\u0026lt; OverSizeTaskNum; i++{ wg.Add(1) _ = p.Submit(func(){ demoTaskFunc(SleepTime) wg.Done() }) } wg.Wait() mem := runtime.MemStats{} runtime.ReadMemStats(\u0026amp;mem) currentMem = mem.TotalAlloc/KiB - currentMem t.Logf(\u0026#34;memory usage: %d KB\u0026#34;, currentMem) } func TestPoolGetWorkerFromCache(t *testing.T){ var currentMem uint64 var wg sync.WaitGroup p, err := NewPool(PoolSize) defer p.Shutdown() if err != nil { t.Errorf(\u0026#34;err: %s\u0026#34;, err.Error()) } for i:=0; i\u0026lt; UnderSizeTaskNum; i++{ wg.Add(1) _ = p.Submit(func(){ demoTaskFunc(SleepTime) wg.Done() }) } wg.Wait() mem := runtime.MemStats{} runtime.ReadMemStats(\u0026amp;mem) currentMem = mem.TotalAlloc/KiB - currentMem t.Logf(\u0026#34;memory usage: %d KB\u0026#34;, currentMem) } func TestNoPool(t *testing.T){ var wg sync.WaitGroup for i:=0; i\u0026lt;UnderSizeTaskNum; i++{ wg.Add(1) go func(){ defer wg.Done() demoTaskFunc(SleepTime) }() } wg.Wait() mem := runtime.MemStats{} runtime.ReadMemStats(\u0026amp;mem) currentMem = mem.TotalAlloc/KiB - currentMem t.Logf(\u0026#34;memory usage: %d KB\u0026#34;, currentMem) } func TestWithInfinitePool(t *testing.T){ var wg sync.WaitGroup p, err := NewPool(InfinitePoolSize) defer p.Shutdown() if err != nil { t.Errorf(\u0026#34;err: %s\u0026#34;, err.Error()) } for i:=0; i\u0026lt; UnderSizeTaskNum; i++{ wg.Add(1) _ = p.Submit(func(){ demoTaskFunc(SleepTime) wg.Done() }) } wg.Wait() mem := runtime.MemStats{} runtime.ReadMemStats(\u0026amp;mem) currentMem = mem.TotalAlloc/KiB - currentMem t.Logf(\u0026#34;memory usage: %d KB\u0026#34;, currentMem) } pool_benchmark_test.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 package go_pool import ( \u0026#34;testing\u0026#34; \u0026#34;time\u0026#34; ) const ( RunTimes = 5000000 BenchParam = 10 BenchPoolSize = 200000 ) func demoFunc() { time.Sleep(time.Duration(BenchParam) * time.Millisecond) } func BenchmarkPoolThroughput(b *testing.B) { p, _ := NewPool(BenchPoolSize) defer p.Shutdown() b.StartTimer() for i := 0; i \u0026lt; b.N; i++ { for j := 0; j \u0026lt; RunTimes; j++ { _ = p.Submit(demoFunc) } } b.StopTimer() } func BenchmarkGoroutinesThroughput(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { for j := 0; j \u0026lt; RunTimes; j++ { go demoFunc() } } } ","permalink":"http://localhost:64667/posts/programming/golang/goroutine-pool/","summary":"\u003ch1 id=\"高性能goroutine-pool\"\u003e高性能Goroutine Pool\u003c/h1\u003e\n\u003cp\u003ego调度器没有限制对goroutine的数量，在goroutine瞬时大规模爆发的场景下来不及复用goroutine从而导致大量goroutine被创建，会导致大量的系统资源占用，尝试池化。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ego调度器本身不应该对goroutine数量有限制，因为语言层面无法界定需要限制多少，毕竟程序跑在不同性能的环境，在并发规模不太大的场景做限制甚至会降低性能，原生支持限制goroutine数量无疑是得不偿失的。如果只是中等规模和比较小规模的并发场景其实pool的性能并没有优势\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e目前设计上还需要加上周期性对空闲队列的prune，等写完再加看看benchmark会提升多少。目前来说对大规模goroutine异步并发的场景(1M, 10M)内存优化(10倍往上)和吞吐量优化效果(2-6倍)非常好。\u003c/p\u003e\n\u003ch2 id=\"需求场景与目标\"\u003e需求场景与目标\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e限制并发goroutine的数量\u003c/li\u003e\n\u003cli\u003e复用goroutine，减轻runtime调度压力，提升程序性能\u003c/li\u003e\n\u003cli\u003e规避过多的goroutine创建侵占系统资源，cpu\u0026amp;内存\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"关键技术\"\u003e关键技术\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e锁同步: golang有CAS机制，用spin-lock替代mutex \u003ca href=\"https://ofstack.com/Golang/27085/implementation-of-golang-spin-lock.html\"\u003e原理\u003c/a\u003e， \u003ca href=\"https://stackoverflow.com/questions/5869825/when-should-one-use-a-spinlock-instead-of-mutex\"\u003e讨论\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLIFO/FIFO队列: LIFO队列能直接有时间排序功能，方便对需要关联入队时间的操作进行处理\u003c/li\u003e\n\u003cli\u003ePool容量限制和弹性伸缩\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"代码实现\"\u003e代码实现\u003c/h2\u003e\n\u003ch3 id=\"poolgo\"\u003epool.go\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e  1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 41\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 42\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 43\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 44\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 45\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 46\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 47\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 48\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 49\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 50\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 51\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 52\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 53\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 54\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 55\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 56\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 57\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 58\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 59\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 60\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 61\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 62\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 63\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 64\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 65\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 66\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 67\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 68\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 69\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 70\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 71\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 72\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 73\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 74\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 75\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 76\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 77\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 78\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 79\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 80\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 81\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 82\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 83\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 84\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 85\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 86\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 87\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 88\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 89\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 90\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 91\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 92\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 93\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 94\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 95\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 96\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 97\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 98\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 99\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e100\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e101\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e102\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e103\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e104\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e105\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e106\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e107\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e108\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e109\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e110\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e111\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e112\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e113\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e114\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e115\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e116\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e117\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e118\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e119\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e120\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e121\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e122\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e123\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e124\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e125\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e126\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e127\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e128\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e129\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e130\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e131\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e132\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e133\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e134\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e135\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e136\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e137\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e138\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e139\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e140\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e141\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e142\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e143\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e144\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e145\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e146\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e147\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e148\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e149\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e150\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e151\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e152\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e153\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e154\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e155\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e156\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e157\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e158\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e159\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e160\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e161\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e162\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e163\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e164\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e165\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e166\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e167\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e168\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e169\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e170\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e171\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e172\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e173\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e174\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e175\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e176\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e177\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e178\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e179\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e180\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e181\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e182\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e183\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e184\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e185\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e186\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e187\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e188\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e189\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e190\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e191\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e192\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e193\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e194\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e195\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e196\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e197\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e198\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e199\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e200\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e201\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e202\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e203\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e204\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e205\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e206\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e207\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e208\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e209\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e210\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e211\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e212\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e213\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e214\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e215\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e216\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e217\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e218\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e219\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e220\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e221\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e222\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e223\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e224\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e225\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e226\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e227\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e228\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e229\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e230\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e231\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e232\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e233\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e234\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e235\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003ego_pool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s\"\u003e\u0026#34;errors\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s\"\u003e\u0026#34;sync\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s\"\u003e\u0026#34;sync/atomic\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eOPEN\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eiota\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eCLOSED\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eErrPoolClosed\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eerrors\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eNew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;this pool has been closed\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eErrPoolOverload\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eerrors\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eNew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;too many goroutines blocked on submit or Nonblocking is set\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eErrInvalidExpiryTime\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eerrors\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eNew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;invalid expiration time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eErrInvalidPoolCapacity\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eerrors\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eNew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;invalid pool capacity\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eDefaultScanInterval\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003ePool\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ecapacity\u003c/span\u003e \u003cspan class=\"kt\"\u003eint32\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003erunning\u003c/span\u003e \u003cspan class=\"kt\"\u003eint32\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003elock\u003c/span\u003e \u003cspan class=\"nx\"\u003esync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eLocker\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003escanDuration\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eDuration\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eblockingTasksNum\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003emaxBlockingTasks\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003estate\u003c/span\u003e \u003cspan class=\"kt\"\u003eint32\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003econd\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003esync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eCond\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eworkers\u003c/span\u003e \u003cspan class=\"nx\"\u003eWorkerQueue\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// LIFO queue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eworkerCache\u003c/span\u003e \u003cspan class=\"nx\"\u003esync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ePool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eSubmit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etask\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eatomic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eLoadInt32\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nx\"\u003eCLOSED\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eErrPoolClosed\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// retrieve worker to do the task\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// return error if no workers available\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ew\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eWorker\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003ew\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eretrieveWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"nx\"\u003ew\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eErrPoolOverload\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etask\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"nx\"\u003etask\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ePool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eShutdown\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eatomic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eStoreInt32\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eCLOSED\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eLock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// reset worker queue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eworkers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ereset\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eUnlock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ePool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eisClosed\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eatomic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eLoadInt32\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nx\"\u003eCLOSED\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// change the capacity of the pool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ePool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eResize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esize\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eCap\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nx\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eatomic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eStoreInt32\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eint32\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// need to stop certain workers if #running_workers \u0026gt; #new_capacity\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ediff\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eRunning\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003esize\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003ediff\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ediff\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eretrieveWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003etask\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ePool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eReboot\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eatomic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eCompareAndSwapInt32\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eCLOSED\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eOPEN\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"c1\"\u003e// initialize the purging go routine\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003escavengerRoutine\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ePool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eRunning\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eatomic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eLoadInt32\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003erunning\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ePool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eCap\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eatomic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eLoadInt32\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ePool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eFree\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eCap\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eRunning\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ePool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eincRunning\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eatomic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eAddInt32\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003erunning\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ePool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003edecRunning\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eatomic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eAddInt32\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003erunning\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// put the worker back into the pool for recycling\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ePool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003erecycleWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eworker\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ecapacity\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eCap\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eisClosed\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecapacity\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eRunning\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ecapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eworker\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003erecycleTime\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eNow\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eLock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// need to double check if state is CLOSED\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eisClosed\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eUnlock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eworkers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eworker\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eUnlock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// notify any request stuck in retrieveWorker that there is an available worker in pool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003econd\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eSignal\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eUnlock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ePool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003espawnWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eworker\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eworkerCache\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eGet\u003c/span\u003e\u003cspan class=\"p\"\u003e().(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eworker\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eRun\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eworker\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ePool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eretrieveWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eworker\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eLock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eworker\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eworkers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003edetach\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// get worker from queue successfully\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eworker\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eUnlock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003ecapacity\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eCap\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"nx\"\u003ecapacity\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eUnlock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"c1\"\u003e// spawn worker\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003espawnWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eRunning\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ecapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"c1\"\u003e// infinite pool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eUnlock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"c1\"\u003e// spawn worker\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003espawnWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"c1\"\u003e// if the number of blocking tasks reaches the maximum blocking tasks threshold then returns nil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"c1\"\u003e// and throw the ErrPoolOverload error in Submit method\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emaxBlockingTasks\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emaxBlockingTasks\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eblockingTasksNum\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eUnlock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"c1\"\u003e// the pool is full need to wait until worker is available for task handling\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003eRetry\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"c1\"\u003e// handle the number of blocking task handling requests\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"c1\"\u003e// wait until condition being notified\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eblockingTasksNum\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003econd\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eWait\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eblockingTasksNum\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"c1\"\u003e// ensure there is a worker available because you don\u0026#39;t know if the recycled worker being closed then\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eRunning\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eUnlock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"c1\"\u003e// spawn worker\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003espawnWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nx\"\u003eworker\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eworkers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003edetach\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eworker\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"nx\"\u003eRetry\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eUnlock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ePool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003escavengerRoutine\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eheartbeat\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eNewTicker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003escanDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"nx\"\u003eheartbeat\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eStop\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003eheartbeat\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eC\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eisClosed\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"c1\"\u003e// all workers get cleaned up and some invokers still get stuck on cond.Wait()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"c1\"\u003e// we need to wake up all invokers in that situation.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eRunning\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003econd\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eBroadcast\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eNewPool\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecapacity\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ePool\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003ecapacity\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003ecapacity\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003epool\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ePool\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003ecapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e  \u003cspan class=\"nb\"\u003eint32\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nf\"\u003eNewSpinLock\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003epool\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eworkerCache\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNew\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003einterface\u003c/span\u003e\u003cspan class=\"p\"\u003e{}{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003eWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nx\"\u003epool\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003epool\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nx\"\u003etask\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003epool\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003escanDuration\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eDefaultScanInterval\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// initialize the worker queue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003ecapacity\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eErrInvalidPoolCapacity\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003epool\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eworkers\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003eNewWorkerQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003epool\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003econd\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003esync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eNewCond\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003epool\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// initialize the purging goroutine\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"nx\"\u003epool\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003escavengerRoutine\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003epool\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"workergo\"\u003eworker.go\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003ego_pool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003eWorker\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003epool\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ePool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003etask\u003c/span\u003e \u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003erecycleTime\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eTime\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ew\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eRun\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epool\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eincRunning\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nx\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epool\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003edecRunning\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nx\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epool\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eworkerCache\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ePut\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"c1\"\u003e// todo: panic recovery strategy\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etask\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"c1\"\u003e// receiving nil indicates that the worker should stop and quit go routine\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nf\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"c1\"\u003e// recycle worker back into the pool, if not success quit go routine\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003esuccess\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epool\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003erecycleWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"p\"\u003e!\u003c/span\u003e\u003cspan class=\"nx\"\u003esuccess\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"worker_queuego\"\u003eworker_queue.go\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e41\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e42\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e43\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e44\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e45\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e46\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e47\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e48\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e49\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e50\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e51\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e52\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e53\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e54\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e55\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e56\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e57\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e58\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003ego_pool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003eWorkerQueue\u003c/span\u003e \u003cspan class=\"kd\"\u003einterface\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eworker\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003edetach\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eWorker\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003ereset\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eNewWorkerQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esize\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nx\"\u003eWorkerQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nf\"\u003eNewSimpleWorkerQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eNewSimpleWorkerQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esize\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003esimpleWorkerQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003esimpleWorkerQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003eworkers\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e([]\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003esimpleWorkerQueue\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eworkers\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eWorker\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003esize\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003esimpleWorkerQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eworkers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003esimpleWorkerQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003esq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003esimpleWorkerQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eworker\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003esq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eworkers\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eworkers\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eworker\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003esimpleWorkerQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003edetach\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003esq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eworker\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003esq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eworkers\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003esq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eworkers\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"c1\"\u003e// slice operation should avoid memory leak\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003esq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eworkers\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003esq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eworkers\u003c/span\u003e\u003cspan class=\"p\"\u003e[:\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eworker\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003esimpleWorkerQueue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003ereset\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003esq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eworkers\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"nx\"\u003etask\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003esq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eworkers\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003esq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eworkers\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003esq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eworkers\u003c/span\u003e\u003cspan class=\"p\"\u003e[:\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"lockgo\"\u003elock.go\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003ego_pool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s\"\u003e\u0026#34;runtime\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s\"\u003e\u0026#34;sync\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s\"\u003e\u0026#34;sync/atomic\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003espinLock\u003c/span\u003e \u003cspan class=\"kt\"\u003euint32\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esl\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003espinLock\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eLock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e!\u003c/span\u003e\u003cspan class=\"nx\"\u003eatomic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eCompareAndSwapUint32\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"kt\"\u003euint32\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"nx\"\u003esl\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003eruntime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eGosched\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esl\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003espinLock\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eUnlock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eatomic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eStoreUint32\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"kt\"\u003euint32\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"nx\"\u003esl\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// NewSpinLock instantiates a spin-lock.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eNewSpinLock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"nx\"\u003esync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eLocker\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003espinLock\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"pool_testgo\"\u003epool_test.go\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e  1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 41\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 42\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 43\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 44\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 45\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 46\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 47\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 48\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 49\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 50\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 51\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 52\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 53\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 54\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 55\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 56\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 57\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 58\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 59\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 60\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 61\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 62\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 63\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 64\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 65\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 66\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 67\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 68\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 69\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 70\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 71\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 72\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 73\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 74\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 75\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 76\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 77\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 78\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 79\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 80\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 81\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 82\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 83\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 84\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 85\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 86\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 87\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 88\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 89\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 90\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 91\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 92\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 93\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 94\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 95\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 96\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 97\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 98\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 99\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e100\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e101\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e102\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e103\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e104\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e105\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e106\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e107\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e108\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e109\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e110\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003ego_pool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s\"\u003e\u0026#34;math\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s\"\u003e\u0026#34;runtime\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s\"\u003e\u0026#34;sync\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s\"\u003e\u0026#34;testing\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"kc\"\u003eiota\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eKiB\u003c/span\u003e \u003cspan class=\"c1\"\u003e//1024\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eMiB\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 1048578\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eInfinitePoolSize\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003emath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMaxInt32\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ePoolSize\u003c/span\u003e        \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10000\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eSleepTime\u003c/span\u003e       \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eOverSizeTaskNum\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003ePoolSize\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eUnderSizeTaskNum\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003ePoolSize\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ecurrentMem\u003c/span\u003e \u003cspan class=\"kt\"\u003euint64\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003edemoTaskFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eargs\u003c/span\u003e \u003cspan class=\"kd\"\u003einterface\u003c/span\u003e\u003cspan class=\"p\"\u003e{}){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e.(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMillisecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eTestPoolWaitToGetWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003etesting\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e \u003cspan class=\"nx\"\u003esync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWaitGroup\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nf\"\u003eNewPool\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ePoolSize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eShutdown\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eErrorf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;err: %s\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eError\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e:=\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eOverSizeTaskNum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eAdd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eSubmit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nf\"\u003edemoTaskFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eSleepTime\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eDone\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eWait\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003emem\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eruntime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMemStats\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eruntime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eReadMemStats\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003emem\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ecurrentMem\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003emem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eTotalAlloc\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"nx\"\u003eKiB\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003ecurrentMem\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eLogf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;memory usage: %d KB\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecurrentMem\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eTestPoolGetWorkerFromCache\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003etesting\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ecurrentMem\u003c/span\u003e \u003cspan class=\"kt\"\u003euint64\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e \u003cspan class=\"nx\"\u003esync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWaitGroup\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nf\"\u003eNewPool\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ePoolSize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eShutdown\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eErrorf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;err: %s\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eError\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e:=\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eUnderSizeTaskNum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eAdd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eSubmit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nf\"\u003edemoTaskFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eSleepTime\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eDone\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eWait\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003emem\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eruntime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMemStats\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eruntime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eReadMemStats\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003emem\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ecurrentMem\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003emem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eTotalAlloc\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"nx\"\u003eKiB\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003ecurrentMem\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eLogf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;memory usage: %d KB\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecurrentMem\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eTestNoPool\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003etesting\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e \u003cspan class=\"nx\"\u003esync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWaitGroup\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e:=\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nx\"\u003eUnderSizeTaskNum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eAdd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eDone\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nf\"\u003edemoTaskFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eSleepTime\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eWait\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003emem\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eruntime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMemStats\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eruntime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eReadMemStats\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003emem\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ecurrentMem\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003emem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eTotalAlloc\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"nx\"\u003eKiB\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003ecurrentMem\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eLogf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;memory usage: %d KB\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecurrentMem\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eTestWithInfinitePool\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003etesting\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e \u003cspan class=\"nx\"\u003esync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWaitGroup\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nf\"\u003eNewPool\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eInfinitePoolSize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eShutdown\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eErrorf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;err: %s\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eError\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e:=\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eUnderSizeTaskNum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eAdd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eSubmit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nf\"\u003edemoTaskFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eSleepTime\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eDone\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eWait\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003emem\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eruntime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMemStats\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eruntime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eReadMemStats\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003emem\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ecurrentMem\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003emem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eTotalAlloc\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"nx\"\u003eKiB\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003ecurrentMem\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eLogf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;memory usage: %d KB\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecurrentMem\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"pool_benchmark_testgo\"\u003epool_benchmark_test.go\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003ego_pool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s\"\u003e\u0026#34;testing\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eRunTimes\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5000000\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eBenchParam\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eBenchPoolSize\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e200000\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003edemoFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eDuration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eBenchParam\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMillisecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eBenchmarkPoolThroughput\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003etesting\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eB\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nf\"\u003eNewPool\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eBenchPoolSize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eShutdown\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eStartTimer\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eRunTimes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eSubmit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edemoFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eStopTimer\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eBenchmarkGoroutinesThroughput\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003etesting\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eB\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eRunTimes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"nf\"\u003edemoFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"[自建轮]高性能Goroutine Pool"},{"content":"实际上对于一个有GC的语言，我们不必太多关心内存泄漏的问题，因为程序的runtime帮我们很好地额回收不再使用的内存。但是，我们还是得了解一些特殊的场景，这些场景会产生暂时性或者永久性的内存泄漏。\n待开坑...\n","permalink":"http://localhost:64667/posts/programming/golang/memory-leak/","summary":"\u003cp\u003e实际上对于一个有GC的语言，我们不必太多关心内存泄漏的问题，因为程序的runtime帮我们很好地额回收不再使用的内存。但是，我们还是得了解一些特殊的场景，这些场景会产生暂时性或者永久性的内存泄漏。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e待开坑...\u003c/code\u003e\u003c/p\u003e","title":"Possible Memory Leak"},{"content":"优雅地关闭通道 场景一：M个接收者和一个发送者。发送者通过关闭用来传输数据的通道来传递发送结束信号 这是最简单的一种情形。当发送者欲结束发送，让它关闭用来传输数据的通道即可。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 package main import ( \u0026#34;time\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;log\u0026#34; ) func main() { rand.Seed(time.Now().UnixNano()) log.SetFlags(0) // ... const Max = 100000 const NumReceivers = 100 wgReceivers := sync.WaitGroup{} wgReceivers.Add(NumReceivers) // ... dataCh := make(chan int) // 发送者 go func() { for { if value := rand.Intn(Max); value == 0 { // 此唯一的发送者可以安全地关闭此数据通道。 close(dataCh) return } else { dataCh \u0026lt;- value } } }() // 接收者 for i := 0; i \u0026lt; NumReceivers; i++ { go func() { defer wgReceivers.Done() // 接收数据直到通道dataCh已关闭 // 并且dataCh的缓冲队列已空。 for value := range dataCh { log.Println(value) } }() } wgReceivers.Wait() } 场景二： 一个接收者和N个发送者，此唯一接收者通过关闭一个额外的信号通道来通知发送者不要在发送数据了 此情形比上一种情形复杂一些。我们不能让接收者关闭用来传输数据的通道来停止数据传输，因为这样做违反了通道关闭原则。 但是我们可以让接收者关闭一个额外的信号通道来通知发送者不要在发送数据了。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 package main import ( \u0026#34;time\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;log\u0026#34; ) func main() { rand.Seed(time.Now().UnixNano()) log.SetFlags(0) // ... const Max = 100000 const NumSenders = 1000 wgReceivers := sync.WaitGroup{} wgReceivers.Add(1) // ... dataCh := make(chan int) stopCh := make(chan struct{}) // stopCh是一个额外的信号通道。它的 // 发送者为dataCh数据通道的接收者。 // 它的接收者为dataCh数据通道的发送者。 // 发送者 for i := 0; i \u0026lt; NumSenders; i++ { go func() { for { // 这里的第一个尝试接收用来让此发送者 // 协程尽早地退出。对于这个特定的例子， // 此select代码块并非必需。 select { case \u0026lt;- stopCh: return default: } // 即使stopCh已经关闭，此第二个select // 代码块中的第一个分支仍很有可能在若干个 // 循环步内依然不会被选中。如果这是不可接受 // 的，则上面的第一个select代码块是必需的。 select { case \u0026lt;- stopCh: return case dataCh \u0026lt;- rand.Intn(Max): } } }() } // 接收者 go func() { defer wgReceivers.Done() for value := range dataCh { if value == Max-1 { // 此唯一的接收者同时也是stopCh通道的 // 唯一发送者。尽管它不能安全地关闭dataCh数 // 据通道，但它可以安全地关闭stopCh通道。 close(stopCh) return } log.Println(value) } }() // ... wgReceivers.Wait() } 如此例中的注释所述，对于此额外的信号通道stopCh，它只有一个发送者，即dataCh数据通道的唯一接收者。 dataCh数据通道的接收者关闭了信号通道stopCh，这是不违反通道关闭原则的。\n在此例中，数据通道dataCh并没有被关闭。是的，我们不必关闭它。 当一个通道不再被任何协程所使用后，它将逐渐被垃圾回收掉，无论它是否已经被关闭。 所以这里的优雅性体现在通过不关闭一个通道来停止使用此通道。\n场景三：M个接收者和N个发送者。它们中的任何协程都可以让一个中间调解协程帮忙发出停止数据传送的信号 这是最复杂的一种情形。我们不能让接收者和发送者中的任何一个关闭用来传输数据的通道，我们也不能让多个接收者之一关闭一个额外的信号通道。 这两种做法都违反了通道关闭原则。 然而，我们可以引入一个中间调解者角色并让其关闭额外的信号通道来通知所有的接收者和发送者结束工作。 具体实现见下例。注意其中使用了一个尝试发送操作来向中间调解者发送信号。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 package main import ( \u0026#34;time\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;log\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { rand.Seed(time.Now().UnixNano()) log.SetFlags(0) // ... const Max = 100000 const NumReceivers = 10 const NumSenders = 1000 wgReceivers := sync.WaitGroup{} wgReceivers.Add(NumReceivers) // ... dataCh := make(chan int) stopCh := make(chan struct{}) // stopCh是一个额外的信号通道。它的发送 // 者为中间调解者。它的接收者为dataCh // 数据通道的所有的发送者和接收者。 toStop := make(chan string, 1) // toStop是一个用来通知中间调解者让其 // 关闭信号通道stopCh的第二个信号通道。 // 此第二个信号通道的发送者为dataCh数据 // 通道的所有的发送者和接收者，它的接收者 // 为中间调解者。它必须为一个缓冲通道。 var stoppedBy string // 中间调解者 go func() { stoppedBy = \u0026lt;-toStop close(stopCh) }() // 发送者 for i := 0; i \u0026lt; NumSenders; i++ { go func(id string) { for { value := rand.Intn(Max) if value == 0 { // 为了防止阻塞，这里使用了一个尝试 // 发送操作来向中间调解者发送信号。 select { case toStop \u0026lt;- \u0026#34;发送者#\u0026#34; + id: default: } return } // 此处的尝试接收操作是为了让此发送协程尽早 // 退出。标准编译器对尝试接收和尝试发送做了 // 特殊的优化，因而它们的速度很快。 select { case \u0026lt;- stopCh: return default: } // 即使stopCh已关闭，如果这个select代码块 // 中第二个分支的发送操作是非阻塞的，则第一个 // 分支仍很有可能在若干个循环步内依然不会被选 // 中。如果这是不可接受的，则上面的第一个尝试 // 接收操作代码块是必需的。 select { case \u0026lt;- stopCh: return case dataCh \u0026lt;- value: } } }(strconv.Itoa(i)) } // 接收者 for i := 0; i \u0026lt; NumReceivers; i++ { go func(id string) { defer wgReceivers.Done() for { // 和发送者协程一样，此处的尝试接收操作是为了 // 让此接收协程尽早退出。 select { case \u0026lt;- stopCh: return default: } // 即使stopCh已关闭，如果这个select代码块 // 中第二个分支的接收操作是非阻塞的，则第一个 // 分支仍很有可能在若干个循环步内依然不会被选 // 中。如果这是不可接受的，则上面尝试接收操作 // 代码块是必需的。 select { case \u0026lt;- stopCh: return case value := \u0026lt;-dataCh: if value == Max-1 { // 为了防止阻塞，这里使用了一个尝试 // 发送操作来向中间调解者发送信号。 select { case toStop \u0026lt;- \u0026#34;接收者#\u0026#34; + id: default: } return } log.Println(value) } } }(strconv.Itoa(i)) } // ... wgReceivers.Wait() log.Println(\u0026#34;被\u0026#34; + stoppedBy + \u0026#34;终止了\u0026#34;) } 在此例中，通道关闭原则依旧得到了遵守。\n请注意，信号通道toStop的容量必须至少为1。 如果它的容量为0，则在中间调解者还未准备好的情况下就已经有某个协程向toStop发送信号时，此信号将被抛弃。因为停止信号是通过非阻塞的尝试发送传递的。\n我们也可以不使用尝试发送操作向中间调解者发送信号，但信号通道toStop的容量必须至少为数据发送者和数据接收者的数量之和，以防止向其发送数据时（有一个极其微小的可能）导致某些发送者和接收者协程永久阻塞。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 ... toStop := make(chan string, NumReceivers + NumSenders) ... value := rand.Intn(Max) if value == 0 { toStop \u0026lt;- \u0026#34;sender#\u0026#34; + id return } ... if value == Max-1 { toStop \u0026lt;- \u0026#34;receiver#\u0026#34; + id return } ... 场景四： M个接收者和一个发送者”情形的一个变种：用来传输数据的通道的关闭请求由第三方发出 有时，数据通道（dataCh）的关闭请求需要由某个第三方协程发出。对于这种情形，我们可以使用一个额外的信号通道来通知唯一的发送者关闭数据通道（dataCh）。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 package main import ( \u0026#34;time\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;log\u0026#34; ) func main() { rand.Seed(time.Now().UnixNano()) log.SetFlags(0) // ... const Max = 100000 const NumReceivers = 100 const NumThirdParties = 15 wgReceivers := sync.WaitGroup{} wgReceivers.Add(NumReceivers) // ... dataCh := make(chan int) closing := make(chan struct{}) // 信号通道 closed := make(chan struct{}) // 此stop函数可以被安全地多次调用。 stop := func() { select { case closing\u0026lt;-struct{}{}: \u0026lt;-closed case \u0026lt;-closed: } } // 一些第三方协程 for i := 0; i \u0026lt; NumThirdParties; i++ { go func() { r := 1 + rand.Intn(3) time.Sleep(time.Duration(r) * time.Second) stop() }() } // 发送者 go func() { defer func() { close(closed) close(dataCh) }() for { select{ case \u0026lt;-closing: return default: } select{ case \u0026lt;-closing: return case dataCh \u0026lt;- rand.Intn(Max): } } }() // 接收者 for i := 0; i \u0026lt; NumReceivers; i++ { go func() { defer wgReceivers.Done() for value := range dataCh { log.Println(value) } }() } wgReceivers.Wait() } 上述代码中的stop函数中使用的技巧偷自Roger Peppe在此贴中的一个留言。\n场景五：“N个发送者”的一个变种：用来传输数据的通道必须被关闭以通知各个接收者数据发送已经结束了 在上面的提到的“N个发送者”情形中，为了遵守通道关闭原则，我们避免了关闭数据通道（dataCh）。 但是有时候，数据通道（dataCh）必须被关闭以通知各个接收者数据发送已经结束。 对于这种“N个发送者”情形，我们可以使用一个中间通道将它们转化为“一个发送者”情形，然后继续使用上一节介绍的技巧来关闭此中间通道，从而避免了关闭原始的dataCh数据通道。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 package main import ( \u0026#34;time\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;log\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { rand.Seed(time.Now().UnixNano()) log.SetFlags(0) // ... const Max = 1000000 const NumReceivers = 10 const NumSenders = 1000 const NumThirdParties = 15 wgReceivers := sync.WaitGroup{} wgReceivers.Add(NumReceivers) // ... dataCh := make(chan int) // 将被关闭 middleCh := make(chan int) // 不会被关闭 closing := make(chan string) closed := make(chan struct{}) var stoppedBy string stop := func(by string) { select { case closing \u0026lt;- by: \u0026lt;-closed case \u0026lt;-closed: } } // 中间层 go func() { exit := func(v int, needSend bool) { close(closed) if needSend { dataCh \u0026lt;- v } close(dataCh) } for { select { case stoppedBy = \u0026lt;-closing: exit(0, false) return case v := \u0026lt;- middleCh: select { case stoppedBy = \u0026lt;-closing: exit(v, true) return case dataCh \u0026lt;- v: } } } }() // 一些第三方协程 for i := 0; i \u0026lt; NumThirdParties; i++ { go func(id string) { r := 1 + rand.Intn(3) time.Sleep(time.Duration(r) * time.Second) stop(\u0026#34;3rd-party#\u0026#34; + id) }(strconv.Itoa(i)) } // 发送者 for i := 0; i \u0026lt; NumSenders; i++ { go func(id string) { for { value := rand.Intn(Max) if value == 0 { stop(\u0026#34;sender#\u0026#34; + id) return } select { case \u0026lt;- closed: return default: } select { case \u0026lt;- closed: return case middleCh \u0026lt;- value: } } }(strconv.Itoa(i)) } // 接收者 for range [NumReceivers]struct{}{} { go func() { defer wgReceivers.Done() for value := range dataCh { log.Println(value) } }() } // ... wgReceivers.Wait() log.Println(\u0026#34;stopped by\u0026#34;, stoppedBy) } 结论 并没有什么情况非得逼得我们违反通道关闭原则。 如果你遇到了此情形，就请考虑修改你的代码流程和结构设计。\n","permalink":"http://localhost:64667/posts/programming/golang/channel-graceful/","summary":"\u003ch2 id=\"优雅地关闭通道\"\u003e优雅地关闭通道\u003c/h2\u003e\n\u003ch3 id=\"场景一m个接收者和一个发送者发送者通过关闭用来传输数据的通道来传递发送结束信号\"\u003e场景一：M个接收者和一个发送者。发送者通过关闭用来传输数据的通道来传递发送结束信号\u003c/h3\u003e\n\u003cp\u003e这是最简单的一种情形。当发送者欲结束发送，让它关闭用来传输数据的通道即可。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e41\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e42\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e43\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e44\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e45\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e46\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e47\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e48\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e49\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e50\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e51\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s\"\u003e\u0026#34;math/rand\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s\"\u003e\u0026#34;sync\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eSeed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eNow\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nf\"\u003eUnixNano\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eSetFlags\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// ...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eMax\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e100000\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eNumReceivers\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ewgReceivers\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003esync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWaitGroup\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ewgReceivers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eAdd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eNumReceivers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// ...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003edataCh\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// 发送者\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eIntn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eMax\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"nx\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"c1\"\u003e// 此唯一的发送者可以安全地关闭此数据通道。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"nb\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edataCh\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"nx\"\u003edataCh\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"nx\"\u003evalue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// 接收者\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eNumReceivers\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"nx\"\u003ewgReceivers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eDone\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"c1\"\u003e// 接收数据直到通道dataCh已关闭\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"c1\"\u003e// 并且dataCh的缓冲队列已空。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003edataCh\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ewgReceivers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eWait\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"场景二-一个接收者和n个发送者此唯一接收者通过关闭一个额外的信号通道来通知发送者不要在发送数据了\"\u003e场景二： 一个接收者和N个发送者，此唯一接收者通过关闭一个额外的信号通道来通知发送者不要在发送数据了\u003c/h3\u003e\n\u003cp\u003e此情形比上一种情形复杂一些。我们不能让接收者关闭用来传输数据的通道来停止数据传输，因为这样做违反了\u003cstrong\u003e通道关闭原则\u003c/strong\u003e。 但是我们可以让接收者关闭一个额外的信号通道来通知发送者不要在发送数据了。\u003c/p\u003e","title":"Close Channels Gracefully"},{"content":"记录了一些channels常见的场景，以及自己的一些感受：\n使用通道进行异步和并发编程是简单和惬意的；\n通道同步技术比被很多其它语言采用的其它同步方案（比如角色模型和async/await模式）有着更多的应用场景和更多的使用变种。\n通道作为同步手段，并非在任何情况下都是最佳的同步技术，本文也会补充原子操作和sync包内其他的技术作为参考。\n将通道用做future/promise 很多其它流行语言支持future/promise来实现异步（并发）编程。 Future/promise常常用在请求/回应场合。\n返回单向接收通道做为函数返回结果 在下面这个例子中，sumSquares函数调用的两个实参请求并发进行。 每个通道读取操作将阻塞到请求返回结果为止。 两个实参总共需要大约3秒钟（而不是6秒钟）准备完毕（以较慢的一个为准）。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package main import ( \u0026#34;time\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;fmt\u0026#34; ) func longTimeRequest() \u0026lt;-chan int32 { r := make(chan int32) go func() { time.Sleep(time.Second * 3) // 模拟一个工作负载 r \u0026lt;- rand.Int31n(100) }() return r } func sumSquares(a, b int32) int32 { return a*a + b*b } func main() { rand.Seed(time.Now().UnixNano()) a, b := longTimeRequest(), longTimeRequest() fmt.Println(sumSquares(\u0026lt;-a, \u0026lt;-b)) } 将单向发送通道类型用做函数实参 和上例一样，在下面这个例子中，sumSquares函数调用的两个实参的请求也是并发进行的。 和上例不同的是longTimeRequest函数接收一个单向发送通道类型参数而不是返回一个单向接收通道结果。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import ( \u0026#34;time\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;fmt\u0026#34; ) func longTimeRequest(r chan\u0026lt;- int32) { time.Sleep(time.Second * 3) // 模拟一个工作负载 r \u0026lt;- rand.Int31n(100) } func sumSquares(a, b int32) int32 { return a*a + b*b } func main() { rand.Seed(time.Now().UnixNano()) ra, rb := make(chan int32), make(chan int32) go longTimeRequest(ra) go longTimeRequest(rb) fmt.Println(sumSquares(\u0026lt;-ra, \u0026lt;-rb)) } 对于上面这个特定的例子，我们可以只使用一个通道来接收回应结果，因为两个参数的作用是对等的。\n1 2 3 4 5 6 7 8 ... results := make(chan int32, 2) // 缓冲与否不重要 go longTimeRequest(results) go longTimeRequest(results) fmt.Println(sumSquares(\u0026lt;-results, \u0026lt;-results)) } 这可以看作是后面将要提到的数据聚合的一个应用。\n采用最快回应 本用例可以看作是上例中只使用一个通道变种的增强。\n有时候，一份数据可能同时从多个数据源获取。这些数据源将返回相同的数据。 因为各种因素，这些数据源的回应速度参差不一，甚至某个特定数据源的多次回应速度之间也可能相差很大。 同时从多个数据源获取一份相同的数据可以有效保障低延迟。我们只需采用最快的回应并舍弃其它较慢回应。\n注意：如果有N个数据源，为了防止被舍弃的回应对应的协程永久阻塞，则传输数据用的通道必须为一个容量至少为N-1的缓冲通道。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; \u0026#34;math/rand\u0026#34; ) func source(c chan\u0026lt;- int32) { ra, rb := rand.Int31(), rand.Intn(3) + 1 // 睡眠1秒/2秒/3秒 time.Sleep(time.Duration(rb) * time.Second) c \u0026lt;- ra } func main() { rand.Seed(time.Now().UnixNano()) startTime := time.Now() c := make(chan int32, 5) // 必须用一个缓冲通道 for i := 0; i \u0026lt; cap(c); i++ { go source(c) } rnd := \u0026lt;- c // 只有第一个回应被使用了 fmt.Println(time.Since(startTime)) fmt.Println(rnd) } “采用最快回应”用例还有一些其它实现方式，本文后面将会谈及。\n更多“请求/回应”用例变种 做为函数参数和返回结果使用的通道可以是缓冲的，从而使得请求协程不需阻塞到它所发送的数据被接收为止。\n有时，一个请求可能并不保证返回一份有效的数据。对于这种情形，我们可以使用一个形如struct{v T; err error}的结构体类型或者一个空接口类型做为通道的元素类型以用来区分回应的值是否有效。\n有时，一个请求可能需要比预期更长的用时才能回应，甚至永远都得不到回应。 我们可以使用本文后面将要介绍的超时机制来应对这样的情况。\n有时，回应方可能会不断地返回一系列值，这也同时属于后面将要介绍的数据流的一个用例。\n使用通道实现通知 通知可以被看作是特殊的请求/回应用例。在一个通知用例中，我们并不关心回应的值，我们只关心回应是否已发生。 所以我们常常使用空结构体类型struct{}来做为通道的元素类型，因为空结构体类型的尺寸为零，能够节省一些内存（虽然常常很少量）。\n向一个通道发送一个值来实现单对单通知 我们已知道，如果一个通道中无值可接收，则此通道上的下一个接收操作将阻塞到另一个协程发送一个值到此通道为止。 所以一个协程可以向此通道发送一个值来通知另一个等待着从此通道接收数据的协程。\n在下面这个例子中，通道done被用来做为一个信号通道来实现单对单通知。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package main import ( \u0026#34;crypto/rand\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;sort\u0026#34; ) func main() { values := make([]byte, 32 * 1024 * 1024) if _, err := rand.Read(values); err != nil { fmt.Println(err) os.Exit(1) } done := make(chan struct{}) // 也可以是缓冲的 // 排序协程 go func() { sort.Slice(values, func(i, j int) bool { return values[i] \u0026lt; values[j] }) done \u0026lt;- struct{}{} // 通知排序已完成 }() // 并发地做一些其它事情... \u0026lt;- done // 等待通知 fmt.Println(values[0], values[len(values)-1]) } 从一个通道接收一个值来实现单对单通知 如果一个通道的数据缓冲队列已满（非缓冲的通道的数据缓冲队列总是满的）但它的发送协程队列为空，则向此通道发送一个值将阻塞，直到另外一个协程从此通道接收一个值为止。 所以我们可以通过从一个通道接收数据来实现单对单通知。一般我们使用非缓冲通道来实现这样的通知。\n这种通知方式不如上例中介绍的方式使用得广泛，基本很少用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func main() { done := make(chan struct{}) // 此信号通道也可以缓冲为1。如果这样，则在下面 // 这个协程创建之前，我们必须向其中写入一个值。 go func() { fmt.Print(\u0026#34;Hello\u0026#34;) // 模拟一个工作负载。 time.Sleep(time.Second * 2) // 使用一个接收操作来通知主协程。 \u0026lt;- done }() done \u0026lt;- struct{}{} // 阻塞在此，等待通知 fmt.Println(\u0026#34; world!\u0026#34;) } 另一个事实是，上面的两种单对单通知方式其实并没有本质的区别。 它们都可以被概括为较快者等待较慢者发出通知。\n多对单和单对多通知 略微扩展一下上面两个用例，我们可以很轻松地实现多对单和单对多通知。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package main import \u0026#34;log\u0026#34; import \u0026#34;time\u0026#34; type T = struct{} func worker(id int, ready \u0026lt;-chan T, done chan\u0026lt;- T) { \u0026lt;-ready // 阻塞在此，等待通知 log.Print(\u0026#34;Worker#\u0026#34;, id, \u0026#34;开始工作\u0026#34;) // 模拟一个工作负载。 time.Sleep(time.Second * time.Duration(id+1)) log.Print(\u0026#34;Worker#\u0026#34;, id, \u0026#34;工作完成\u0026#34;) done \u0026lt;- T{} // 通知主协程（N-to-1） } func main() { log.SetFlags(0) ready, done := make(chan T), make(chan T) go worker(0, ready, done) go worker(1, ready, done) go worker(2, ready, done) // 模拟一个初始化过程 time.Sleep(time.Second * 3 / 2) // 单对多通知 ready \u0026lt;- T{}; ready \u0026lt;- T{}; ready \u0026lt;- T{} // 等待被多对单通知 \u0026lt;-done; \u0026lt;-done; \u0026lt;-done } 这种写法是比较少见的，因为not clean enough，一般用sync.WaitGroup实现多对单的通知，使用关闭一个通道方式实现单对多。\n通过关闭一个通道来实现群发通知（单对多模式优化） 关闭一个通道进行对多通知更简单。用到的特性是能够从一个已经关闭的通道接受到无穷多的值。\n我们可以把上一个例子中的三个数据发送操作ready \u0026lt;- struct{}{}替换为一个通道关闭操作close(ready)来达到同样的单对多通知效果。\n1 2 3 ... close(ready) // 群发通知Let\u0026#39;s go! ... 其实，单对单通知一般也是用关闭通道的方式，这也是实践中用到最多的通知实现方式。context库中用这种特性实现了传达操作取消消息，后续会介绍具体的cases。\n定时通知（timer） 标准库里的time.After的实现，也就是函数返回一个channel（容量为1的缓冲通道），起一个gorountine等待一段时间后往这个channel里送一个空结构体，类似的逻辑。\n将通道用做互斥锁（mutex） 运用容量为1的缓冲通道作为多次性二元semaphore，也就是mutex，这种mutex不如sync标准包里的高效。\n有两种方式将一个容量为1的缓冲通道用做互斥锁：\n通过发送操作来加锁，通过接收操作来解锁； 通过接收操作来加锁，通过发送操作来解锁。 写一个发送操作加锁的例子，第二种反一下就行：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package main import \u0026#34;fmt\u0026#34; func main() { mutex := make(chan struct{}, 1) // 容量必须为1 counter := 0 increase := func() { mutex \u0026lt;- struct{}{} // 加锁 counter++ \u0026lt;-mutex // 解锁 } increase1000 := func(done chan\u0026lt;- struct{}) { for i := 0; i \u0026lt; 1000; i++ { increase() } done \u0026lt;- struct{}{} } done := make(chan struct{}) go increase1000(done) go increase1000(done) \u0026lt;-done; \u0026lt;-done fmt.Println(counter) // 2000 } 将通道用做计数信号量（counting semaphore） 缓冲通道可以用于作为counting semaphore，也就是多主锁 \u0026ndash; 如果一个缓冲通道的容量为N，那么它可以被看作是一个在任何时刻最多可有N个主人的锁。 上面提到的二元信号量是特殊的计数信号量，每个二元信号量在任一时刻最多只能有一个主人。\n计数信号量经常被使用于限制最大并发数。\n和将通道用做互斥锁一样，也有两种方式用来获取一个用做计数信号量的通道的一份所有权。\n通过发送操作来获取所有权，通过接收操作来释放所有权； 通过接收操作来获取所有权，通过发送操作来释放所有权。 下面是一个酒吧在座位数一定的前提下服务客人的例子，以接受操作获取所有权，先来一个简化版:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 package main import ( \u0026#34;log\u0026#34; \u0026#34;time\u0026#34; \u0026#34;math/rand\u0026#34; ) type Seat int type Bar chan Seat func (bar Bar) ServeCustomer(c int) { log.Print(\u0026#34;顾客#\u0026#34;, c, \u0026#34;进入酒吧\u0026#34;) seat := \u0026lt;- bar // 需要一个位子来喝酒 log.Print(\u0026#34;++ customer#\u0026#34;, c, \u0026#34; drinks at seat#\u0026#34;, seat) log.Print(\u0026#34;++ 顾客#\u0026#34;, c, \u0026#34;在第\u0026#34;, seat, \u0026#34;个座位开始饮酒\u0026#34;) time.Sleep(time.Second * time.Duration(2 + rand.Intn(6))) log.Print(\u0026#34;-- 顾客#\u0026#34;, c, \u0026#34;离开了第\u0026#34;, seat, \u0026#34;个座位\u0026#34;) bar \u0026lt;- seat // 释放座位，离开酒吧 } func main() { rand.Seed(time.Now().UnixNano()) bar24x7 := make(Bar, 10) // 此酒吧有10个座位 // 摆放10个座位。 for seatId := 0; seatId \u0026lt; cap(bar24x7); seatId++ { bar24x7 \u0026lt;- Seat(seatId) // 均不会阻塞 } for customerId := 0; ; customerId++ { time.Sleep(time.Second) go bar24x7.ServeCustomer(customerId) } for {time.Sleep(time.Second)} // 睡眠不属于阻塞状态 } 在上例中，只有获得一个座位的顾客才能开始饮酒。 所以在任一时刻同时在喝酒的顾客数不会超过座位数10。最后的for循环其实不太好，用select{}阻塞比较好。\n这个例子不好的地方，在于尽管在任一时刻同时在喝酒的顾客数不会超过座位数10，但是在某一时刻可能有多于10个顾客进入了酒吧，因为某些顾客在排队等位子。 在上例中，每个顾客对应着一个协程。虽然协程的开销比系统线程小得多，但是如果协程的数量很多，则它们的总体开销还是不能忽略不计的。 所以，最好当有空位的时候才创建顾客协程。我们可以做个小的优化：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ... // 省略了和上例相同的代码 func (bar Bar) ServeCustomerAtSeat(c int, seat Seat) { log.Print(\u0026#34;++ 顾客#\u0026#34;, c, \u0026#34;在第\u0026#34;, seat, \u0026#34;个座位开始饮酒\u0026#34;) time.Sleep(time.Second * time.Duration(2 + rand.Intn(6))) log.Print(\u0026#34;-- 顾客#\u0026#34;, c, \u0026#34;离开了第\u0026#34;, seat, \u0026#34;个座位\u0026#34;) bar \u0026lt;- seat // 释放座位，离开酒吧 } func main() { rand.Seed(time.Now().UnixNano()) bar24x7 := make(Bar, 10) for seatId := 0; seatId \u0026lt; cap(bar24x7); seatId++ { bar24x7 \u0026lt;- Seat(seatId) } // 这个for循环和上例不一样。 for customerId := 0; ; customerId++ { time.Sleep(time.Second) seat := \u0026lt;- bar24x7 // 需要一个空位招待顾客 go bar24x7.ServeCustomerAtSeat(customerId, seat) } for {time.Sleep(time.Second)} } 在上面这个修改后的例子中，在任一时刻最多只有10个顾客协程在运行（但是在程序的生命期内，仍旧会有大量的顾客协程不断被创建和销毁）。\n所以考虑每个gorountine作为消费者，不断从customers的通道去获取客人，这样消费者的数量是一定的。在下面这个更加高效的实现中，在程序的生命期内最多只会有10个顾客协程被创建出来:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ... // 省略了和上例相同的代码 func (bar Bar) ServeCustomerAtSeat(consumers chan int) { for c := range consumers { seatId := \u0026lt;- bar log.Print(\u0026#34;++ 顾客#\u0026#34;, c, \u0026#34;在第\u0026#34;, seatId, \u0026#34;个座位开始饮酒\u0026#34;) time.Sleep(time.Second * time.Duration(2 + rand.Intn(6))) log.Print(\u0026#34;-- 顾客#\u0026#34;, c, \u0026#34;离开了第\u0026#34;, seatId, \u0026#34;个座位\u0026#34;) bar \u0026lt;- seatId // 释放座位，离开酒吧 } } func main() { rand.Seed(time.Now().UnixNano()) bar24x7 := make(Bar, 10) for seatId := 0; seatId \u0026lt; cap(bar24x7); seatId++ { bar24x7 \u0026lt;- Seat(seatId) } consumers := make(chan int) for i := 0; i \u0026lt; cap(bar24x7); i++ { go bar24x7.ServeCustomerAtSeat(consumers) } for customerId := 0; ; customerId++ { time.Sleep(time.Second) consumers \u0026lt;- customerId } } 通过发送操作来获取所有权的实现相对简单一些，省去了摆放座位的步骤：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package main import ( \u0026#34;log\u0026#34; \u0026#34;time\u0026#34; \u0026#34;math/rand\u0026#34; ) type Customer struct{id int} type Bar chan Customer func (bar Bar) ServeCustomer(c Customer) { log.Print(\u0026#34;++ 顾客#\u0026#34;, c.id, \u0026#34;开始饮酒\u0026#34;) time.Sleep(time.Second * time.Duration(3 + rand.Intn(16))) log.Print(\u0026#34;-- 顾客#\u0026#34;, c.id, \u0026#34;离开酒吧\u0026#34;) \u0026lt;- bar // 离开酒吧，腾出位子 } func main() { rand.Seed(time.Now().UnixNano()) bar24x7 := make(Bar, 10) // 最多同时服务10位顾客 for customerId := 0; ; customerId++ { time.Sleep(time.Second * 2) customer := Customer{customerId} bar24x7 \u0026lt;- customer // 等待进入酒吧 go bar24x7.ServeCustomer(customer) } for {time.Sleep(time.Second)} } 使用通道传送传输通道(special case) 一个通道类型的元素类型可以是另一个通道类型。 在下面这个例子中， 单向发送通道类型chan\u0026lt;- int是另一个通道类型chan chan\u0026lt;- int的元素类型。\n下面的例子在这个场景其实不是最好的方案，还在关注类似的场景。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 package main import \u0026#34;fmt\u0026#34; var counter = func (n int) chan\u0026lt;- chan\u0026lt;- int { requests := make(chan chan\u0026lt;- int) go func() { for request := range requests { if request == nil { n++ // 递增计数 } else { request \u0026lt;- n // 返回当前计数 } } }() return requests // 隐式转换到类型chan\u0026lt;- (chan\u0026lt;- int) }(0) func main() { increase1000 := func(done chan\u0026lt;- struct{}) { for i := 0; i \u0026lt; 1000; i++ { counter \u0026lt;- nil } done \u0026lt;- struct{}{} } done := make(chan struct{}) go increase1000(done) go increase1000(done) \u0026lt;-done; \u0026lt;-done request := make(chan int, 1) counter \u0026lt;- request fmt.Println(\u0026lt;-request) // 2000 } 检查通道的长度和容量 我们可以使用内置函数cap和len来查看一个通道的容量和当前长度。 但是在实践中我们很少这样做。我们很少使用内置函数cap的原因是一个通道的容量常常是已知的或者不重要的。 我们很少使用内置函数len的原因是一个**len调用的结果并不能总能准确地反映出的一个通道的当前长度。**\n但有时确实有一些场景需要调用这两个函数。比如，有时一个协程欲将一个未关闭的并且不会再向其中发送数据的缓冲通道中的所有数据接收出来，在确保只有此一个协程从此通道接收数据的情况下，我们可以用下面的代码来实现：\n1 2 3 4 for len(c) \u0026gt; 0 { value := \u0026lt;-c // 使用value ... } 不过这种场景可以用尝试接收机制来实现，这两种方式的运行效率差距不大，但尝试接收机制的优点是多个协程可以并发地进行读取操作。\n有时一个协程欲将一个缓冲通道写满而又不阻塞，在确保只有此一个协程向此通道发送数据的情况下，我们可以用下面的代码实现这一目的：\n1 2 3 for len(c) \u0026lt; cap(c) { c \u0026lt;- aValue } 当然，尝试发送机制也能cover。\n尝试发送和尝试接收(无阻塞select/default) 含有一个default分支和一个case分支的select代码块可以被用做一个尝试发送或者尝试接收操作，取决于case关键字后跟随的是一个发送操作还是一个接收操作。\n如果case关键字后跟随的是一个发送操作，则此select代码块为一个尝试发送操作。 如果case分支的发送操作是阻塞的，则default分支将被执行，发送失败；否则发送成功，case分支得到执行。 如果case关键字后跟随的是一个接收操作，则此select代码块为一个尝试接收操作。 如果case分支的接收操作是阻塞的，则default分支将被执行，接收失败；否则接收成功，case分支得到执行。 尝试发送和尝试接收代码块永不阻塞。\n标准编译器对尝试发送和尝试接收代码块做了特别的优化，使得它们的执行效率比多case分支的普通select代码块执行效率高得多。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import \u0026#34;fmt\u0026#34; func main() { type Book struct{id int} bookshelf := make(chan Book, 3) for i := 0; i \u0026lt; cap(bookshelf) * 2; i++ { select { case bookshelf \u0026lt;- Book{id: i}: fmt.Println(\u0026#34;成功将书放在书架上\u0026#34;, i) default: fmt.Println(\u0026#34;书架已经被占满了\u0026#34;) } } for i := 0; i \u0026lt; cap(bookshelf) * 2; i++ { select { case book := \u0026lt;-bookshelf: fmt.Println(\u0026#34;成功从书架上取下一本书\u0026#34;, book.id) default: fmt.Println(\u0026#34;书架上已经没有书了\u0026#34;) } } } 输出结果很简单:\n成功将书放在书架上 0 成功将书放在书架上 1 成功将书放在书架上 2 书架已经被占满了 书架已经被占满了 书架已经被占满了 成功从书架上取下一本书 0 成功从书架上取下一本书 1 成功从书架上取下一本书 2 书架上已经没有书了 书架上已经没有书了 书架上已经没有书了 无阻塞地检查一个通道是否已经关闭 假设我们可以保证没有任何协程会向一个通道发送数据，则我们可以使用下面的代码来（并发安全地）检查此通道是否已经关闭，此检查不会阻塞当前协程。\n1 2 3 4 5 6 7 8 func IsClosed(c chan T) bool { select { case \u0026lt;-c: return true default: } return false } 常用场景：此方法常用来查看某个期待中的通知是否已经来临。此通知将由另一个协程通过关闭一个通道来发送。\n峰值限制（peak/burst limiting） 通道用作counting semaphore + 通道尝试(发送/接收)可实现峰值限制。目的是防止过大的并发请求数。\n还是那个酒吧招待客户的例子，现在做一些修改能让顾客不再等待而是离去或者寻找其它酒吧。\n1 2 3 4 5 6 7 8 9 10 11 12 13 ... bar24x7 := make(Bar, 10) // 此酒吧只能同时招待10个顾客 for customerId := 0; ; customerId++ { time.Sleep(time.Second) consumer := Consumer{customerId} select { case bar24x7 \u0026lt;- consumer: // 试图进入此酒吧 go bar24x7.ServeConsumer(consumer) default: log.Print(\u0026#34;顾客#\u0026#34;, customerId, \u0026#34;不愿等待而离去\u0026#34;) } } ... 另一种“采用最快回应”的实现方式(复杂场景用) 在上面的“采用最快回应”用例一节已经提到，我们也可以使用选择机制来实现“采用最快回应”用例。 每个数据源协程只需使用一个缓冲为1的通道并向其尝试发送回应数据即可。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;time\u0026#34; ) func source(c chan\u0026lt;- int32) { ra, rb := rand.Int31(), rand.Intn(3)+1 // 休眠1秒/2秒/3秒 time.Sleep(time.Duration(rb) * time.Second) select { case c \u0026lt;- ra: default: } } func main() { rand.Seed(time.Now().UnixNano()) c := make(chan int32, 1) // 此通道容量必须至少为1 for i := 0; i \u0026lt; 5; i++ { go source(c) } rnd := \u0026lt;-c // 只采用第一个成功发送的回应数据 fmt.Println(rnd) } 注意，使用选择机制来实现“采用最快回应”的代码中使用的通道的容量必须至少为1，以保证最快回应总能够发送成功。 否则，如果数据请求者因为种种原因未及时准备好接收，则所有回应者的尝试发送都将失败，从而所有回应的数据都将被错过。\n少量数据源“采用最快回应”的实现方式 如果一个“采用最快回应”用例中的数据源的数量很少，比如两个或三个，我们可以让每个数据源使用一个单独的缓冲通道来回应数据，然后使用一个select代码块来同时接收这三个通道。 示例代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;time\u0026#34; ) func source() \u0026lt;-chan int32 { c := make(chan int32, 1) // 必须为一个缓冲通道 go func() { ra, rb := rand.Int31(), rand.Intn(3)+1 time.Sleep(time.Duration(rb) * time.Second) c \u0026lt;- ra }() return c } func main() { rand.Seed(time.Now().UnixNano()) var rnd int32 // 阻塞在此直到某个数据源率先回应。 select{ case rnd = \u0026lt;-source(): case rnd = \u0026lt;-source(): case rnd = \u0026lt;-source(): } fmt.Println(rnd) } 注意：如果上例中使用的通道是非缓冲的，未被选中的case分支对应的两个source函数调用中开辟的协程将处于永久阻塞状态，从而造成内存泄露。\n超时机制（timeout） 在一些请求/回应用例中，一个请求可能因为种种原因导致需要超出预期的时长才能得到回应，有时甚至永远得不到回应。 对于这样的情形，我们可以使用一个超时方案给请求者返回一个错误信息。 使用选择机制可以很轻松地实现这样的一个超时方案。\n下面这个例子展示了如何实现一个支持超时设置的请求：\n1 2 3 4 5 6 7 8 9 10 11 func requestWithTimeout(timeout time.Duration) (int, error) { c := make(chan int) go doRequest(c) // 可能需要超出预期的时长回应 select { case data := \u0026lt;-c: return data, nil case \u0026lt;-time.After(timeout): return 0, errors.New(\u0026#34;超时了！\u0026#34;) } } 脉搏器（ticker） 我们可以使用尝试发送操作来实现一个每隔一定时间发送一个信号的脉搏器。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package main import \u0026#34;fmt\u0026#34; import \u0026#34;time\u0026#34; func Tick(d time.Duration) \u0026lt;-chan struct{} { c := make(chan struct{}, 1) // 容量最好为1 go func() { for { time.Sleep(d) select { case c \u0026lt;- struct{}{}: default: } } }() return c } func main() { t := time.Now() for range Tick(time.Second) { fmt.Println(time.Since(t)) } } 事实上，time标准库包中的Tick函数提供了同样的功能，但效率更高。 我们应该尽量使用标准库包中的实现。\n速率限制（rate limiting） 前面实现了峰值限制，同样地我们可以使用尝试机制实现速率限制，但是这里要和定时器配合实现。速率限制常用来限制吞吐和确保在一段时间内的资源使用不会超标。\n下面的例子借鉴了官方Go维基中的例子。 在此例中，任何一分钟时段内处理的请求数不会超过200\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 package main import \u0026#34;fmt\u0026#34; import \u0026#34;time\u0026#34; type Request interface{} func handle(r Request) {fmt.Println(r.(int))} const RateLimitPeriod = time.Minute const RateLimit = 200 // 任何一分钟内最多处理200个请求 func handleRequests(requests \u0026lt;-chan Request) { quotas := make(chan time.Time, RateLimit) go func() { tick := time.NewTicker(RateLimitPeriod / RateLimit) defer tick.Stop() for t := range tick.C { select { case quotas \u0026lt;- t: default: } } }() for r := range requests { \u0026lt;-quotas go handle(r) } } func main() { requests := make(chan Request) go handleRequests(requests) // time.Sleep(time.Minute) for i := 0; ; i++ {requests \u0026lt;- i} } 上例的代码虽然可以保证任何一分钟时段内处理的请求数不会超过200，但是如果在开始的一分钟内没有任何请求，则接下来的某个瞬时时间点可能会同时处理最多200个请求（试着将time.Sleep行的注释去掉), 这可能会造成卡顿情况。我们可以将速率限制和峰值限制一并使用来避免出现这样的情况。\n开关 向一个nil通道发送数据或者从中接收数据都属于阻塞操作。 利用这一事实，我们可以将一个select流程控制中的case操作中涉及的通道设置为不同的值，以使此select流程控制选择执行不同的分支。\n控制代码被执行的几率（少用） 我们可以通过在一个select流程控制中使用重复的case操作来增加对应分支中的代码的执行几率。这种操作比较少见，下面这个例子， 函数f的调用执行几率大致为函数g的两倍:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package main import \u0026#34;fmt\u0026#34; func main() { foo, bar := make(chan struct{}), make(chan struct{}) close(foo); close(bar) // 仅为演示目的 x, y := 0.0, 0.0 f := func(){x++} g := func(){y++} for i := 0; i \u0026lt; 100000; i++ { select { case \u0026lt;-foo: f() case \u0026lt;-foo: f() case \u0026lt;-bar: g() } } fmt.Println(x/y) // 大致为2 } 从动态数量的分支中选择（少用） reflection ain\u0026rsquo;t good\n每个select控制流程中的分支数量在运行中是固定的，但是我们可以使用reflect标准库包中提供的功能在运行时刻来构建动态分支数量的select控制流程。 但是请注意：一个select控制流程中的分支越多，此select控制流程的执行效率就越低（这是我们常常只使用不多于三个分支的select控制流程的原因）。 reflect标准库包中也提供了模拟尝试发送和尝试接收代码块的TrySend和TryRecv函数。涉及到反射的，肯定有更好的解决方案:-)。\n数据流操纵（Data Flow） 下面把数据流处理程序大致分成了常见的几类，概念上来说是不同模块由一个或者多个并行处理的协程组成：\n数据生成/搜集/加载；\n数据服务/存盘；\n数据计算/处理；\n数据验证/过滤；\n数据聚合/分流；\n数据组合/拆分；\n数据复制/增殖；\n一个模块中的工作协程从一些其它模块接收数据做为输入，并向另一些模块发送输出数据。 换句话数，一个模块可能同时兼任数据消费者和数据产生者的角色。多个模块一起组成了一个数据流处理系统。后续的一些实现可能并不高效，只是为了描述这些分类模块的实现，比较简单。\n数据生成/搜集/加载 一个数据产生者可能通过以下途径生成数据：\n加载一个文件、或者读取一个数据库、或者用爬虫抓取网页数据；\n从一个软件或者硬件系统搜集各种数据；\n产生一系列随机数；\netc.\n这里的例子是一个随机数生成器作为数据生产者，生产者只有数据输出，所以返回只读通道。实际上此随机数产生器是一个多返回值的future/promise，一个数据产生者可以在任何时刻关闭返回的通道以结束数据生成。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import ( \u0026#34;crypto/rand\u0026#34; \u0026#34;encoding/binary\u0026#34; ) func RandomGenerator() \u0026lt;-chan uint64 { c := make(chan uint64) go func() { rnds := make([]byte, 8) for { _, err := rand.Read(rnds) if err != nil { close(c) // 若读取错误则关闭通道结束数据生成 break } c \u0026lt;- binary.BigEndian.Uint64(rnds) } }() return c } 数据聚合 例如把多个数据流合为一个数据流，下面这个函数把任意数量的数据流合为一个：\n1 2 3 4 5 6 7 8 9 10 11 func Aggregator(inputs ...\u0026lt;-chan uint64) \u0026lt;-chan uint64 { out := make(chan uint64) for _, in := range inputs { go func(in \u0026lt;-chan uint64) { for { out \u0026lt;- \u0026lt;-in // \u0026lt;=\u0026gt; out \u0026lt;- (\u0026lt;-in) } }(in) } return out } 但是这个例子，最好需要考虑一个输入数据流是否已经关闭：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import \u0026#34;sync\u0026#34; func Aggregator(inputs ...\u0026lt;-chan uint64) \u0026lt;-chan uint64 { output := make(chan uint64) var wg sync.WaitGroup for _, in := range inputs { wg.Add(1) go func(int \u0026lt;-chan uint64) { defer wg.Done() // 如果通道in被关闭，此循环将最终结束。 for x := range in { output \u0026lt;- x } }(in) } go func() { wg.Wait() close(output) }() return output } 如果被聚合的数据流的数量很小，我们也可以使用一个select控制流程代码块来聚合这些数据流。\n1 2 3 4 5 6 7 8 9 10 11 12 13 // 假设数据流的数量为2。 ... output := make(chan uint64) go func() { inA, inB := inputs[0], inputs[1] for { select { case v := \u0026lt;- inA: output \u0026lt;- v case v := \u0026lt;- inB: output \u0026lt;- v } } } ... 数据分流 数据分流是数据聚合的逆过程。数据分流的实现很简单，但在实践中用的并不多。\n1 2 3 4 5 6 7 8 9 func Divisor(input \u0026lt;-chan uint64, outputs ...chan\u0026lt;- uint64) { for _, out := range outputs { go func(o chan\u0026lt;- uint64) { for { o \u0026lt;- \u0026lt;-input // \u0026lt;=\u0026gt; o \u0026lt;- (\u0026lt;-input) } }(out) } } 数据合成 数据合成将多个数据流中读取的数据合成一个。\n下面是一个数据合成工作函数的实现中，从两个不同数据流读取的两个uint64值组成了一个新的uint64值。 当然，在实践中，数据的组合比这复杂得多。\n1 2 3 4 5 6 7 8 9 10 func Composor(inA, inB \u0026lt;-chan uint64) \u0026lt;-chan uint64 { output := make(chan uint64) go func() { for { a1, b, a2 := \u0026lt;-inA, \u0026lt;-inB, \u0026lt;-inA output \u0026lt;- a1 ^ b \u0026amp; a2 } }() return output } 数据分解 数据分解是数据合成的逆过程。一个数据分解者从一个通道读取一份数据，并将此数据分解为多份数据。 这里就不举例了。\n数据复制/增殖 数据复制（增殖）可以看作是特殊的数据分解。一份输入数据将被复制多份并输出给多个数据流。\n1 2 3 4 5 6 7 8 9 10 func Duplicator(in \u0026lt;-chan uint64) (\u0026lt;-chan uint64, \u0026lt;-chan uint64) { outA, outB := make(chan uint64), make(chan uint64) go func() { for x := range in { outA \u0026lt;- x outB \u0026lt;- x } }() return outA, outB } 数据计算/分析 数据计算和数据分析模块的功能因具体程序不同而有很大的差异。 一般来说，数据分析者接收一份数据并对之加工处理后转换为另一份数据。\n下面的简单示例中，每个输入的uint64值将被进行位反转后输出。\n1 2 3 4 5 6 7 8 9 10 11 func Calculator(in \u0026lt;-chan uint64, out chan uint64) (\u0026lt;-chan uint64) { if out == nil { out = make(chan uint64) } go func() { for x := range in { out \u0026lt;- ^x } }() return out } 数据验证/过滤 一个数据验证或过滤者的任务是检查输入数据的合理性并抛弃不合理的数据。 比如，下面的工作者协程将抛弃所有的非素数。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import \u0026#34;math/big\u0026#34; func Filter0(input \u0026lt;-chan uint64, output chan uint64) \u0026lt;-chan uint64 { if output == nil { output = make(chan uint64) } go func() { bigInt := big.NewInt(0) for x := range input { bigInt.SetUint64(x) if bigInt.ProbablyPrime(1) { output \u0026lt;- x } } }() return output } func Filter(input \u0026lt;-chan uint64) \u0026lt;-chan uint64 { return Filter0(input, nil) } 数据服务/存盘 一般，一个数据服务或者存盘模块为一个数据流系统中的最后一个模块。 这里的实现值是简单地将数据输出到终端。\n1 2 3 4 5 6 7 import \u0026#34;fmt\u0026#34; func Printer(input \u0026lt;-chan uint64) { for x := range input { fmt.Println(x) } } 组装数据流系统 Now，让我们使用上面的模块工作者函数实现来组装一些数据流系统。 组装数据流仅仅是创建一些工作者协程函数调用，并为这些调用指定输入数据流和输出数据流。\n数据流系统例子1（一个流线型系统）\n1 2 3 4 5 6 7 8 9 10 11 12 13 package main ... // 上面的模块工作者函数实现 func main() { Printer( Filter( Calculator( RandomGenerator(), nil, ), ), ) } 数据流系统例子2（一个单向无环图系统）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main ... // 上面的模块工作者函数实现 func main() { filterA := Filter(RandomGenerator()) filterB := Filter(RandomGenerator()) filterC := Filter(RandomGenerator()) filter := Aggregator(filterA, filterB, filterC) calculatorA := Calculator(filter, nil) calculatorB := Calculator(filter, nil) calculator := Aggregator(calculatorA, calculatorB) Printer(calculator) } 更复杂的数据流系统可以表示为任何拓扑结构的图。比如一个复杂的数据流系统可能有多个输出模块。 但是有环拓扑结构的数据流系统在实践中很少用。\n从上面两个例子可以看出，使用通道来构建数据流系统是很简单和直观的。而且，通过使用数据聚合模块，我们可以很轻松地实现各个模块的工作协程数量的扇入（fan-in）和扇出（fan-out）。\n事实上，我们也可以使用一个简单的通道来代替数据聚合模块的角色。比如，下面的代码使用两个通道代替了上例中的两个数据聚合器。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main ... // 上面的模块工作者函数实现 func main() { c1 := make(chan uint64, 100) Filter0(RandomGenerator(), c1) // filterA Filter0(RandomGenerator(), c1) // filterB Filter0(RandomGenerator(), c1) // filterC c2 := make(chan uint64, 100) Calculator(c1, c2) // calculatorA Calculator(c1, c2) // calculatorB Printer(c2) } 上面的代码示例并没有太多考虑如何关闭一个数据流，会单独开一个文章介绍。\n","permalink":"http://localhost:64667/posts/programming/golang/channels/","summary":"\u003cp\u003e记录了一些channels常见的场景，以及自己的一些感受：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e使用通道进行异步和并发编程是简单和惬意的；\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e通道同步技术比被很多其它语言采用的其它同步方案（比如\u003ca href=\"https://en.wikipedia.org/wiki/Actor_model\"\u003e角色模型\u003c/a\u003e和\u003ca href=\"https://en.wikipedia.org/wiki/Async/await\"\u003easync/await模式\u003c/a\u003e）有着更多的应用场景和更多的使用变种。\u003c/p\u003e\n\u003cp\u003e通道作为同步手段，并非在任何情况下都是最佳的同步技术，本文也会补充原子操作和sync包内其他的技术作为参考。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"将通道用做futurepromise\"\u003e将通道用做future/promise\u003c/h3\u003e\n\u003cp\u003e很多其它流行语言支持future/promise来实现异步（并发）编程。 Future/promise常常用在请求/回应场合。\u003c/p\u003e\n\u003ch4 id=\"返回单向接收通道做为函数返回结果\"\u003e返回单向接收通道做为函数返回结果\u003c/h4\u003e\n\u003cp\u003e在下面这个例子中，\u003ccode\u003esumSquares\u003c/code\u003e函数调用的两个实参请求并发进行。 每个通道读取操作将阻塞到请求返回结果为止。 两个实参总共需要大约3秒钟（而不是6秒钟）准备完毕（以较慢的一个为准）。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s\"\u003e\u0026#34;math/rand\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"s\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003elongTimeRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003eint32\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003eint32\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 模拟一个工作负载\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eInt31n\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003er\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003esumSquares\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"kt\"\u003eint32\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003eint32\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eSeed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eNow\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nf\"\u003eUnixNano\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nf\"\u003elongTimeRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"nf\"\u003elongTimeRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nf\"\u003esumSquares\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch4 id=\"将单向发送通道类型用做函数实参\"\u003e将单向发送通道类型用做函数实参\u003c/h4\u003e\n\u003cp\u003e和上例一样，在下面这个例子中，\u003ccode\u003esumSquares\u003c/code\u003e函数调用的两个实参的请求也是并发进行的。 和上例不同的是\u003ccode\u003elongTimeRequest\u003c/code\u003e函数接收一个单向发送通道类型参数而不是返回一个单向接收通道结果。\u003c/p\u003e","title":"Channels Concurrency Work-Around"},{"content":"阅读到的一些方便、有趣的技巧或者ideas的随手记录，后续考虑对相关话题专门开坑\n一行代码画出专业的论文图 SciencePlots\n计算机专业向来不缺少专业的绘图软件，从Excel到PPT，从最近沸沸扬扬的Matlab到Matplotlib、pyplot、ggplot，乃至其他更为专业的软件，着实丰富了我们的画图生活。\n但是，这些软件或工具的背后，常常需要我们付出更多的努力：调色、统一格式、展示要高大上，等等。\n现在，一款开源的软件工具包问世了：SciencePlots。它让你用一行代码画出天然高端且美观的论文图。\nSciencePlots是一个依附于Matplotlib的扩展包，可以通过pip一键安装：\npip install SciencePlots 然后我们在画图时，只需要一句with.plt.style.context(['science']):，就可以画出非常美观且专业的图：\n你还可以加一个选项with.plt.style.context(['science','ieee']):，就能画出IEEE格式的图：\n甚至是超美的散点图：\n还有很多自定义的图像风格，保证节约我们的画图时间\n这个包默认会调用latex来画图，如果不想用latex（也不是完全需要），可以在context里写一个属性\u0026rsquo;nolatex\u0026rsquo;即可。不然如果没有安装latex或latex路径配置有问题，则会报错。\n","permalink":"http://localhost:64667/posts/programming/black-magic/","summary":"\u003cp\u003e\u003ccode\u003e阅读到的一些方便、有趣的技巧或者ideas的随手记录，后续考虑对相关话题专门开坑\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"一行代码画出专业的论文图\"\u003e一行代码画出专业的论文图\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/garrettj403/SciencePlots\"\u003eSciencePlots\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e计算机专业向来不缺少专业的绘图软件，从Excel到PPT，从最近沸沸扬扬的Matlab到Matplotlib、pyplot、ggplot，乃至其他更为专业的软件，着实丰富了我们的画图生活。\u003c/p\u003e\n\u003cp\u003e但是，这些软件或工具的背后，常常需要我们付出更多的努力：调色、统一格式、展示要高大上，等等。\u003c/p\u003e\n\u003cp\u003e现在，一款开源的软件工具包问世了：\u003cstrong\u003eSciencePlots\u003c/strong\u003e。它让你用一行代码画出天然高端且美观的论文图。\u003c/p\u003e\n\u003cp\u003eSciencePlots是一个依附于Matplotlib的扩展包，可以通过pip一键安装：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epip install SciencePlots\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后我们在画图时，只需要一句\u003ccode\u003ewith.plt.style.context(['science']):\u003c/code\u003e，就可以画出非常美观且专业的图：\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"plot1\" loading=\"lazy\" src=\"https://pic1.zhimg.com/80/v2-90ced58bd948b48122c7c49f6dd3aeb8_1440w.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003e你还可以加一个选项\u003ccode\u003ewith.plt.style.context(['science','ieee']):\u003c/code\u003e，就能画出IEEE格式的图：\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"plot-ieee\" loading=\"lazy\" src=\"https://pic3.zhimg.com/80/v2-65a94e294409928599dc91745f01662e_1440w.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003e甚至是超美的散点图：\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"plot-scatter\" loading=\"lazy\" src=\"https://pic4.zhimg.com/80/v2-db5c1cc749638e5bfba236fa9acdb4ff_1440w.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003e还有很多自定义的图像风格，保证节约我们的画图时间\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e这个包默认会调用latex来画图，如果不想用latex（也不是完全需要），可以在context里写一个属性\u0026rsquo;nolatex\u0026rsquo;即可。不然如果没有安装latex或latex路径配置有问题，则会报错。\u003c/p\u003e\u003c/blockquote\u003e","title":"Black Magic"},{"content":"这个post为记录目前正在阅读与研究的section\nGo语言设计 Go语言设计与实现\nGo Under The Hood\n这两本在写作目的和内容规划都是一致的，不过第二个原本不再维护内容，作者开了下面的新的项目，把撰写原本而积累的与Go相关的资源进行了重新的整理。 Go设计历史\npprof对服务端性能影响的研究 考虑一些极端场景，比如极度追求性能，压榨系统资源以及技术栈必须是Go的业务场景下，是否能自己构建Reactor网络模型\nGRPC框架对服务侧性能的影响 Russ Cox正则表达式系列 You should not be permitted to write production code if you do not have an journeyman license in regular expressions or floating point math. \u0026ndash; Rob Pike\nRegular Expression Matching Can Be Simple And Fast\n编译器词法分析:正则语言和正则表达式\nGo内存原理与调度模型 正在整理专栏\nBound Checking Elimination Crafting Interpreter 时常看PL和Compiler的基础\ncrafting interpreters\nKosaraju\u0026rsquo;s Algorithm 看William Lin的coding interview觉得用来处理树和图很好，算法4里也有\nHeilmeier问题系列 思考某篇paper的选题\nWhat are you trying to do? Articulate your objectives using absolutely no jargon. How is it done today, and what are the limits of current practice? Who cares? [Support other’s research? Shape research landscape? Power applications in industry?] What\u0026rsquo;s new in your approach and why do you think it will be successful? If you\u0026rsquo;re successful, what difference will it make? [e.g. Contributions in theory/modeling? Improve accuracy by 5% on dataset A, B, C…?] What are the risks and the payoffs? [Further, how would you mitigate the risks? If your proposed method does not work, what could be alternative design? These can end up as discussions such as ablation studies in your paper.] How much will it cost? [e.g. How many GPUs do your experiments require? How long is each training process? How about data storage?] How long will it take? [How many hours are you going to work on this per week? When is the submission DDL? Can you make it?] What are the midterm and final \u0026ldquo;exams\u0026rdquo; to check for success? ","permalink":"http://localhost:64667/posts/programming/links/","summary":"\u003cp\u003e\u003ccode\u003e这个post为记录目前正在阅读与研究的section\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id=\"go语言设计\"\u003eGo语言设计\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://draveness.me/golang/\"\u003eGo语言设计与实现\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://golang.design/under-the-hood/\"\u003eGo Under The Hood\u003c/a\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e这两本在写作目的和内容规划都是一致的，不过第二个原本不再维护内容，作者开了下面的新的项目，把撰写原本而积累的与Go相关的资源进行了重新的整理。\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ca href=\"[golang.design/history]%28https://changkun.de/s/go-history%29\"\u003eGo设计历史\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"pprof对服务端性能影响的研究\"\u003epprof对服务端性能影响的研究\u003c/h2\u003e\n\u003cp\u003e考虑一些极端场景，比如极度追求性能，压榨系统资源以及技术栈必须是Go的业务场景下，是否能自己构建Reactor网络模型\u003c/p\u003e\n\u003ch2 id=\"grpc框架对服务侧性能的影响\"\u003eGRPC框架对服务侧性能的影响\u003c/h2\u003e\n\u003ch2 id=\"russ-cox正则表达式系列\"\u003eRuss Cox正则表达式系列\u003c/h2\u003e\n\u003cp\u003e\u003cem\u003eYou should not be permitted to write production code if you do not have an journeyman license in regular expressions or floating point math. \u0026ndash; Rob Pike\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://swtch.com/~rsc/regexp/regexp1.html\"\u003eRegular Expression Matching Can Be Simple And Fast\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.cnblogs.com/Ninputer/archive/2011/06/08/2075714.html\"\u003e编译器词法分析:正则语言和正则表达式\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"go内存原理与调度模型\"\u003eGo内存原理与调度模型\u003c/h2\u003e\n\u003cp\u003e正在整理专栏\u003c/p\u003e\n\u003ch2 id=\"bound-checking-elimination\"\u003eBound Checking Elimination\u003c/h2\u003e\n\u003ch2 id=\"crafting-interpreter\"\u003eCrafting Interpreter\u003c/h2\u003e\n\u003cp\u003e时常看PL和Compiler的基础\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://craftinginterpreters.com/contents.html\"\u003ecrafting interpreters\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"kosarajus-algorithm\"\u003eKosaraju\u0026rsquo;s Algorithm\u003c/h2\u003e\n\u003cp\u003e看William Lin的coding interview觉得用来处理树和图很好，算法4里也有\u003c/p\u003e\n\u003ch2 id=\"heilmeier问题系列\"\u003eHeilmeier问题系列\u003c/h2\u003e\n\u003cp\u003e思考某篇paper的选题\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eWhat are you trying to do?\u003c/strong\u003e Articulate your objectives using absolutely no jargon.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHow is it done today, and what are the limits of current practice?\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWho cares?\u003c/strong\u003e [Support other’s research? Shape research landscape? Power applications in industry?]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWhat\u0026rsquo;s new in your approach\u003c/strong\u003e and why do you think it will be successful?\u003c/li\u003e\n\u003cli\u003eIf you\u0026rsquo;re successful, \u003cstrong\u003ewhat difference will it make?\u003c/strong\u003e [e.g. Contributions in theory/modeling? Improve accuracy by 5% on dataset A, B, C…?]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWhat are the risks and the payoffs?\u003c/strong\u003e [Further, how would you mitigate the risks? If your proposed method does not work, what could be alternative design? These can end up as discussions such as ablation studies in your paper.]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHow much will it cost?\u003c/strong\u003e [e.g. How many GPUs do your experiments require? How long is each training process? How about data storage?]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHow long will it take?\u003c/strong\u003e [How many hours are you going to work on this per week? When is the submission DDL? Can you make it?]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWhat are the midterm and final \u0026ldquo;exams\u0026rdquo; to check for success?\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e","title":"书单记录"},{"content":"Preface 本文整理golang编码的单元测试常用示例，以及TDD的简要流程。\n单元测试基础 单元测试文件以_test.go结尾，需要记住以下原则：\n文件名必须是_test.go结尾的，这样在执行go test的时候才会执行到相应的代码 你必须import testing这个包 所有的测试用例函数必须是Test开头 测试用例会按照源代码中写的顺序依次执行 测试函数TestXxx()的参数是testing.T，我们可以使用该类型来记录错误或者是测试状态 测试格式：func TestXxx (t *testing.T),Xxx部分可以为任意的字母数字的组合，但是首字母不能是小写字母[a-z]，例如Testintdiv是错误的函数名。 函数中通过调用testing.T的Error, Errorf, FailNow, Fatal, FatalIf方法，说明测试不通过，调用Log方法用来记录测试的信息。 Table-Driven-Testing 测试讲究 case 覆盖，当我们要覆盖更多 case 时，显然通过修改代码的方式很笨拙。这时我们可以采用 Table-Driven 的方式写测试，标准库中有很多测试是使用这种方式写的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 func TestFib(t *testing.T) { var fibTests = []struct { in int // input expected int // expected result }{ {1, 1}, {2, 1}, {3, 2}, {4, 3}, {5, 5}, {6, 8}, {7, 13}, } for _, tt := range fibTests { actual := Fib(tt.in) if actual != tt.expected { t.Errorf(\u0026#34;Fib(%d) = %d; expected %d\u0026#34;, tt.in, actual, tt.expected) } } } 由于我们使用的是 t.Errorf，即使其中某个 case 失败，也不会终止测试执行。\nT类型 单元测试中，传递给测试函数的参数是 *testing.T 类型。它用于管理测试状态并支持格式化测试日志。测试日志会在执行测试的过程中不断累积，并在测试完成时转储至标准输出。\n当测试函数返回时，或者当测试函数调用 FailNow、 Fatal、Fatalf、SkipNow、Skip、Skipf 中的任意一个时，则宣告该测试函数结束。跟 Parallel 方法一样，以上提到的这些方法只能在运行测试函数的 goroutine 中调用。\n至于其他报告方法，比如 Log 以及 Error 的变种， 则可以在多个 goroutine 中同时进行调用。\n报告方式 上面提到的系列包括方法，带 f 的是格式化的，格式化语法参考 fmt 包。\nT 类型内嵌了 common 类型，common 提供这一系列方法，我们经常会用到的（注意，这里说的测试中断，都是指当前测试函数）：\n1）当我们遇到一个断言错误的时候，标识这个测试失败，会使用到：\nFail : 测试失败，测试继续，也就是之后的代码依然会执行 FailNow : 测试失败，测试中断 在 FailNow 方法实现的内部，是通过调用 runtime.Goexit() 来中断测试的。\n2）当我们遇到一个断言错误，只希望跳过这个错误，但是不希望标识测试失败，会使用到：\nSkipNow : 跳过测试，测试中断 在 SkipNow 方法实现的内部，是通过调用 runtime.Goexit() 来中断测试的。\n3）当我们只希望打印信息，会用到 :\nLog : 输出信息 Logf : 输出格式化的信息 注意：默认情况下，单元测试成功时，它们打印的信息不会输出，可以通过加上 -v 选项，输出这些信息。但对于基准测试，它们总是会被输出。\n4）当我们希望跳过这个测试，并且打印出信息，会用到：\nSkip : 相当于 Log + SkipNow Skipf : 相当于 Logf + SkipNow 5）当我们希望断言失败的时候，标识测试失败，并打印出必要的信息，但是测试继续，会用到：\nError : 相当于 Log + Fail Errorf : 相当于 Logf + Fail 6）当我们希望断言失败的时候，标识测试失败，打印出必要的信息，但中断测试，会用到：\nFatal : 相当于 Log + FailNow Fatalf : 相当于 Logf + FailNow Parallel并行测试 这里简单测试一个对Map的读写并行测试。注意：Parallel方法表示只与其他带有Parallel方法的测试并行进行测试。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 var ( data = make(map[string]string) locker sync.RWMutex ) func WriteToMap(k, v string) { locker.Lock() defer locker.Unlock() data[k] = v } func ReadFromMap(k string) string { locker.RLock() defer locker.RUnlock() return data[k] } 测试用例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 var pairs = []struct { k string v string }{ {\u0026#34;polaris\u0026#34;, \u0026#34;calvin1\u0026#34;}, {\u0026#34;studygolang\u0026#34;, \u0026#34;oops1\u0026#34;}, {\u0026#34;stdlib\u0026#34;, \u0026#34;go demo1\u0026#34;}, {\u0026#34;polaris1\u0026#34;, \u0026#34;calvin2\u0026#34;}, {\u0026#34;studygolang1\u0026#34;, \u0026#34;oops2\u0026#34;}, {\u0026#34;stdlib1\u0026#34;, \u0026#34;go demo2\u0026#34;}, {\u0026#34;polaris2\u0026#34;, \u0026#34; calvin3\u0026#34;}, } // 注意 TestWriteToMap 需要在 TestReadFromMap 之前 func TestWriteToMap(t *testing.T) { t.Parallel() for _, tt := range pairs { WriteToMap(tt.k, tt.v) } } func TestReadFromMap(t *testing.T) { t.Parallel() for _, tt := range pairs { actual := ReadFromMap(tt.k) if actual != tt.v { t.Errorf(\u0026#34;the value of key(%s) is %s, expected: %s\u0026#34;, tt.k, actual, tt.v) } } } 试验步骤：\n注释掉 WriteToMap 和 ReadFromMap 中 locker 保护的代码，同时注释掉测试代码中的 t.Parallel，执行测试，测试通过，即使加上 -race，测试依然通过； 只注释掉 WriteToMap 和 ReadFromMap 中 locker 保护的代码，执行测试，测试失败（如果未失败，加上 -race 一定会失败）； 如果代码能够进行并行测试，在写测试时，尽量加上 Parallel，这样可以测试出一些可能的问题。\n子测试与子基准测试(Run) Go1.7开始引入的特性，即能够执行嵌套测试，对于过滤执行特性测试用例非常有用。\nT 和 B 的 Run 方法允许定义子单元测试和子基准测试，而不必为它们单独定义函数。这便于创建基于 Table-Driven 的基准测试和层级测试。它还提供了一种共享通用 setup 和 tear-down 代码的方法：\n1 2 3 4 5 6 7 func TestFoo(t *testing.T) { // \u0026lt;setup code\u0026gt; t.Run(\u0026#34;A=1\u0026#34;, func(t *testing.T) { ... }) t.Run(\u0026#34;A=2\u0026#34;, func(t *testing.T) { ... }) t.Run(\u0026#34;B=1\u0026#34;, func(t *testing.T) { ... }) // \u0026lt;tear-down code\u0026gt; } 每个子测试和子基准测试都有一个唯一的名称：由顶层测试的名称与传递给 Run 的名称组成，以斜杠分隔，并具有可选的尾随序列号，用于消除歧义。\n命令行标志 -run 和 -bench 的参数是非固定的正则表达式，用于匹配测试名称。对于由斜杠分隔的测试名称，例如子测试的名称，它名称本身即可作为参数，依次匹配由斜杠分隔的每部分名称。因为参数是非固定的，一个空的表达式匹配任何字符串，所以下述例子中的 “匹配” 意味着 “顶层/子测试名称包含有”：\ngo test -run \u0026#39;\u0026#39; # 执行所有测试。 go test -run Foo # 执行匹配 \u0026#34;Foo\u0026#34; 的顶层测试，例如 \u0026#34;TestFooBar\u0026#34;。 go test -run Foo/A= # 对于匹配 \u0026#34;Foo\u0026#34; 的顶层测试，执行其匹配 \u0026#34;A=\u0026#34; 的子测试。 go test -run /A=1 # 执行所有匹配 \u0026#34;A=1\u0026#34; 的子测试。 子测试也可用于程序并行控制。只有子测试全部执行完毕后，父测试才会完成。在下述例子中，所有子测试之间并行运行，此处的 “并行” 只限于这些子测试之间，并不影响定义在其他顶层测试中的子测试：\n1 2 3 4 5 6 7 8 9 func TestGroupedParallel(t *testing.T) { for _, tc := range tests { tc := tc // capture range variable t.Run(tc.Name, func(t *testing.T) { t.Parallel() ... }) } } 在所有子测试并行运行完毕之前，Run 方法不会返回。下述例子提供了一种方法，用于在子测试并行运行完毕后清理资源：\n1 2 3 4 5 6 7 8 9 func TestTeardownParallel(t *testing.T) { // This Run will not return until the parallel tests finish. t.Run(\u0026#34;group\u0026#34;, func(t *testing.T) { t.Run(\u0026#34;Test1\u0026#34;, parallelTest1) t.Run(\u0026#34;Test2\u0026#34;, parallelTest2) t.Run(\u0026#34;Test3\u0026#34;, parallelTest3) }) // \u0026lt;tear-down code\u0026gt; } Test Coverage 测试覆盖率，这里讨论的是基于代码的测试覆盖率。\nGo 从 1.2 开始，引入了对测试覆盖率的支持，使用的是与 cover 相关的工具（go test -cover、go tool cover）。虽然 testing 包提供了 cover 相关函数，不过它们是给 cover 的工具使用的。\n关于测试覆盖率的更多信息，可以参考官方的博文：The cover story\ngotest变量(参考) gotest 的变量有这些：\ntest.short : 一个快速测试的标记，在测试用例中可以使用 testing.Short() 来绕开一些测试 test.outputdir : 输出目录 test.coverprofile : 测试覆盖率参数，指定输出文件 test.run : 指定正则来运行某个 / 某些测试用例 test.memprofile : 内存分析参数，指定输出文件 test.memprofilerate : 内存分析参数，内存分析的抽样率 test.cpuprofile : cpu 分析输出参数，为空则不做 cpu 分析 test.blockprofile : 阻塞事件的分析参数，指定输出文件 test.blockprofilerate : 阻塞事件的分析参数，指定抽样频率 test.timeout : 超时时间 test.cpu : 指定 cpu 数量 test.parallel : 指定运行测试用例的并行数 gotest结构体(参考) B : 压力测试 BenchmarkResult : 压力测试结果 Cover : 代码覆盖率相关结构体 CoverBlock : 代码覆盖率相关结构体 InternalBenchmark : 内部使用的结构体 InternalExample : 内部使用的结构体 InternalTest : 内部使用的结构体 M : main 测试使用的结构体 PB : Parallel benchmarks 并行测试使用的结构体 T : 普通测试用例 TB : 测试用例的接口 压力测试基础 压测检测函数(方法)的性能，和编写UT类似，所以不再赘述，但需要注意以下几点：\n压力测试用例必须遵循如下格式，其中XXX可以是任意字母数字的组合，但是首字母不能是小写字母 func BenchmarkXXX(b *testing.B) { ... } go test不会默认执行压力测试的函数，如果要执行压力测试需要带上参数-test.bench，语法:-test.bench=\u0026quot;test_name_regex\u0026quot;,例如go test -test.bench=\u0026quot;.*\u0026quot;表示测试全部的压力测试函数 在压力测试用例中,请记得在循环体内使用testing.B.N,以使测试可以正常的运行 文件名也必须以_test.go结尾 下面是一个压测的例子，测试除法函数的性能：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package gotest import ( \u0026#34;testing\u0026#34; ) func Benchmark_Division(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { //use b.N for looping Division(4, 5) } } func Benchmark_TimeConsumingFunction(b *testing.B) { b.StopTimer() //调用该函数停止压力测试的时间计数 //做一些初始化的工作,例如读取文件数据,数据库连接之类的, //这样这些时间不影响我们测试函数本身的性能 b.StartTimer() //重新开始时间 for i := 0; i \u0026lt; b.N; i++ { Division(4, 5) } } 我们执行命令go test webbench_test.go -test.bench=\u0026quot;.*\u0026quot;，可以看到如下结果：\nBenchmark_Division-4 500000000\t7.76 ns/op\t456 B/op\t14 allocs/op Benchmark_TimeConsumingFunction-4 500000000\t7.80 ns/op\t224 B/op\t4 allocs/op PASS ok gotest\t9.364s 上面的结果显示我们没有执行任何TestXXX的单元测试函数，显示的结果只执行了压力测试函数，第一条显示了Benchmark_Division执行了500000000次，每次的执行平均时间是7.76纳秒，第二条显示了Benchmark_TimeConsumingFunction执行了500000000，每次的平均执行时间是7.80纳秒。最后一条显示总共的执行时间。\n性能测试进阶(benchstat) sync.Map优化例子 在sync.Map中存储一个值，然后再并发删除该值:\n1 2 3 4 5 6 7 8 func BenchmarkDeleteCollision(b *testing.B){ benchMap(b, bench{ setup: func(_ *testing.B, m mapInterface){m,LoadOrStore(0, 0)}, perG: func(b *testing.B, pb *testing.PB, i int, m mapInterface){ for; pb.Next(); i++ {m.Delete(0)} } }) } 优化 src/sync/map.go 275 -delete(m.dirty, key) 275 +e, ok = m.dirty[key] 276 +m.misslocked() $ git stash $ git test -run=none -bench=BenchmarkDeleteCollision -count=20 | tee old.txt $ git stash pop $ git test -run=none -bench=BenchmarkDeleteCollision -count=20 | tee new.txt $ benchstat old.txt new.ext 编译器优化例子 查看编译器优化，测试函数被编译成了什么\n1 2 3 4 5 6 7 8 9 10 11 12 13 package compile func comp1(s1, s2 []byte)bool{ return string(s1) == string(s2) } func comp2(s1, s2 []byte)bool{ return conv(s1) == conv(s2) } func conv(s []byte) string{ return string(s) } $GOSSAFUNC=com1 go build // 会生成ssa.html，open它即可看到comp1函数编译后的代码 假设性检验 统计是一套在总体分布函数完全未知或者只知道形式、不知道参数的情况下，为了由样本推断总体的某些未知特性，形成的一套方法论。 多次抽样：对同一个性能基准测试运行多次，根据中心极限定理，如果理论均值存在，则抽样噪声服从正态分布。 当重复执行完某个性能基准测试后，benchstat先帮我们剔除掉了一些异常值，我们得到了关于某段代码在可控的环境条件E下的性能分布的一组样本。 T检验：参数检验，假设数据服从正态分布，且方差相同 (最严格) Welch T检验(ttest)： 参数检验，假设服从正态分布，但方差不一定相同 Mann-Whitney U检验(utest， benchstat的default): 非参数检验，假设最少，最通用，值假设两组样本来自于同一个总体（例如两个性能测试是否在同一个机器跑的），只有均值的差异。当对数据的假设减少时，结论的不确定性增大，p值会因此增大，进而使得性能基准测试的条件更加严格。 局限和应对 perflock降低系统噪音，作用是限制CPU时钟频率，从而一定程度上消除系统对性能测试程序的影响，仅支持Linux。\n$ go get github.com/aclements/perflock/cmd/perflock $ sudo install $GOPATH/bin/perflock /usr/bin/perflock $ sudo -b perflock -daemon $ perflock $ perflock -governer 70% go test -test=none -bench=. Mocking GoMock GoMock为很常用的测试mock框架，虽然我自己不常用:0（因为我自身并不非常喜欢mock), 并且对在生产开发环境使用mock有点意见，代码增长（和Injection类似），以及如果不单独部署一个mock server很多修改并不能很好得share。\n虽然如此，这里还是记录一下GoMock的quick start。\nInstall 首先就是安装gomock包，以及mockgen代码生成工具，后者其实并不是必要的，但是如果没有自己就要写一个容易出错并且繁琐的mock代码。\ngo get github.com/golang/mock/gomock go get github.com/golang/mock/mockgen 检查一下有没有成功，会打印一些使用帮助信息:\n$GOPATH/bin/mockgen 基本使用 基本上使用gomock遵循以下几个步骤：\n使用mockgen去对你想要mock的interface生成mock对象 在测试代码中，创建一个gomock.Controller实例，并且将其传入mock对象的constructor中获取一个mock对象 在你的mock中调用EXPECT()去设置测试期望以及返回值 在mock controller调用FINISH()去设置进行mock期望的assert（断言） 下面记录一个小的demo展示上述的workflow，为了让展示简单，我们可以只是聚焦两个文件- 一个接口文件doer.go中的Doer接口（希望mock的），以及user.go文件中的结构体User，这个接口体用到了Doer接口。\ndoer.go：\n1 2 3 4 5 package doer type Doer interface { DoSomething(int, string) error } user.go\n1 2 3 4 5 6 7 8 9 10 11 package user import \u0026#34;github.com/sgreben/testing-with-gomock/doer\u0026#34; type User struct { Doer doer.Doer } func (u *User) Use() error { return u.Doer.DoSomething(123, \u0026#34;Hello GoMock\u0026#34;) } 下面是project的layout：\n\u0026#39;-- doer \u0026#39;-- doer.go \u0026#39;-- user \u0026#39;-- user.go 我们接下来要在mocks文件夹内添加Doer的mock，并且新增一个user_test.go文件：\n1 2 3 4 5 6 7 \u0026#39;-- doer \u0026#39;-- doer.go \u0026#39;-- mocks \u0026#39;-- mock_doer.go \u0026#39;-- user \u0026#39;-- user.go \u0026#39;-- user_test.go 为了生成这个mock_doer.go，我们创建mocks目录后调用：\nmockgen -destination=mocks/mock_doer.go -package=mocks github.com/sgreben/testing-with-gomock/doer Doer 这里的mockgen传入以下几个参数:\n-destination=mocks/mock_doer.go 目标路径 -package=mocks：在mockspackage内生成mocks github.com/sgreben/testing-with-gomock/doer： 为这个package生成mocks (包名而已，根据实际情况定) Doer: 为这个interface生成mocks，如果想要mock多个接口，可以传入以逗号分隔的列表Doer1,Doer2，对接口的声明必须清楚。 注意如果$GOPATH/bin不在$PATH中，mockgen要改成$GOPATH/bin/mockgen\n最终mockgen会生成mock_doer.go这个文件：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 // Code generated by MockGen. DO NOT EDIT. // Source: github.com/sgreben/testing-with-gomock/doer (interfaces: Doer) package mocks import ( gomock \u0026#34;github.com/golang/mock/gomock\u0026#34; ) // MockDoer is a mock of Doer interface type MockDoer struct { ctrl *gomock.Controller recorder *MockDoerMockRecorder } // MockDoerMockRecorder is the mock recorder for MockDoer type MockDoerMockRecorder struct { mock *MockDoer } // NewMockDoer creates a new mock instance func NewMockDoer(ctrl *gomock.Controller) *MockDoer { mock := \u0026amp;MockDoer{ctrl: ctrl} mock.recorder = \u0026amp;MockDoerMockRecorder{mock} return mock } // EXPECT returns an object that allows the caller to indicate expected use func (_m *MockDoer) EXPECT() *MockDoerMockRecorder { return _m.recorder } // DoSomething mocks base method func (_m *MockDoer) DoSomething(_param0 int, _param1 string) error { ret := _m.ctrl.Call(_m, \u0026#34;DoSomething\u0026#34;, _param0, _param1) ret0, _ := ret[0].(error) return ret0 } // DoSomething indicates an expected call of DoSomething func (_mr *MockDoerMockRecorder) DoSomething(arg0, arg1 interface{}) *gomock.Call { return _mr.mock.ctrl.RecordCall(_mr.mock, \u0026#34;DoSomething\u0026#34;, arg0, arg1) } 浏览一下代码，可以看到生成的EXPECT()方法和mock接口的方法在一个层级，这里是DoSomething，因为要避免名字冲突，所以这里把EXPECT定义成全大写。\n下面，我们在测试中创建一个mock controller。 mock controller的作用是跟踪以及对相关mocks对象的进行期望断言(asserting the expectations)。\n创建controller的方法就是，传入构建函数代表*testing.T的t，而后将其作为参数传入Doermock对象的构建函数:\n1 2 3 4 mockCtrl := gomock.NewController(t) defer mockCtrl.Finish() mockDoer := mocks.NewMockDoer(mockCtrl) 上述对Finish的defer后面再说。\n假设我们想要断言mockerDoer的Do方法将会被调用一次，传入123以及Hello GoMock作为参数并且返回nil。\n为了实现这个断言，我们在mockDoer对象上调用EXPECT()设置期望。EXPECT()其实返回的是一个mock recorder的对象，它包含了真实对象的所有同名方法。\n我们能够进行如下的链式调用:\n1 mockDoer.EXPECT().DoSomething(123, \u0026#34;Hello GoMock\u0026#34;).Return(nil).Times(1) 从这个调用其实你也能理解每个的意义，如果要设置方法被调用的次数，除了上述的Times(number)，还有诸如MaxTimes(number)以及MinTimes(numbers)这种显性的限制。\n看上去差不多了，接下来写一个完整的user_test.go`:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package user_test import ( \u0026#34;github.com/sgreben/testing-with-gomock/mocks\u0026#34; \u0026#34;github.com/sgreben/testing-with-gomock/user\u0026#34; ) func TestUse(t *testing.T) { mockCtrl := gomock.NewController(t) defer mockCtrl.Finish() mockDoer := mocks.NewMockDoer(mockCtrl) testUser := \u0026amp;user.User{Doer:mockDoer} // Expect Do to be called once with 123 and \u0026#34;Hello GoMock\u0026#34; as parameters, and return nil from the mocked call. mockDoer.EXPECT().DoSomething(123, \u0026#34;Hello GoMock\u0026#34;).Return(nil).Times(1) testUser.Use() } 可能这个代码里对mock期望的断言并不明显，断言发生在defer掉的Finish()。相当于对Finish的调用发生在mock controller的声明的时候 - 这样我们不会忘记在后面加上期望断言。\n最后跑一下测试:\n$ go test -v github.com/sgreben/testing-with-gomock/user === RUN TestUse --- PASS: TestUse (0.00s) PASS ok github.com/sgreben/testing-with-gomock/user 0.007s 当然如果你想构建多个mock对象，你可以对mock controller进行复用，它的Finish相当于会发生在所有和controller关联的mock对象的期望断言被设置之后。\n我们也可以测试一下mock方法的返回值，这里改写一下测试返回一个dummyError：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 func TestUseReturnsErrorFromDo(t *testing.T) { mockCtrl := gomock.NewController(t) defer mockCtrl.Finish() dummyError := errors.New(\u0026#34;dummy error\u0026#34;) mockDoer := mocks.NewMockDoer(mockCtrl) testUser := \u0026amp;user.User{Doer:mockDoer} // Expect Do to be called once with 123 and \u0026#34;Hello GoMock\u0026#34; as parameters, and return dummyError from the mocked call. mockDoer.EXPECT().DoSomething(123, \u0026#34;Hello GoMock\u0026#34;).Return(dummyError).Times(1) err := testUser.Use() if err != dummyError { t.Fail() } } 通过go:generate使用GoMock 有些人可能发现一个workflow的问题，如果对每个package以及interface都用mockgen肯定是非常繁琐的，特别是如果我们开发的项目有大量的接口和包定义。为了解决这个问题，mockgen命令行能够被特殊的go:generate注释去替代。\n比如，在我们的例子里，我们能够在doer.go的package声明下面添加注释:\n1 2 3 4 5 6 7 package doer //go:generate mockgen -destination=../mocks/mock_doer.go -package=mocks github.com/sgreben/testing-with-gomock/doer Doer type Doer interface { DoSomething(int, string) error } 但是这种写法也有个问题，因为代码文件目录和mocks目录的不一致，导致我们需要添加../mocks类似的路径而不是简单的mocks/，我们可以在项目的根路径下生成所有mocks:\ngo generate ./... 写法上注意代码里//和go:generate之间没有空格。\n对于添加go:generate注释的原则以及一些mock的构建命名原则如下:\n每个包含需要mock的interfaces的文件中添加一个go:generate注释 如果要用mockgen要传入清晰的interface名 把mock文件放在mocks包下，名称改写X.go到mocks/mock_X.go 使用参数匹配器 有些情况下，你对mock中的特定参数不太关心，当然我们可以清楚地固定参数，也可以用参数匹配器去匹配参数，我们称之为Matcher，熟悉Ginkgo框架的同学应该很清楚。\nGoMock中预设了几个matchers：\ngomock.Any()： 匹配所有类型、所有值 gomock.Eq(x): 使用反射去匹配任何与x为DeepEqual的值 gomock.Nil()： 匹配nil gomock.Not(m): 这里m是一个Matcher，也就是匹配所有没有被m匹配的值 gomock.Not(x): 这里x不是一个Matcher，匹配所有与x不DeepEqual的值 举个例子，如果我们不关心Do方法的第一个参数:\n1 mockDoer.EXPECT().DoSomething(gomock.Any(), \u0026#34;Hello GoMock\u0026#34;) GoMock会自动把非匹配类型的参数转化为Eq匹配器：\n1 mockDoer.EXPECT().DoSomething(gomock.Any(), gomock.Eq(\u0026#34;Hello GoMock\u0026#34;)) 当然我们也可以自定义Matchers，实现接口就行, gomock/matchers.go :\n1 2 3 4 type Matcher interface { Matches(x interface{}) bool String() string } 这里的Matches方法是实例匹配发生的地方，String方法针对测试失败时生成human-readable的信息，我们可以自己写一个matcher去检查参数类型：\nmatch/oftype.go\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package match import ( \u0026#34;reflect\u0026#34; \u0026#34;github.com/golang/mock/gomock\u0026#34; ) type ofType struct{ t string } func OfType(t string) gomock.Matcher { return \u0026amp;ofType{t} } func (o *ofType) Matches(x interface{}) bool { return reflect.TypeOf(x).String() == o.t } func (o *ofType) String() string { return \u0026#34;is of type \u0026#34; + o.t } 然后我们就可以使用我们的matcher:\n1 2 3 4 5 // Expect Do to be called once with 123 and any string as parameters, and return nil from the mocked call. mockDoer.EXPECT(). DoSomething(123, match.OfType(\u0026#34;string\u0026#34;)). Return(nil). Times(1) 注意下上述我们分行写，要把.写在行末尾，不然编译器会报错。\n断言调用顺序 对一个对象的调用顺序也是很重要的，GoMock提供了.After方法显式地定义一个方法必须在另一个方法后面被调用:\n1 2 3 callFirst := mockDoer.EXPECT().DoSomething(1, \u0026#34;first this\u0026#34;) callA := mockDoer.EXPECT().DoSomething(2, \u0026#34;then this\u0026#34;).After(callFirst) callB := mockDoer.EXPECT().DoSomething(2, \u0026#34;or this\u0026#34;).After(callFirst) 这个代码都能理解。\n此外还提供了一个更直观的手段去定义断言顺序，也就是gomock.InOrder，这种写法更容易阅读:\n1 2 3 4 5 6 gomock.InOrder( mockDoer.EXPECT().DoSomething(1, \u0026#34;first this\u0026#34;), mockDoer.EXPECT().DoSomething(2, \u0026#34;then this\u0026#34;), mockDoer.EXPECT().DoSomething(3, \u0026#34;then this\u0026#34;), mockDoer.EXPECT().DoSomething(4, \u0026#34;finally this\u0026#34;), ) 定义mock的actions 本质上就是mock其实不会执行其他行为，我们可以人为使用.Do方法，并且传入调用的函数，意味着如果调用的参数匹配上了，就会执行.Do提供的函数：\n1 2 3 4 5 6 mockDoer.EXPECT(). DoSomething(gomock.Any(), gomock.Any()). Return(nil). Do(func(x int, y string) { fmt.Println(\u0026#34;Called with x =\u0026#34;,x,\u0026#34;and y =\u0026#34;, y) }) 一些复杂的动作，比如下面这个例子，DoSomething方法的第一个int参数应该小于或者等于第二个string参数的长度:\n1 2 3 4 5 6 7 8 mockDoer.EXPECT(). DoSomething(gomock.Any(), gomock.Any()). Return(nil). Do(func(x int, y string) { if x \u0026gt; len(y) { t.Fail() } }) 这种写法不能通过自定义matcher实现，因为我们关联了多个具体的值，而matcher每次只能访问一个参数。\nsql-mock(GORM) 常规的database/sql/driver的接口mocking可以用GoMock，但是像gorm之类的ORM框架就很难用常规的mock方法，以为有其他很多额外的苦力活。sql-mock的介绍为Sql mock driver for golang to test database interactions. 可以帮助解决这个问题。\n下面用BDD框架Ginkgo写测试用例，展示一个如何使用Sqlmock去测试一个简单blog应用的例子，这个例子的后端为pg并且使用了gorm。\n源码\n定义GORM数据模型与Repository 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // modle.go import \u0026#34;github.com/lib/pq\u0026#34; ... type Blog struct { ID uint Title string Content string Tags pq.StringArray // string array for tags CreatedAt time.Time } // repository.go import \u0026#34;github.com/jinzhu/gorm\u0026#34; ... type Repository struct { db *gorm.DB } func (p *Repository) ListAll() ([]*Blog, error) { var l []*Blog err := p.db.Find(\u0026amp;l).Error return l, err } func (p *Repository) Load(id uint) (*Blog, error) { blog := \u0026amp;Blog{} err := p.db.Where(`id = ?`, id).First(blog).Error return blog, err } ... Repository结构非常简单，有着*gorm.DB字段，所有的DB操作依赖于此。这里为了简洁把一些多余的代码省略了。除了Load、ListAll当然还有类似Save、Delete、SearchByTitle等方法。\n单元测试 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import ( ... . \u0026#34;github.com/onsi/ginkgo\u0026#34; . \u0026#34;github.com/onsi/gomega\u0026#34; \u0026#34;github.com/DATA-DOG/go-sqlmock\u0026#34; \u0026#34;github.com/jinzhu/gorm\u0026#34; ) var _ = Describe(\u0026#34;Repository\u0026#34;, func() { var repository *Repository var mock sqlmock.Sqlmock BeforeEach(func() { var db *sql.DB var err error db, mock, err = sqlmock.New() // mock sql.DB Expect(err).ShouldNot(HaveOccurred()) gdb, err := gorm.Open(\u0026#34;postgres\u0026#34;, db) // open gorm db Expect(err).ShouldNot(HaveOccurred()) repository = \u0026amp;Repository{db: gdb} }) AfterEach(func() { err := mock.ExpectationsWereMet() // make sure all expectations were met Expect(err).ShouldNot(HaveOccurred()) }) It(\u0026#34;test something\u0026#34;, func(){ ... }) }) 如果读者对Ginkgo的测试语法表示不熟悉的，可以去参阅posts里的BDD相关章节。在这里，BeforeEach中做一些测试初始化，例如Repository的实例化等。在AfterEach中加入各种断言。\nBeforeEach中的初始化分为几个步骤：\n创建*sql.DB的mock实例，利用sqlmock.New()创建mock控制器。 gorm.Open(\u0026quot;postgres\u0026quot;, db)使用GORM。 创建Repository实例。 在AfterEach中，我们使用mock.ExpectationsWereMet()确保所有的期望都被满足。\n测试ListAll方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // repository.go ... func (p *Repository) ListAll() ([]*Blog, error) { var l []*Blog err := p.db.Find(\u0026amp;l).Error return l, err } ... // repository_test.go ... Context(\u0026#34;list all\u0026#34;, func() { It(\u0026#34;empty\u0026#34;, func() { const sqlSelectAll = `SELECT * FROM \u0026#34;blogs\u0026#34;` mock.ExpectQuery(sqlSelectAll). WillReturnRows(sqlmock.NewRows(nil)) l, err := repository.ListAll() Expect(err).ShouldNot(HaveOccurred()) Expect(l).Should(BeEmpty()) }) }) ... 上述snippet中，ListAll找到DB中的所有记录，并map到*Blog的切片中。测试语句非常直观，我们设置了该查询语句返回的是nil，也就是空集合。跑一下测试：\n➜ ginkgo Running Suite: Pg Suite ======================= Random Seed: 1585542357 Will run 8 of 8 specs (/Users/dche423/dbtest/pg/repository.go:24) [2020-03-30 12:26:01] Query: could not match actual sql: \u0026#34;SELECT * FROM \u0026#34;blogs\u0026#34;\u0026#34; with expected regexp \u0026#34;SELECT * FROM \u0026#34;blogs\u0026#34;\u0026#34; • Failure [0.001 seconds] Repository /Users/dche423/dbtest/pg/repository_test.go:16 list all /Users/dche423/dbtest/pg/repository_test.go:37 empty [It] /Users/dche423/dbtest/pg/repository_test.go:38 ... Test Suite Failed ➜ 测试失败了\u0026hellip;不过回显可以知道信息: could not match actual sql with expected regexp.。实际上Sqlmock使用sqlmock.QueryMatcherRegex为默认的SQL匹配器。在这个例子中，sqlmock.ExpectQuery输入一个正则表达式字符串而不是一个SQL的文本。所以我们有两种方式去解决这个问题:\n使用regexp.QuoteMeta， 也就是mock.ExpectQuery(regexp.QuoteMeta(sqlSelectAll)) 更改默认的SQL匹配器，当我们在创建mock实例的时候可以配置: sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual)) 其实一般来说，正则表达式匹配器能更灵活一些。\n测试Load方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 // repository.go func (p *Repository) Load(id uint) (*Blog, error) { blog := \u0026amp;Blog{} err := p.db.Where(`id = ?`, id).First(blog).Error return blog, err } ... // repository_test.go Context(\u0026#34;load\u0026#34;, func() { It(\u0026#34;found\u0026#34;, func() { blog := \u0026amp;Blog{ ID: 1, Title: \u0026#34;post\u0026#34;, ... } rows := sqlmock. NewRows([]string{\u0026#34;id\u0026#34;, \u0026#34;title\u0026#34;, \u0026#34;content\u0026#34;, \u0026#34;tags\u0026#34;, \u0026#34;created_at\u0026#34;}). AddRow(blog.ID, blog.Title, blog.Content, blog.Tags, blog.CreatedAt) const sqlSelectOne = `SELECT * FROM \u0026#34;blogs\u0026#34; WHERE (id = $1) ORDER BY \u0026#34;blogs\u0026#34;.\u0026#34;id\u0026#34; ASC LIMIT 1` mock.ExpectQuery(regexp.QuoteMeta(sqlSelectOne)).WithArgs(blog.ID).WillReturnRows(rows) dbBlog, err := repository.Load(blog.ID) Expect(err).ShouldNot(HaveOccurred()) Expect(dbBlog).Should(Equal(blog)) }) It(\u0026#34;not found\u0026#34;, func() { // ignore sql match mock.ExpectQuery(`.+`).WillReturnRows(sqlmock.NewRows(nil)) _, err := repository.Load(1) Expect(err).Should(Equal(gorm.ErrRecordNotFound)) }) }) ... Load方法输入一个blog id作为参数，找到这个id对应的第一条记录。\n我们测试两种场景:\n名为found的场景，我们创建blog实例并将其转换为sql.Row。随后调用ExpectQuery定义期望，在语句的最后，我们断言loaded blog实例和原来的一样。 注意：如果你不清楚GORM使用的是什么SQL，可以打开debug flag \u0026ndash; gorm.DB的Debug() 名为not found的场景，这里使用正则匹配来简化，表示不管什么sql都返回空。这里我们期望的是当找不到对应的blog时候，gorm.ErrRecordNotFound会被抛出。 测试Save方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // repository.go ... func (p *Repository) Save(blog *Blog) error { return p.db.Save(blog).Error } // repository_test.go ... Context(\u0026#34;save\u0026#34;, func() { var blog *Blog BeforeEach(func() { blog = \u0026amp;Blog{ Title: \u0026#34;post\u0026#34;, Content: \u0026#34;hello\u0026#34;, Tags: pq.StringArray{\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;}, CreatedAt: time.Now(), } }) It(\u0026#34;insert\u0026#34;, func() { // gorm use query instead of exec // https://github.com/DATA-DOG/go-sqlmock/issues/118 const sqlInsert = ` INSERT INTO \u0026#34;blogs\u0026#34; (\u0026#34;title\u0026#34;,\u0026#34;content\u0026#34;,\u0026#34;tags\u0026#34;,\u0026#34;created_at\u0026#34;) VALUES ($1,$2,$3,$4) RETURNING \u0026#34;blogs\u0026#34;.\u0026#34;id\u0026#34;` const newId = 1 mock.ExpectBegin() // begin transaction mock.ExpectQuery(regexp.QuoteMeta(sqlInsert)). WithArgs(blog.Title, blog.Content, blog.Tags, blog.CreatedAt). WillReturnRows(sqlmock.NewRows([]string{\u0026#34;id\u0026#34;}).AddRow(newId)) mock.ExpectCommit() // commit transaction Expect(blog.ID).Should(BeZero()) err := repository.Save(blog) Expect(err).ShouldNot(HaveOccurred()) Expect(blog.ID).Should(BeEquivalentTo(newId)) }) It(\u0026#34;update\u0026#34;, func() { ...\t}) }) 当data模型有已有的主键，Save方法能够更新DB记录；反之则插入一条新的记录。上面的snippet表现的插入的测试。\n创建一个新的blog实例，并且不给其设置主键。而后定义mock.ExpectQuery。在Query开始前begin一个事务，在之后commit。一般情况下，非查询语句(Insert/Update)应该被mock.ExepectExec定义，但是这个是个特殊场景。因为某些原因，对于pg的语法，GORM使用QueryRow而非Exec。\n最后，使用Expect(blog.ID).Should(BeEquivalentTo(newId)) 来断言blog.ID在Save方法调用之后被设置了。其实一般来说，不太需要去对简单的Insert/Update语句进行单元测试，但是这里只是对一些GORM会进行的一些特殊场景进行说明，像其他的后端场景不用太多关注。\n依赖注入 Test Driven Development TDD Reference\nchannel TDD 过程 目标 目标： 写一个 CheckWebsites 的函数检查 URL 列表的状态。\n1 2 3 4 5 6 7 8 9 10 11 12 13 package concurrency type WebsiteChecker func(string) bool func CheckWebsites(wc WebsiteChecker, urls []string) map[string]bool { results := make(map[string]bool) for _, url := range urls { results[url] = wc(url) } return results } 它返回一个 map，由每个 url 检查后的得到的布尔值组成，成功响应的值为 true，错误响应的值为 false。\n你还必须传入一个 WebsiteChecker 处理单个 URL 并返回一个布尔值。它会被函数调用以检查所有的网站。\n使用 依赖注入，允许在不发起真实 HTTP 请求的情况下测试函数，这使测试变得可靠和快速。\n下面是简单的测试：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 package concurrency import ( \u0026#34;reflect\u0026#34; \u0026#34;testing\u0026#34; ) func mockWebsiteChecker(url string) bool { if url == \u0026#34;waat://furhurterwe.geds\u0026#34; { return false } return true } func TestCheckWebsites(t *testing.T) { websites := []string{ \u0026#34;http://google.com\u0026#34;, \u0026#34;http://blog.gypsydave5.com\u0026#34;, \u0026#34;waat://furhurterwe.geds\u0026#34;, } actualResults := CheckWebsites(mockWebsiteChecker, websites) want := len(websites) got := len(actualResults) if want != got { t.Fatalf(\u0026#34;Wanted %v, got %v\u0026#34;, want, got) } expectedResults := map[string]bool{ \u0026#34;http://google.com\u0026#34;: true, \u0026#34;http://blog.gypsydave5.com\u0026#34;: true, \u0026#34;waat://furhurterwe.geds\u0026#34;: false, } if !reflect.DeepEqual(expectedResults, actualResults) { t.Fatalf(\u0026#34;Wanted %v, got %v\u0026#34;, expectedResults, actualResults) } } 该功能在生产环境中被用于检查数百个网站。但是它速度很慢，所以需要为程序提速。\n写一个测试 首先我们对 CheckWebsites 做一个基准测试，这样就能看到我们修改的影响。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package concurrency import ( \u0026#34;testing\u0026#34; \u0026#34;time\u0026#34; ) func slowStubWebsiteChecker(_ string) bool { time.Sleep(20 * time.Millisecond) return true } func BenchmarkCheckWebsites(b *testing.B) { urls := make([]string, 100) for i := 0; i \u0026lt; len(urls); i++ { urls[i] = \u0026#34;a url\u0026#34; } for i := 0; i \u0026lt; b.N; i++ { CheckWebsites(slowStubWebsiteChecker, urls) } } 基准测试使用一百个网址的 slice 对 CheckWebsites 进行测试，并使用 WebsiteChecker 的伪造实现。slowStubWebsiteChecker 故意放慢速度。它使用 time.Sleep 明确等待 20 毫秒，然后返回 true。\n当我们运行基准测试时使用 go test -bench=. 命令 (如果在 Windows Powershell 环境下使用 go test -bench=\u0026quot;.\u0026quot;)：\npkg: github.com/gypsydave5/learn-go-with-tests/concurrency/v0 BenchmarkCheckWebsites-4 1 2249228637 ns/op PASS ok github.com/gypsydave5/learn-go-with-tests/concurrency/v0 2.268s CheckWebsite 经过基准测试的时间为 2249228637 纳秒，大约 2.25 秒。\n让我们尝试去让它运行得更快。\n编写足够的代码让它通过 现在我们终于可以谈论并发了，以下内容是为了说明「不止一件事情正在进行中」。这是我们每天很自然在做的事情。\n比如，今天早上我泡了一杯茶。我放上水壶，然后在等待它煮沸时，从冰箱里取出了牛奶，把茶从柜子里拿出来，找到我最喜欢的杯子，把茶袋放进杯子里，然后等水壶沸了，把水倒进杯子里。\n我 没有 做的事情是放上水壶，然后呆呆地盯着水壶等水煮沸，然后在煮沸后再做其他事情。\n如果你能理解为什么第一种方式泡茶更快，那你就可以理解我们如何让 CheckWebsites 变得更快。与其等待网站响应之后再发送下一个网站的请求，不如告诉计算机在等待时就发起下一个请求。\n通常在 Go 中，当调用函数 doSomething() 时，我们等待它返回（即使它没有值返回，我们仍然等待它完成）。我们说这个操作是 阻塞 的 —— 它让我们等待它完成。Go 中不会阻塞的操作将在称为 goroutine 的单独 进程 中运行。将程序想象成从上到下读 Go 的 代码，当函数被调用执行读取操作时，进入每个函数「内部」。当一个单独的进程开始时，就像开启另一个 reader（阅读程序）在函数内部执行读取操作，原来的 reader 继续向下读取 Go 代码。\n要告诉 Go 开始一个新的 goroutine，我们把一个函数调用变成 go 声明，通过把关键字 go 放在它前面：go doSomething()。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package concurrency type WebsiteChecker func(string) bool func CheckWebsites(wc WebsiteChecker, urls []string) map[string]bool { results := make(map[string]bool) for _, url := range urls { go func() { results[url] = wc(url) }() } return results } 因为开启 goroutine 的唯一方法就是将 go 放在函数调用前面，所以当我们想要启动 goroutine 时，我们经常使用 匿名函数（anonymous functions）。一个匿名函数文字看起来和正常函数声明一样，但没有名字（意料之中）。你可以在 上面的 for 循环体中看到一个。\n匿名函数有许多有用的特性，其中两个上面正在使用。首先，它们可以在声明的同时执行 —— 这就是匿名函数末尾的 () 实现的。其次，它们维护对其所定义的词汇作用域的访问权 —— 在声明匿名函数时所有可用的变量也可在函数体内使用。\n上面匿名函数的主体和之前循环体中的完全一样。唯一的区别是循环的每次迭代都会启动一个新的 goroutine，与当前进程（WebsiteChecker 函数）同时发生，每个循环都会将结果添加到 results map 中。\n但是当我们执行 go test：\n-------- FAIL: TestCheckWebsites (0.00s) CheckWebsites_test.go:31: Wanted map[http://google.com:true http://blog.gypsydave5.com:true waat://furhurterwe.geds:false], got map[] FAIL exit status 1 FAIL github.com/gypsydave5/learn-go-with-tests/concurrency/v1 0.010s 不可预知的问题 你可能不会得到这个结果。你可能会得到一个 panic 信息，这个稍后再谈。如果你得到的是那些结果，不要担心，只要继续运行测试，直到你得到上述结果。或假装你得到了，这取决于你。欢迎来到并发编程的世界：如果处理不正确，很难预测会发生什么。别担心 —— 这就是我们编写测试的原因，当处理并发时，测试帮助我们预测可能发生的情况。\n让我们困惑的是，原来的测试 WebsiteChecker 现在返回空的 map。哪里出问题了？\n我们 for 循环开始的 goroutines 没有足够的时间将结果添加结果到 results map 中；WebsiteChecker 函数对于它们来说太快了，以至于它返回时仍为空的 map。\n为了解决这个问题，我们可以等待所有的 goroutine 完成他们的工作，然后返回。两秒钟应该能完成了，对吧？\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package concurrency import \u0026#34;time\u0026#34; type WebsiteChecker func(string) bool func CheckWebsites(wc WebsiteChecker, urls []string) map[string]bool { results := make(map[string]bool) for _, url := range urls { go func() { results[url] = wc(url) }() } time.Sleep(2 * time.Second) return results } 现在当我们运行测试时获得的结果（如果没有得到 —— 参考上面的做法）：\n-------- FAIL: TestCheckWebsites (0.00s) CheckWebsites_test.go:31: Wanted map[http://google.com:true http://blog.gypsydave5.com:true waat://furhurterwe.geds:false], got map[waat://furhurterwe.geds:false] FAIL exit status 1 FAIL github.com/gypsydave5/learn-go-with-tests/concurrency/v1 0.010s 这不是很好 - 为什么只有一个结果？我们可以尝试通过增加等待的时间来解决这个问题 —— 如果你愿意，可以试试。但没什么作用。这里的问题是变量 url 被重复用于 for 循环的每次迭代 —— 每次都会从 urls 获取新值。但是我们的每个 goroutine 都是 url 变量的引用 —— 它们没有自己的独立副本。所以他们 都 会写入在迭代结束时的 url —— 最后一个 url。这就是为什么我们得到的结果是最后一个 url \u0026mdash;- 注意：闭包情况下的引用关系一直是需要注意的\n解决这个问题:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import ( \u0026#34;time\u0026#34; ) type WebsiteChecker func(string) bool func CheckWebsites(wc WebsiteChecker, urls []string) map[string]bool { results := make(map[string]bool) for _, url := range urls { go func(u string) { results[u] = wc(u) }(url) } time.Sleep(2 * time.Second) return results } 通过给每个匿名函数一个参数 url(u)，然后用 url 作为参数调用匿名函数，我们确保 u 的值固定为循环迭代的 url 值，重新启动 goroutine。u 是 url 值的副本，因此无法更改。\n现在，如果你幸运的话，你会得到：\nPASS ok github.com/gypsydave5/learn-go-with-tests/concurrency/v1 2.012s 但是，如果你不走运（如果你运行基准测试，这很可能会发生，因为你将发起多次的尝试）。\nfatal error: concurrent map writes goroutine 8 [running]: runtime.throw(0x12c5895, 0x15) /usr/local/Cellar/go/1.9.3/libexec/src/runtime/panic.go:605 +0x95 fp=0xc420037700 sp=0xc4200376e0 pc=0x102d395 runtime.mapassign_faststr(0x1271d80, 0xc42007acf0, 0x12c6634, 0x17, 0x0) /usr/local/Cellar/go/1.9.3/libexec/src/runtime/hashmap_fast.go:783 +0x4f5 fp=0xc420037780 sp=0xc420037700 pc=0x100eb65 github.com/gypsydave5/learn-go-with-tests/concurrency/v3.WebsiteChecker.func1(0xc42007acf0, 0x12d3938, 0x12c6634, 0x17) /Users/gypsydave5/go/src/github.com/gypsydave5/learn-go-with-tests/concurrency/v3/websiteChecker.go:12 +0x71 fp=0xc4200377c0 sp=0xc420037780 pc=0x12308f1 runtime.goexit() /usr/local/Cellar/go/1.9.3/libexec/src/runtime/asm_amd64.s:2337 +0x1 fp=0xc4200377c8 sp=0xc4200377c0 pc=0x105cf01 created by github.com/gypsydave5/learn-go-with-tests/concurrency/v3.WebsiteChecker /Users/gypsydave5/go/src/github.com/gypsydave5/learn-go-with-tests/concurrency/v3/websiteChecker.go:11 +0xa1 ... many more scary lines of text ... 这看上去冗长、可怕，我们需要深呼吸并阅读错误：fatal error: concurrent map writes。有时候，当我们运行我们的测试时，两个 goroutines 完全同时写入 results map。Go 的 Maps 不喜欢多个事物试图一次性写入，所以就导致了 fatal error。\n这是一种 race condition（竞争条件），当软件的输出取决于事件发生的时间和顺序时，因为我们无法控制，bug 就会出现。因为我们无法准确控制每个 goroutine 写入结果 map 的时间，两个 goroutines 同一时间写入时程序将非常脆弱。\nGo 可以帮助我们通过其内置的 race detector 来发现竞争条件。要启用此功能，请使用 race 标志运行测试：go test -race。\n你应该得到一些如下所示的输出：\n================== WARNING: DATA RACE Write at 0x00c420084d20 by goroutine 8: runtime.mapassign_faststr() /usr/local/Cellar/go/1.9.3/libexec/src/runtime/hashmap_fast.go:774 +0x0 github.com/gypsydave5/learn-go-with-tests/concurrency/v3.WebsiteChecker.func1() /Users/gypsydave5/go/src/github.com/gypsydave5/learn-go-with-tests/concurrency/v3/websiteChecker.go:12 +0x82 Previous write at 0x00c420084d20 by goroutine 7: runtime.mapassign_faststr() /usr/local/Cellar/go/1.9.3/libexec/src/runtime/hashmap_fast.go:774 +0x0 github.com/gypsydave5/learn-go-with-tests/concurrency/v3.WebsiteChecker.func1() /Users/gypsydave5/go/src/github.com/gypsydave5/learn-go-with-tests/concurrency/v3/websiteChecker.go:12 +0x82 Goroutine 8 (running) created at: github.com/gypsydave5/learn-go-with-tests/concurrency/v3.WebsiteChecker() /Users/gypsydave5/go/src/github.com/gypsydave5/learn-go-with-tests/concurrency/v3/websiteChecker.go:11 +0xc4 github.com/gypsydave5/learn-go-with-tests/concurrency/v3.TestWebsiteChecker() /Users/gypsydave5/go/src/github.com/gypsydave5/learn-go-with-tests/concurrency/v3/websiteChecker_test.go:27 +0xad testing.tRunner() /usr/local/Cellar/go/1.9.3/libexec/src/testing/testing.go:746 +0x16c Goroutine 7 (finished) created at: github.com/gypsydave5/learn-go-with-tests/concurrency/v3.WebsiteChecker() /Users/gypsydave5/go/src/github.com/gypsydave5/learn-go-with-tests/concurrency/v3/websiteChecker.go:11 +0xc4 github.com/gypsydave5/learn-go-with-tests/concurrency/v3.TestWebsiteChecker() /Users/gypsydave5/go/src/github.com/gypsydave5/learn-go-with-tests/concurrency/v3/websiteChecker_test.go:27 +0xad testing.tRunner() /usr/local/Cellar/go/1.9.3/libexec/src/testing/testing.go:746 +0x16c ================== 细节还是难以阅读 - 但 WARNING: DATA RACE 相当明确。阅读错误的内容，我们可以看到两个不同的 goroutines 在 map 上执行写入操作：\nWrite at 0x00c420084d20 by goroutine 8: 正在写入相同的内存块\nPrevious write at 0x00c420084d20 by goroutine 7: 最重要的是，我们可以看到发生写入的代码行：\n/Users/gypsydave5/go/src/github.com/gypsydave5/learn-go-with-tests/concurrency/v3/websiteChecker.go:12 和 goroutines 7 和 8 开始的代码行号：\n/Users/gypsydave5/go/src/github.com/gypsydave5/learn-go-with-tests/concurrency/v3/websiteChecker.go:11 你需要知道的所有内容都会打印到你的终端上 - 你只需耐心阅读就可以了。\n使用channels处理race condition 我们可以通过使用 channels 协调我们的 goroutines 来解决这个数据竞争。channels 是一个 Go 数据结构，可以同时接收和发送值。这些操作以及细节允许不同进程之间的通信。\n在这种情况下，我们想要考虑父进程和每个 goroutine 之间的通信，goroutine 使用 url 来执行 WebsiteChecker 函数。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package concurrency type WebsiteChecker func(string) bool type result struct { string bool } func CheckWebsites(wc WebsiteChecker, urls []string) map[string]bool { results := make(map[string]bool) resultChannel := make(chan result) for _, url := range urls { go func(u string) { resultChannel \u0026lt;- result{u, wc(u)} }(url) } for i := 0; i \u0026lt; len(urls); i++ { result := \u0026lt;-resultChannel results[result.string] = result.bool } return results } 除了 results map 之外，我们现在还有一个 resultChannel 的变量，同样使用 make 方法创建。chan result 是 channel 类型的 —— result 的 channel。新类型的 result 是将 WebsiteChecker 的返回值与正在检查的 url 相关联 —— 它是一个 string 和 bool 的结构。因为我们不需要任何一个要命名的值，它们中的每一个在结构中都是匿名的；这在很难知道用什么命名值的时候可能很有用。\n现在，当我们迭代 urls 时，不是直接写入 map，而是使用 send statement 将每个调用 wc 的 result 结构体发送到 resultChannel。这使用 \u0026lt;- 操作符，channel 放在左边，值放在右边：\n1 2 // send statement resultChannel \u0026lt;- result{u, wc(u) 下一个 for 循环为每个 url 迭代一次。 我们在内部使用 receive expression，它将从通道接收到的值分配给变量。这也使用 \u0026lt;- 操作符，但现在两个操作数颠倒过来：现在 channel 在右边，我们指定的变量在左边：\n1 2 // receive expression result := \u0026lt;-resultChannel 然后我们使用接收到的 result 更新 map。\n通过将结果发送到通道，我们可以控制每次写入 results map 的时间，确保每次写入一个结果。虽然 wc 的每个调用都发送给结果通道，但是它们在其自己的进程内并行发生，因为我们将结果通道中的值与接收表达式一起逐个处理一个结果。\n我们已经将想要加快速度的那部分代码并行化，同时确保不能并发的部分仍然是线性处理。我们使用 channel 在多个进程间通信。\n当我们运行基准时：\npkg: github.com/gypsydave5/learn-go-with-tests/concurrency/v2 BenchmarkCheckWebsites-8 100 23406615 ns/op PASS ok github.com/gypsydave5/learn-go-with-tests/concurrency/v2 2.377s 23406615 纳秒 —— 0.023 秒，速度大约是最初函数的一百倍，这是非常成功的。\n总结 某种程度说，我们已经参与了 CheckWebsites 函数的一个长期重构；输入和输出从未改变，它只是变得更快了。但是我们所做的测试以及我们编写的基准测试允许我们重构 CheckWebsites，让我们有信心保证软件仍然可以工作，同时也证明它确实变得更快了。\n在使它更快的过程中，我们明白了\ngoroutines 是 Go 的基本并发单元，它让我们可以同时检查多个网站。 anonymous functions（匿名函数），我们用它来启动每个检查网站的并发进程。 channels，用来组织和控制不同进程之间的交流，使我们能够避免 race condition（竞争条件） 的问题。 the race detector（竞争探测器） 帮助我们调试并发代码的问题。 ","permalink":"http://localhost:64667/posts/programming/golang/go-testing/","summary":"\u003ch2 id=\"preface\"\u003ePreface\u003c/h2\u003e\n\u003cp\u003e本文整理golang编码的单元测试常用示例，以及TDD的简要流程。\u003c/p\u003e\n\u003ch2 id=\"单元测试基础\"\u003e单元测试基础\u003c/h2\u003e\n\u003cp\u003e单元测试文件以\u003ccode\u003e_test.go\u003c/code\u003e结尾，需要记住以下原则：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e文件名必须是\u003ccode\u003e_test.go\u003c/code\u003e结尾的，这样在执行\u003ccode\u003ego test\u003c/code\u003e的时候才会执行到相应的代码\u003c/li\u003e\n\u003cli\u003e你必须import \u003ccode\u003etesting\u003c/code\u003e这个包\u003c/li\u003e\n\u003cli\u003e所有的测试用例函数必须是\u003ccode\u003eTest\u003c/code\u003e开头\u003c/li\u003e\n\u003cli\u003e测试用例会按照源代码中写的顺序依次执行\u003c/li\u003e\n\u003cli\u003e测试函数\u003ccode\u003eTestXxx()\u003c/code\u003e的参数是\u003ccode\u003etesting.T\u003c/code\u003e，我们可以使用该类型来记录错误或者是测试状态\u003c/li\u003e\n\u003cli\u003e测试格式：\u003ccode\u003efunc TestXxx (t *testing.T)\u003c/code\u003e,\u003ccode\u003eXxx\u003c/code\u003e部分可以为任意的字母数字的组合，但是首字母不能是小写字母[a-z]，例如\u003ccode\u003eTestintdiv\u003c/code\u003e是错误的函数名。\u003c/li\u003e\n\u003cli\u003e函数中通过调用\u003ccode\u003etesting.T\u003c/code\u003e的\u003ccode\u003eError\u003c/code\u003e, \u003ccode\u003eErrorf\u003c/code\u003e, \u003ccode\u003eFailNow\u003c/code\u003e, \u003ccode\u003eFatal\u003c/code\u003e, \u003ccode\u003eFatalIf\u003c/code\u003e方法，说明测试不通过，调用\u003ccode\u003eLog\u003c/code\u003e方法用来记录测试的信息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"table-driven-testing\"\u003eTable-Driven-Testing\u003c/h3\u003e\n\u003cp\u003e测试讲究 case 覆盖，当我们要覆盖更多 case 时，显然通过修改代码的方式很笨拙。这时我们可以采用 Table-Driven 的方式写测试，标准库中有很多测试是使用这种方式写的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eTestFib\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003etesting\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003efibTests\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003ein\u003c/span\u003e       \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"c1\"\u003e// input\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003eexpected\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"c1\"\u003e// expected result\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ett\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003efibTests\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003eactual\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nf\"\u003eFib\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ett\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ein\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eactual\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nx\"\u003ett\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eexpected\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eErrorf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Fib(%d) = %d; expected %d\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ett\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ein\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eactual\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ett\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eexpected\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e由于我们使用的是 \u003ccode\u003et.Errorf\u003c/code\u003e，即使其中某个 case 失败，也不会终止测试执行。\u003c/p\u003e","title":"Golang TDD"},{"content":"性能提升不会凭空出现，它总是伴随着代码复杂度的上升。\nThe performance improvement does not materialize from the air, it comes with code complexity increase.\n\u0026ndash; Dmitry Vyukov\nGo 语言的调度器我认为应该是整个运行时最有趣的组件了。对于Go本身，它的设计和实现直接牵动了Go运行时的其他组件，也是和用户态代码直接打交道的部分；对于Go用户而言，调度器将其极为复杂的运行机制隐藏在了简单的关键字go下。为了保证高性能，调度器必须有效得利用计算的并行性和局部性原理；为了保证用户态的简洁，调度器必须高效得对调度用户态不可见的网络轮训器、垃圾回收器进行调度；为了保证代码执行的正确性，必须严格实现用户态代码的内存顺序等。总而言之，调度器的设计直接决定了Go运行时源码的表现形式。\n设计原理 数据结构: MPG 调度器启动 创建Goroutine 调度循环 触发调度 线程管理 总结 ","permalink":"http://localhost:64667/posts/programming/golang/schedualing/","summary":"\u003cp\u003e\u003cem\u003e性能提升不会凭空出现，它总是伴随着代码复杂度的上升。\u003c/em\u003e\u003cbr\u003e\n\u003cem\u003eThe performance improvement does not materialize from the air, it comes with code complexity increase.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u0026ndash; Dmitry Vyukov\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eGo 语言的调度器我认为应该是整个运行时最有趣的组件了。对于Go本身，它的设计和实现直接牵动了Go运行时的其他组件，也是和用户态代码直接打交道的部分；对于Go用户而言，调度器将其极为复杂的运行机制隐藏在了简单的关键字\u003ccode\u003ego\u003c/code\u003e下。为了保证高性能，调度器必须有效得利用计算的并行性和局部性原理；为了保证用户态的简洁，调度器必须高效得对调度用户态不可见的网络轮训器、垃圾回收器进行调度；为了保证代码执行的正确性，必须严格实现用户态代码的内存顺序等。总而言之，调度器的设计直接决定了Go运行时源码的表现形式。\u003c/p\u003e\n\u003ch2 id=\"设计原理\"\u003e设计原理\u003c/h2\u003e\n\u003ch2 id=\"数据结构-mpg\"\u003e数据结构: MPG\u003c/h2\u003e\n\u003ch2 id=\"调度器启动\"\u003e调度器启动\u003c/h2\u003e\n\u003ch2 id=\"创建goroutine\"\u003e创建Goroutine\u003c/h2\u003e\n\u003ch2 id=\"调度循环\"\u003e调度循环\u003c/h2\u003e\n\u003ch2 id=\"触发调度\"\u003e触发调度\u003c/h2\u003e\n\u003ch2 id=\"线程管理\"\u003e线程管理\u003c/h2\u003e\n\u003ch2 id=\"总结\"\u003e总结\u003c/h2\u003e","title":"Golang并发调度"},{"content":"python类关键字 __init__ vs __new__ __init__为初始化方法，__new__为真正的构造函数。\n描述符Descriptor __contains__ __slots__ 定制类 type() python作为动态语言，和静态语言最大的不同，即函数和类的定义，不是编译的时候创建的而是动态创建的。我们常见的对类的定义:\n1 2 3 class Hello(object): def hello(self, name=\u0026#39;world\u0026#39;): print(\u0026#39;Hello, %s.\u0026#39; % name) \u0026gt;\u0026gt;\u0026gt; from hello import Hello \u0026gt;\u0026gt;\u0026gt; h = Hello() \u0026gt;\u0026gt;\u0026gt; h.hello() Hello, world. \u0026gt;\u0026gt;\u0026gt; print(type(Hello)) \u0026lt;class \u0026#39;type\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; print(type(h)) \u0026lt;class \u0026#39;hello.Hello\u0026#39;\u0026gt; type()函数可以查看一类类型或者变量的类型，Hello是一个class， 它的类型是个type，而h是一个instance, 它的类型就是class Hello。\n同时有一个概念，就是type()不仅可以返回对象的类型，还可以创建出新的类型。我们可以不用定义class Hello() ...而动态创建出Hello类。\n\u0026gt;\u0026gt;\u0026gt; def fn(self, name=\u0026#39;world\u0026#39;): # 先定义函数 ... print(\u0026#39;Hello, %s.\u0026#39; % name) ... \u0026gt;\u0026gt;\u0026gt; Hello = type(\u0026#39;Hello\u0026#39;, (object,), dict(hello=fn)) # 创建Hello class \u0026gt;\u0026gt;\u0026gt; h = Hello() \u0026gt;\u0026gt;\u0026gt; h.hello() Hello, world. \u0026gt;\u0026gt;\u0026gt; print(type(Hello)) \u0026lt;class \u0026#39;type\u0026#39;\u0026gt; \u0026gt;\u0026gt;\u0026gt; print(type(h)) \u0026lt;class \u0026#39;__main__.Hello\u0026#39;\u0026gt; 创建一个class对象，type()函数传入3个参数：\nclass名称 继承的父类集合，python支持多重继承，只有一个父类的话需要加上tuple的单元素写法 class的方法名称与参数绑定，上面的例子里就把函数fn绑定到方法名hello上 通过type()函数创建的类和直接写class是一样的，python解释器遇到class定义时，也仅仅是扫描class定义的语法，然后调用type()函数创建出class。\nMetaClass 除了使用type()进行动态类创建，如果要控制类的创建行为，还可以使用metaclass。对其简单的解释就是：当我们定义了class以后，就可以根据这个class创建出实例，也就是先定义class，再创建实例；但是，如果我们希望创建class该怎么办？这里就必须用到metaclass创建class，所以先定义metaclass，然后创建class。\n因此，metaclass允许创建类或者修改类，也就是我们可以把类看成metaclass创建出来的“实例”。metaclass在python中相对比较难理解，而且很多场景不需要用，毕竟它能够改变类创建时的行为(behaviour)，不熟容易导致一些问题。\n下面是一个简单的为自定义的MyList类增加一个add方法的例子：\n先定义ListMetaClass, 一般来说metaclass的类以Metaclass结尾。\n1 2 3 4 5 # metaclass是类的模板，所以必须从`type`类型派生： class ListMetaclass(type): def __new__(cls, name, bases, attrs): attrs[\u0026#39;add\u0026#39;] = lambda self, value: self.append(value) return type.__new__(cls, name, bases, attrs) 有了这个定义，在定义MyList的时候传入关键字metaclass即可：\n1 2 class MyList(list, metaclass=ListMetaclass): pass 使用关键字后，python解释器在创建MyList的时候，要通过ListMetaclass.__new__()来创建。\n__new__()方法接受到的参数为：\n当前准备创建的类的对象 类的名字 类继承的父类集合 类的方法集合 测试一下是否正确加上方法：\n1 2 3 4 \u0026gt;\u0026gt;\u0026gt; L = MyList() \u0026gt;\u0026gt;\u0026gt; L.add(1) \u0026gt;\u0026gt; L [1] 而普通的liat是没有add方法的。那么动态修改的意义何在？直接在MyList里新增add方法不是更简单？正常情况下的确不需要用metaclass，不过还是有一些场景需要用到，比如ORM(Object Relational Mapping) \u0026mdash; 把关系型数据库的一行映射成一个对象，即一个类对应一个表，这样写代码更简单而不需要SQL语句。如果要编写这样一个ORM框架，所有的类都只能动态定义了，因为只有使用者才能根据表的结构定义对应的类。\n下面写一个简单的ORM框架，比如使用者想定义一个User类来操作对应的数据库表user，我们期待使用者写出如下的代码:\n1 2 3 4 5 6 7 8 9 10 11 class User(Model): # 定义类的属性到列的映射： id = IntegerField(\u0026#39;id\u0026#39;) name = StringField(\u0026#39;username\u0026#39;) email = StringField(\u0026#39;email\u0026#39;) password = StringField(\u0026#39;password\u0026#39;) # 创建一个实例： u = User(id=12345, name=\u0026#39;Michael\u0026#39;, email=\u0026#39;test@orm.org\u0026#39;, password=\u0026#39;my-pwd\u0026#39;) # 保存到数据库： u.save() 其中父类Model和属性类型StringField，IntegerField由ORM框架提供，剩下的save()全部由metaclass自动完成。\n先定定义Field类，用于负责保存数据库表的字段名和字段类型：\n1 2 3 4 5 6 7 8 class Field(object): def __init__(self, name, column_type): self.name = name self.column_type = column_type def __str__(self): return \u0026#39;\u0026lt;%s:%s\u0026gt;\u0026#39; % (self.__class__.__name__, self.name) 基于此类，定义其他Field子类：\n1 2 3 4 5 6 7 8 9 class StringField(Field): def __init__(self, name): super(StringField, self).__init__(name, \u0026#39;varchar(100)\u0026#39;) class IntegerField(Field): def __init__(self, name): super(IntegerField, self).__init__(name, \u0026#39;bigint\u0026#39;) 编写Model和ModelMetaclass：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class ModelMetaclass(type): def __new__(cls, name, bases, attrs): if name==\u0026#39;Model\u0026#39;: return type.__new__(cls, name, bases, attrs) print(\u0026#39;Found model: %s\u0026#39; % name) mappings = dict() for k, v in attrs.items(): if isinstance(v, Field): print(\u0026#39;Found mapping: %s ==\u0026gt; %s\u0026#39; % (k, v)) mappings[k] = v for k in mappings.keys(): attrs.pop(k) attrs[\u0026#39;__mappings__\u0026#39;] = mappings # 保存属性和列的映射关系 attrs[\u0026#39;__table__\u0026#39;] = name # 假设表名和类名一致 return type.__new__(cls, name, bases, attrs) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Model(dict, metaclass=ModelMetaclass): def __init__(self, **kw): super(Model, self).__init__(**kw) def __getattr__(self, key): try: return self[key] except KeyError: raise AttributeError(r\u0026#34;\u0026#39;Model\u0026#39; object has no attribute \u0026#39;%s\u0026#39;\u0026#34; % key) def __setattr__(self, key, value): self[key] = value def save(self): fields = [] params = [] args = [] for k, v in self.__mappings__.items(): fields.append(v.name) params.append(\u0026#39;?\u0026#39;) args.append(getattr(self, k, None)) sql = \u0026#39;insert into %s (%s) values (%s)\u0026#39; % (self.__table__, \u0026#39;,\u0026#39;.join(fields), \u0026#39;,\u0026#39;.join(params)) print(\u0026#39;SQL: %s\u0026#39; % sql) print(\u0026#39;ARGS: %s\u0026#39; % str(args)) 注意: 当用户定义一个class User(Model)的时候，python解释器首先在当前类User定义中查找metaclass，如果没找到，继续在父类Model中找，找到了就使用Model中定义的metaclass的ModelMetaclass来创建User类，所以metaclass可以隐式得继承到子类\nModelMetaclass中的逻辑：\n排除掉对Model类的修改 在当前类（如User）中查找定义的类的所有属性，如果找到一个Field类，则将其保存到一个__mapping__的dict中，同时从类属性中删除该Field属性，防止runtime错误。（实例同名属性对类同名属性的覆盖） 把表名保存到__table__中 Model类中，就可以定义各种操作数据库的方法，比如save, delete, update等等。\n用上述的模块，可以编写出如：\n1 2 u = User(id=12345, name=\u0026#39;Michael\u0026#39;, email=\u0026#39;test@orm.org\u0026#39;, password=\u0026#39;my-pwd\u0026#39;) u.save() 获得的结果:\n1 2 3 4 5 6 7 Found model: User Found mapping: email ==\u0026gt; \u0026lt;StringField:email\u0026gt; Found mapping: password ==\u0026gt; \u0026lt;StringField:password\u0026gt; Found mapping: id ==\u0026gt; \u0026lt;IntegerField:uid\u0026gt; Found mapping: name ==\u0026gt; \u0026lt;StringField:username\u0026gt; SQL: insert into User (password,email,username,id) values (?,?,?,?) ARGS: [\u0026#39;my-pwd\u0026#39;, \u0026#39;test@orm.org\u0026#39;, \u0026#39;Michael\u0026#39;, 12345] 这里只是简单打出参数列表，对backend连接没有进行真正的处理。\n","permalink":"http://localhost:64667/posts/programming/python/python-functionality/","summary":"\u003ch2 id=\"python类关键字\"\u003epython类关键字\u003c/h2\u003e\n\u003ch3 id=\"__init__-vs-__new__\"\u003e\u003ccode\u003e__init__\u003c/code\u003e vs \u003ccode\u003e__new__\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e__init__\u003c/code\u003e为初始化方法，\u003ccode\u003e__new__\u003c/code\u003e为真正的构造函数。\u003c/p\u003e\n\u003ch3 id=\"描述符descriptor\"\u003e描述符Descriptor\u003c/h3\u003e\n\u003ch3 id=\"__contains__\"\u003e\u003ccode\u003e__contains__\u003c/code\u003e\u003c/h3\u003e\n\u003ch3 id=\"__slots__\"\u003e\u003ccode\u003e__slots__\u003c/code\u003e\u003c/h3\u003e\n\u003ch3 id=\"定制类\"\u003e定制类\u003c/h3\u003e\n\u003ch3 id=\"type\"\u003etype()\u003c/h3\u003e\n\u003cp\u003epython作为动态语言，和静态语言最大的不同，即函数和类的定义，不是编译的时候创建的而是动态创建的。我们常见的对类的定义:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eHello\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eobject\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003ehello\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;world\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Hello, \u003c/span\u003e\u003cspan class=\"si\"\u003e%s\u003c/span\u003e\u003cspan class=\"s1\"\u003e.\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u0026gt;\u0026gt;\u0026gt; from hello import Hello\n\u0026gt;\u0026gt;\u0026gt; h = Hello()\n\u0026gt;\u0026gt;\u0026gt; h.hello()\nHello, world.\n\u0026gt;\u0026gt;\u0026gt; print(type(Hello))\n\u0026lt;class \u0026#39;type\u0026#39;\u0026gt;\n\u0026gt;\u0026gt;\u0026gt; print(type(h))\n\u0026lt;class \u0026#39;hello.Hello\u0026#39;\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003etype()函数可以查看一类类型或者变量的类型，\u003ccode\u003eHello\u003c/code\u003e是一个class， 它的类型是个\u003ccode\u003etype\u003c/code\u003e，而\u003ccode\u003eh\u003c/code\u003e是一个instance, 它的类型就是class \u003ccode\u003eHello\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e同时有一个概念，就是type()不仅可以返回对象的类型，还可以创建出新的类型。我们可以不用定义\u003ccode\u003eclass Hello() ...\u003c/code\u003e而动态创建出Hello类。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u0026gt;\u0026gt;\u0026gt; def fn(self, name=\u0026#39;world\u0026#39;): # 先定义函数\n...     print(\u0026#39;Hello, %s.\u0026#39; % name)\n...\n\u0026gt;\u0026gt;\u0026gt; Hello = type(\u0026#39;Hello\u0026#39;, (object,), dict(hello=fn)) # 创建Hello class\n\u0026gt;\u0026gt;\u0026gt; h = Hello()\n\u0026gt;\u0026gt;\u0026gt; h.hello()\nHello, world.\n\u0026gt;\u0026gt;\u0026gt; print(type(Hello))\n\u0026lt;class \u0026#39;type\u0026#39;\u0026gt;\n\u0026gt;\u0026gt;\u0026gt; print(type(h))\n\u0026lt;class \u0026#39;__main__.Hello\u0026#39;\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e创建一个class对象，\u003ccode\u003etype()\u003c/code\u003e函数传入3个参数：\u003c/p\u003e","title":"Python类自定义"},{"content":"Preface BDD和TDD都是test case first的实现，无非是把后者的test改成前者的behavior。在TDD中，关注的核心点是function，即认为程序最基本单元是function，其test case可以认为是unit test，TDD和unit test的区别是TDD强调测试和开发结合而成的工作流: 写test case -\u0026gt; 写代码 -\u0026gt; 通过测试，继续写更多测试，写一次循环。\n而BDD比TDD更关注高层的行为，而不是函数级别的行为，也就是在BDD中，不会强调函数的功能正确，这是unit test应该做的事。BDD更关注user story，即用户在特定场景，与软件交互发生的行为，这个behavior指的就是高层模块的行为。\n如何区分BDD和TDD，简单理解，TDD是给programmer的，用来验证开发者的最基本模块的功能：在什么输入，应该产生什么输出，保证实现的边界，健全性。而BDD，其test case描述的是更高级的模块行为，脱离了具体的实现，容易用自然语言去描述，也就是BDD是给product manager的，告诉其系统的行为。\nBDD in golang ​\t实现的时候，我们需要把Given-When-Then这种story格式组织test case翻译为测试代码，通过一系列的assertion来检查实现是否符合test case的预期，我们完全可以直接通过golang自带的testing模块来实现，不过testing的功能有时候比较简陋，本文记录了用Ginkgo+Gomega来组织test case，让我们的测试语言更加接近自然语言。\n二者结合的目的是，ginkgo实现了test case的组织，并加入了其他方便的功能: 初始化，后续处理，异步等等。而gomega设计的目的是与ginkgo一起工作，实现易读的assertion(ginkgo中称为match)功能。\nGomega is ginkgo\u0026#39;s preferred matcher library 初始化 ginkgo依托golang原生testing框架，即可以用go test ./.. 执行，也可以通过ginkgo binrary安装go install github.com/onsi/ginkgo，封装了ginkgo测试框架的各种feature。\n初始化首先进入待测试的package:\ncd /path/to/package 执行初始化:\nginkgo bootstrap 生成以suite_test.go文件，接下来向suite添加测试specs，生成比如ginkgo_cart package测试文件。\nginkgo generate ginkgo_cart 运行 生成ginkgo_cart_test.go，注意测试文件在ginkgo_cart_testpackage， 需要import package ginkgo_cart，即BDD层级高于unit test, 不应该了解package内部的具体实现，测试package的外部接口即可。编写测试代码，运行go test ./..即可。\nGinkgo Keyword Ginkgo测试代码骨架由一系列keyword关联的闭包组成，常用的有：\nDescribe/Context/When: 测试逻辑块 BeforeEach/AfterEach/JustBeforeEach/JustAfterEach: 初始化测试用例块 It: 单一Spec，测试case keyword的声明均为传入Body参数，比如Describe:\n1 Describe(text string, body func()) bool 一个样例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 var _ = Describe(\u0026#34;Nest Test Demo\u0026#34;, func() { Context(\u0026#34;MyTest level1\u0026#34;, func() { BeforeEach(func() { fmt.Println(\u0026#34;beforeEach level 1\u0026#34;) }) It(\u0026#34;spec 3-1 in level1\u0026#34;, func(){ fmt.Println(\u0026#34;sepc on level 1\u0026#34;) }) Context(\u0026#34;MyTest level2\u0026#34;, func() { BeforeEach(func() { fmt.Println(\u0026#34;beforeEach level 2\u0026#34;) }) Context(\u0026#34;MyTest level3\u0026#34;, func() { BeforeEach(func() { fmt.Println(\u0026#34;beforeEach level 3\u0026#34;) }) It(\u0026#34;spec 3-1 in level3\u0026#34;, func() { fmt.Println(\u0026#34;A simple spec in level 3\u0026#34;) }) It(\u0026#34;3-2 in level3\u0026#34;, func() { fmt.Println(\u0026#34;A simple spec in level 3\u0026#34;) }) }) }) }) }) Describe, Context, When 这三种都称为Container，对于ginkgo属于同一类，只是名称不同\n一般Describe用于最顶层：描述完整的测试场景，包含Context/When，而Context/When本身可以嵌套包含下级的Context/When。\n三者组织成Tree结构：Describe是root, Context和When是普通的TreeNode。\n三者包含的节点，除了自身，还包括其他keyword节点：BeforeEach, JustBeforeEach, It。\n测试代码逻辑应该包含在BeforeEach, It等类别中，而不应该在container类别中体现。\nIt Ginkgo执行以It为基本单元，以定义的顺序执行，It一般包含Assertion逻辑: Expect(\u0026hellip;)，即最终的测试结果和预期的比较，测试执行逻辑实现于BeforeEach, JustBeforeEach中\nBeforeEach, JustBeforeEach BeforeEach声明于Container节点内部，container node每个child执行前都会执行BeforeEach，一般用来Setup test env：声明测试用例变量，初始化。\nJustBeforeEach类似，区别是永远执行于BeforeEach之后：等从root到lt node所有BeforeEach执行完: 才再从root到lt node执行所有JustBeforeEach；一般实现测试执行逻辑：如request http，以便It node与expect比较。\nDemo code 示意 示例中各种节点的内部组成为如下tree：\n运行示例可以得到:\nbeforeEach level 1 sepc 1-1 on level 1 •beforeEach level 1 beforeEach level 2 beforeEach level 3 Spec 3-1 in level 3 •beforeEach level 1 beforeEach level 2 beforeEach level 3 Spec 3-2 in level 3 我么可以得到一些结论:\n执行是以It node定义顺序执行 每个It执行前，走了从root到It的path，顺序执行各context node的BeforeEach函数 It 与 Matcher 购物车demo中，其中一个lt:\n1 Expect(cart.TotalItems()).To(Equal(3)) 这种自然语言风格的assertion是由Ginkgo配套的Gomega实现的: expect返回封装了测试输出值的Assertion:\n1 func Expect(actual interface{}, extra ...interface{}) Assertion Assertion是interface, 简化版本(为语义通顺，还包含几个类似function):\n1 2 3 4 type Assertion interface { To(matcher types.GomegaMatcher, optionalDescription ...interface{}) bool ToNot(matcher types.GomegaMatcher, optionalDescription ...interface{}) bool } To接收GomegaMatcher, 其封装了Expect value: Equal调用了Ginkgo的EqualMatcher.\n1 2 3 4 5 func Equal(expected interface{}) types.GomegaMatcher { return \u0026amp;matchers.EqualMatcher{ Expected: expected, } } 加上Assertion封装了实际value, 两者的比较可得出结论.而ToNot是To的相反情况.\n如果想比较自定义的复杂类型: 可实现GomegaMatcher:\n1 2 3 加上Assertion封装了实际value, 两者的比较可得出结论.而ToNot是To的相反情况. 如果想比较自定义的复杂类型: 可实现GomegaMatcher: 其他features Focus:\n仅执行特定Node及之下的It: 在keyword之前加F: FContext, FIt, 但会使go testfail(返回 1), CI集成Ginkgo需注意.\nPending\n与Focus相反: 不执行特定Node及之下的It. 在keyword之前加X.但默认不会使go test fail(若想让其fail, 加 —failOnPending)\nSkip:\n根据代码runtime结果决定是否跳过某It(Pending是编译时):\n1 2 3 4 5 6 It(\u0026#34;spec 1-1 in level1\u0026#34;, func(){ if somecondition { Skip(\u0026#34;special condition wasn\u0026#39;t met\u0026#34;) } fmt.Println(\u0026#34;sepc 1-1 on level 1\u0026#34;) }) Skip仅能置于It之下，否则会Panic.\nEventually\n测试异步逻辑: 如发送请求到队列, 需持续polling. 在Gomega实现:\n1 2 3 Eventually(func() []int { return thing.SliceImMonitoring }, TIMEOUT, POLLING_INTERVAL).Should(HaveLen(2)) TIMTOUT为总超时时间, 默认１s;POLLING_INTERVAL为每次polling间隔, 默认10ms.\nGinkgo还支持benchmark及run in parallel, 可参考Ginkgo doc\n","permalink":"http://localhost:64667/posts/programming/golang/bdd-testing-framework/","summary":"\u003ch2 id=\"preface\"\u003ePreface\u003c/h2\u003e\n\u003cp\u003eBDD和TDD都是test case first的实现，无非是把后者的test改成前者的behavior。在TDD中，关注的核心点是function，即认为程序最基本单元是function，其test case可以认为是unit test，TDD和unit test的区别是TDD强调测试和开发结合而成的工作流: 写test case -\u0026gt; 写代码 -\u0026gt; 通过测试，继续写更多测试，写一次循环。\u003c/p\u003e\n\u003cp\u003e而BDD比TDD更关注高层的行为，而不是函数级别的行为，也就是在BDD中，不会强调函数的功能正确，这是unit test应该做的事。BDD更关注user story，即用户在特定场景，与软件交互发生的行为，这个behavior指的就是高层模块的行为。\u003c/p\u003e\n\u003cp\u003e如何区分BDD和TDD，简单理解，TDD是给programmer的，用来验证开发者的最基本模块的功能：在什么输入，应该产生什么输出，保证实现的边界，健全性。而BDD，其test case描述的是更高级的模块行为，脱离了具体的实现，容易用自然语言去描述，也就是BDD是给product manager的，告诉其系统的行为。\u003c/p\u003e\n\u003ch2 id=\"bdd-in-golang\"\u003eBDD in golang\u003c/h2\u003e\n\u003cp\u003e​\t实现的时候，我们需要把Given-When-Then这种story格式组织test case翻译为测试代码，通过一系列的assertion来检查实现是否符合test case的预期，我们完全可以直接通过golang自带的testing模块来实现，不过testing的功能有时候比较简陋，本文记录了用Ginkgo+Gomega来组织test case，让我们的测试语言更加接近自然语言。\u003c/p\u003e\n\u003cp\u003e二者结合的目的是，ginkgo实现了test case的组织，并加入了其他方便的功能: 初始化，后续处理，异步等等。而gomega设计的目的是与ginkgo一起工作，实现易读的assertion(ginkgo中称为match)功能。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eGomega is ginkgo\u0026#39;s preferred matcher library\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"初始化\"\u003e初始化\u003c/h2\u003e\n\u003cp\u003eginkgo依托golang原生testing框架，即可以用\u003ccode\u003ego test ./..\u003c/code\u003e 执行，也可以通过ginkgo binrary安装\u003ccode\u003ego install github.com/onsi/ginkgo\u003c/code\u003e，封装了ginkgo测试框架的各种feature。\u003c/p\u003e\n\u003cp\u003e初始化首先进入待测试的package:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecd /path/to/package\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e执行初始化:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eginkgo bootstrap\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e生成以suite_test.go文件，接下来向suite添加测试specs，生成比如ginkgo_cart package测试文件。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eginkgo generate ginkgo_cart\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"运行\"\u003e运行\u003c/h2\u003e\n\u003cp\u003e生成\u003ccode\u003eginkgo_cart_test.go\u003c/code\u003e，注意测试文件在\u003ccode\u003eginkgo_cart_test\u003c/code\u003epackage， 需要import package \u003ccode\u003eginkgo_cart\u003c/code\u003e，即BDD层级高于unit test, 不应该了解package内部的具体实现，测试package的外部接口即可。编写测试代码，运行\u003ccode\u003ego test ./..\u003c/code\u003e即可。\u003c/p\u003e\n\u003ch2 id=\"ginkgo-keyword\"\u003eGinkgo Keyword\u003c/h2\u003e\n\u003cp\u003eGinkgo测试代码骨架由一系列keyword关联的闭包组成，常用的有：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eDescribe/Context/When: 测试逻辑块\u003c/li\u003e\n\u003cli\u003eBeforeEach/AfterEach/JustBeforeEach/JustAfterEach: 初始化测试用例块\u003c/li\u003e\n\u003cli\u003eIt: 单一Spec，测试case\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003ekeyword的声明均为传入Body参数，比如Describe:\u003c/p\u003e","title":"BDD: Ginkgo测试框架"},{"content":"设计原则 现在我们来看 Go 中另一重要的关键组件：内存分配器。\nGo 的内存分配器基于 Thread-Cache Malloc (tcmalloc) ，tcmalloc 为每个线程实现了一个本地缓存， 区分了小对象（小于 32kb）和大对象分配两种分配类型，其管理的内存单元称为 span。\n我们不再介绍更多 tcmalloc 的具体细节，因为 Go 的内存分配器与 tcmalloc 存在一定差异。 这个差异来源于 Go 语言被设计为没有显式的内存分配与释放， 完全依靠编译器与运行时的配合来自动处理，因此也就造就了内存分配器、垃圾回收器两大组件。\n我们知道，在计算机领域中，无外乎时间换空间、空间换时间。统一管理内存会提前分配或一次性释放一大块内存， 进而减少与操作系统沟通造成的开销，进而提高程序的运行性能。 支持内存管理另一个优势就是能够更好的支持垃圾回收，这一点我们留到垃圾回收器的章节中进行讨论。\n主要结构 Go 的内存分配器主要包含以下几个核心组件：\nheapArena: 保留整个虚拟地址空间 mheap：分配的堆，在页大小为 8KB 的粒度上进行管理 mspan：是 mheap 上管理的一连串的页 mcentral：收集了给定大小等级的所有 span mcache：为 per-P 的缓存。 其中页是向操作系统申请内存的最小单位，目前设计为 8KB。\n每一个结构虽然不都像是调度器 M/P/G 结构那样的大部头，但初次阅读这些结构时想要理清他们之间的关系还是比较麻烦的。 传统意义上的栈被 Go 的运行时霸占，不开放给用户态代码；而传统意义上的堆内存，又被 Go 运行时划分为了两个部分， 一个是 Go 运行时自身所需的堆内存，即堆外内存；另一部分则用于 Go 用户态代码所使用的堆内存，也叫做 Go 堆。 Go 堆负责了用户态对象的存放以及 goroutine 的执行栈。\nArena heapArena Go 堆被视为由多个 arena 组成，每个 arena 在 64 位机器上为 64MB，且起始地址与 arena 的大小对齐， 所有的 arena 覆盖了整个 Go 堆的地址空间。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const ( pageSize = 8192 // 8KB heapArenaBytes = 67108864 // 64MB heapArenaBitmapBytes = heapArenaBytes / 32 // 2097152 pagesPerArena = heapArenaBytes / pageSize // 8192 ) //go:notinheap type heapArena struct { bitmap [heapArenaBitmapBytes]byte spans [pagesPerArena]*mspan pageInUse [pagesPerArena / 8]uint8 pageMarks [pagesPerArena / 8]uint8 zeroedBase uintptr } arenaHint 结构比较简单，是 arenaHint 链表的节点结构，保存了 arena 的起始地址、是否为最后一个 arena，以及下一个 arenaHint 指针。\n1 2 3 4 5 6 //go:notinheap type arenaHint struct { addr uintptr down bool next *arenaHint } mspan 然而管理 arena 如此粒度的内存并不符合实践，相反，所有的堆对象都通过 span 按照预先设定好的 大小等级分别分配，小于 32KB 的小对象则分配在固定大小等级的 span 上，否则直接从 mheap 上进行分配。\nmspan 是相同大小等级的 span 的双向链表的一个节点，每个节点还记录了自己的起始地址、 指向的 span 中页的数量。它要么位于\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 //go:notinheap type mspan struct { // 双向链表 next *mspan // 链表中的下一个 span，如果为空则为 nil prev *mspan // 链表中的前一个 span，如果为空则为 nil ... startAddr uintptr // span 的第一个字节的地址，即 s.base() npages uintptr // 一个 span 中的 page 数量 manualFreeList gclinkptr // mSpanManual span 的释放对象链表 ... freeindex uintptr nelems uintptr // span 中对象的数量 allocCache uint64 allocBits *gcBits ... allocCount uint16 // 分配对象的数量 spanclass spanClass // 大小等级与 noscan (uint8) incache bool // 是否被 mcache 使用 state mSpanState // mspaninuse 等等信息 ... } mcache 是一个 per-P 的缓存，它是一个包含不同大小等级的 span 链表的数组，其中 mcache.alloc 的每一个数组元素 都是某一个特定大小的 mspan 的链表头指针。\n1 2 3 4 5 6 7 8 9 10 //go:notinheap type mcache struct { ... tiny uintptr tinyoffset uintptr local_tinyallocs uintptr alloc [numSpanClasses]*mspan // 用来分配的 spans，由 spanClass 索引 stackcache [_NumStackOrders]stackfreelist ... } 当 mcache 中 span 的数量不够使用时，会向 mcentral 的 nonempty 列表中获得新的 span。\nmcentral mcentral\n1 2 3 4 5 6 7 8 //go:notinheap type mcentral struct { lock mutex spanclass spanClass nonempty mSpanList // 带有自由对象的 span 列表，即非空闲列表 empty mSpanList // 没有自由对象的 span 列表（或缓存在 mcache 中） ... } 当 mcentral 中 nonempty 列表中也没有可分配的 span 时，则会向 mheap 提出请求，从而获得 新的 span，并进而交给 mcache。\nmheap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 //go:notinheap type mheap struct { lock mutex pages pageAlloc ... allspans []*mspan // 所有 spans 从这里分配出去 scavengeGoal uint64 reclaimIndex uint64 reclaimCredit uintptr arenas [1 \u0026lt;\u0026lt; arenaL1Bits]*[1 \u0026lt;\u0026lt; arenaL2Bits]*heapArena heapArenaAlloc linearAlloc arenaHints *arenaHint arena linearAlloc allArenas []arenaIdx curArena struct { base, end uintptr } central [numSpanClasses]struct { mcentral mcentral pad [cpu.CacheLinePadSize - unsafe.Sizeof(mcentral{})%cpu.CacheLinePadSize]byte } ... // 各种分配器 spanalloc fixalloc // span* 分配器 cachealloc fixalloc // mcache* 分配器 treapalloc fixalloc // treapNodes* 分配器，用于大对象 specialfinalizeralloc fixalloc // specialfinalizer* 分配器 specialprofilealloc fixalloc // specialprofile* 分配器 speciallock mutex // 特殊记录分配器的锁 arenaHintAlloc fixalloc // arenaHints 分配器 ... } 分配概览 在分析具体的分配过程之前，我们需要搞清楚究竟什么时候会发生分配。\nGo 程序的执行是基于 goroutine 的，goroutine 和传统意义上的程序一样，也有栈和堆的概念。只不过 Go 的运行时帮我们屏蔽掉了这两个概念，只在运行时内部区分并分别对应：goroutine 执行栈以及 Go 堆。\ngoroutine 的执行栈与传统意义上的栈一样，当函数返回时，在栈上就会被回收，栈中的对象都会被回收，从而 无需 GC 的标记；而堆则麻烦一些，由于 Go 支持垃圾回收，只要对象生存在堆上，Go 的运行时 GC 就会在 后台将对应的内存进行标记从而能够在垃圾回收的时候将对应的内存回收，进而增加了开销。\n下面这个程序给出了四种情况：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 package main type smallobj struct { arr [1 \u0026lt;\u0026lt; 10]byte } type largeobj struct { arr [1 \u0026lt;\u0026lt; 26]byte } func f1() int { x := 1 return x } func f2() *int { y := 2 return \u0026amp;y } func f3() { large := largeobj{} println(\u0026amp;large) } func f4() { small := smallobj{} print(\u0026amp;small) } func main() { x := f1() y := f2() f3() f4() println(x, y) } 我们使用 -gcflags \u0026quot;-N -l -m\u0026quot; 编译这段代码能够禁用编译器与内联优化并进行逃逸分析：\n1 2 3 4 5 6 7 8 # alloc.go # go build -gcflags \u0026#34;-N -l -m\u0026#34; -ldflags=-compressdwarf=false -o alloc.out alloc.go # command-line-arguments ./alloc.go:18:9: \u0026amp;y escapes to heap ./alloc.go:17:2: moved to heap: y ./alloc.go:22:2: moved to heap: large ./alloc.go:23:10: f3 \u0026amp;large does not escape ./alloc.go:28:8: f4 \u0026amp;small does not escape 情况1: f1 中 x 的变量被返回，没有发生逃逸； 情况2: f2 中 y 的指针被返回，进而发生了逃逸； 情况3: f3 中 large 无法被一个执行栈装下，即便没有返回，也会直接在堆上分配； 情况4: f4 中 small 对象能够被一个执行栈装下，变量没有返回到栈外，进而没有发生逃逸。 如果我们再仔细检查一下他们的汇编：\nTEXT main.f2(SB) /Users/changkun/dev/go-under-the-hood/demo/4-mem/alloc/alloc.go ... alloc.go:17\t0x104e086\t488d05939f0000\tLEAQ type.*+40256(SB), AX\talloc.go:17\t0x104e08d\t48890424\tMOVQ AX, 0(SP)\talloc.go:17\t0x104e091\te8cabffbff\tCALL runtime.newobject(SB)\talloc.go:17\t0x104e096\t488b442408\tMOVQ 0x8(SP), AX\talloc.go:17\t0x104e09b\t4889442410\tMOVQ AX, 0x10(SP)\talloc.go:17\t0x104e0a0\t48c70002000000\tMOVQ $0x2, 0(AX)\t... TEXT main.f3(SB) /Users/changkun/dev/go-under-the-hood/demo/4-mem/alloc/alloc.go ... alloc.go:22\t0x104e0ed\t488d05ecf60000\tLEAQ type.*+62720(SB), AX\talloc.go:22\t0x104e0f4\t48890424\tMOVQ AX, 0(SP)\talloc.go:22\t0x104e0f8\te863bffbff\tCALL runtime.newobject(SB)\talloc.go:22\t0x104e0fd\t488b7c2408\tMOVQ 0x8(SP), DI\talloc.go:22\t0x104e102\t48897c2418\tMOVQ DI, 0x18(SP)\talloc.go:22\t0x104e107\tb900008000\tMOVL $0x800000, CX\talloc.go:22\t0x104e10c\t31c0\tXORL AX, AX\talloc.go:22\t0x104e10e\tf348ab\tREP; STOSQ AX, ES:0(DI)\t... 就会发现，对于产生在 Go 堆上分配对象的情况，均调用了运行时的 runtime.newobject 方法。 当然，关键字 new 同样也会被编译器翻译为此函数，这个我们已经在实践中知道了。 所以 runtime.newobject 就是内存分配的核心入口了。\n分配入口 单看 runtime.newobject 其实非常简单，他只是简单的调用了 mallocgc：\n1 2 3 4 // 创建一个新的对象 func newobject(typ *_type) unsafe.Pointer { return mallocgc(typ.size, typ, true) // true 内存清零 } 其中 _type 为 Go 类型的实现，通过其 size 属性能够获得该类型所需要的大小。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 func mallocgc(size uintptr, typ *_type, needzero bool) unsafe.Pointer { // 创建大小为零的对象，例如空结构体 if size == 0 { return unsafe.Pointer(\u0026amp;zerobase) } mp := acquirem() mp.mallocing = 1 ... // 获取当前 g 所在 M 所绑定 P 的 mcache c := gomcache() var x unsafe.Pointer noscan := typ == nil || typ.kind\u0026amp;kindNoPointers != 0 if size \u0026lt;= maxSmallSize { if noscan \u0026amp;\u0026amp; size \u0026lt; maxTinySize { // 微对象分配 ... } else { // 小对象分配 ... } } else { // 大对象分配 ... } ... mp.mallocing = 0 releasem(mp) ... return x 在分配过程中，我们会发现需要持有 M 才可进行分配，这是因为分配不仅可能涉及 mcache，还需要将正在分配的 M 标记为 mallocing，用于记录当前 M 的分配状态。\n小对象分配 当对一个小对象（\u0026lt;32KB）分配内存时，会将该对象所需的内存大小调整到某个能够容纳该对象的大小等级（size class）， 并查看 mcache 中对应等级的 mspan，通过扫描 mspan 的 freeindex 来确定是否能够进行分配。\n当没有可分配的 mspan 时，会从 mcentral 中获取一个所需大小空间的新的 mspan，从 mcentral 中分配会对其进行加锁， 但一次性获取整个 span 的过程均摊了对 mcentral 加锁的成本。\n如果 mcentral 的 mspan 也为空时，则它也会发生增长，从而从 mheap 中获取一连串的页，作为一个新的 mspan 进行提供。 而如果 mheap 仍然为空，或者没有足够大的对象来进行分配时，则会从操作系统中分配一组新的页（至少 1MB）， 从而均摊与操作系统沟通的成本。\n微对象分配 对于过小的微对象（\u0026lt;16B），它们的分配过程与小对象的分配过程基本类似，但是是直接存储在 mcache 上，并由其以 16B 的块大小直接进行管理和释放。\n大对象分配 大对象分配非常粗暴，不与 mcache 和 mcentral 沟通，直接绕过并通过 mheap 进行分配。\n小结 该图展示了所有结构的关系。\nheap 最中间的灰色区域 arena 覆盖了 Go 程序的整个虚拟内存， 每个 arena 包括一段 bitmap 和一段指向连续 span 的指针； 每个 span 由一串连续的页组成；每个 arena 的起始位置通过 arenaHint 进行记录。\n分配的顺序从右向左，代价也就越来越大。 小对象和微对象优先从白色区域 per-P 的 mcache 分配 span，这个过程不需要加锁（白色）； 若失败则会从 mheap 持有的 mcentral 加锁获得新的 span，这个过程需要加锁，但只是局部（灰色）； 若仍失败则会从右侧的 free 或 scav 进行分配，这个过程需要对整个 heap 进行加锁，代价最大（黑色）。\n","permalink":"http://localhost:64667/posts/programming/golang/memory-management/","summary":"\u003ch1 id=\"设计原则\"\u003e设计原则\u003c/h1\u003e\n\u003cp\u003e现在我们来看 Go 中另一重要的关键组件：内存分配器。\u003c/p\u003e\n\u003cp\u003eGo 的内存分配器基于 Thread-Cache Malloc (tcmalloc) ，tcmalloc 为每个线程实现了一个本地缓存， 区分了小对象（小于 32kb）和大对象分配两种分配类型，其管理的内存单元称为 span。\u003c/p\u003e\n\u003cp\u003e我们不再介绍更多 tcmalloc 的具体细节，因为 Go 的内存分配器与 tcmalloc 存在一定差异。 这个差异来源于 Go 语言被设计为没有显式的内存分配与释放， 完全依靠编译器与运行时的配合来自动处理，因此也就造就了内存分配器、垃圾回收器两大组件。\u003c/p\u003e\n\u003cp\u003e我们知道，在计算机领域中，无外乎时间换空间、空间换时间。统一管理内存会提前分配或一次性释放一大块内存， 进而减少与操作系统沟通造成的开销，进而提高程序的运行性能。 支持内存管理另一个优势就是能够更好的支持垃圾回收，这一点我们留到垃圾回收器的章节中进行讨论。\u003c/p\u003e\n\u003ch2 id=\"主要结构\"\u003e主要结构\u003c/h2\u003e\n\u003cp\u003eGo 的内存分配器主要包含以下几个核心组件：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eheapArena: 保留整个虚拟地址空间\u003c/li\u003e\n\u003cli\u003emheap：分配的堆，在页大小为 8KB 的粒度上进行管理\u003c/li\u003e\n\u003cli\u003emspan：是 mheap 上管理的一连串的页\u003c/li\u003e\n\u003cli\u003emcentral：收集了给定大小等级的所有 span\u003c/li\u003e\n\u003cli\u003emcache：为 per-P 的缓存。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e其中页是向操作系统申请内存的最小单位，目前设计为 8KB。\u003c/p\u003e\n\u003cp\u003e每一个结构虽然不都像是调度器 M/P/G 结构那样的大部头，但初次阅读这些结构时想要理清他们之间的关系还是比较麻烦的。 传统意义上的栈被 Go 的运行时霸占，不开放给用户态代码；而传统意义上的堆内存，又被 Go 运行时划分为了两个部分， 一个是 Go 运行时自身所需的堆内存，即堆外内存；另一部分则用于 Go 用户态代码所使用的堆内存，也叫做 Go 堆。 Go 堆负责了用户态对象的存放以及 goroutine 的执行栈。\u003c/p\u003e\n\u003ch3 id=\"arena\"\u003eArena\u003c/h3\u003e\n\u003ch4 id=\"heaparena\"\u003eheapArena\u003c/h4\u003e\n\u003cp\u003eGo 堆被视为由多个 arena 组成，每个 arena 在 64 位机器上为 64MB，且起始地址与 arena 的大小对齐， 所有的 arena 覆盖了整个 Go 堆的地址空间。\u003c/p\u003e","title":"Golang内存管理"},{"content":"问题： golang函数传参是不是应该和c一样，尽量不要直接传结构体，而是要传结构体指针？\n逃逸分析 逃逸分析指的是，在计算机语言编译器优化原理中，分析指针动态范围的方法，和编译器优化原理的指针分析和外形分析相关联。当变量（或者对象）在方法中被分配后，其指针有可能被返回或者被全局引用，这种现象就是指针（或引用）的逃逸（Escape）。\n其实在java概念中有一个误解 \u0026mdash; new出来的东西都在堆上，栈上存的是它的引用。 这句话在现代JVM上有问题，就是因为逃逸分析机制。简单来说，就是JVM的逃逸分析会在运行时(runtime)检测当前方法栈帧(frame)内new出来的对象的引用，是否被传出当前的栈帧。如果传出，就会发生逃逸，没有传出则不会。对于未发生逃逸的变量，则会直接在栈上分配内存。因为栈上内存由在函数返回时自动回收，而堆上的的内存需要gc去回收，如果程序中有大量逃逸的对象，那么势必会增加gc的压力。\n1 2 3 4 5 6 7 8 9 10 public void test(){ List\u0026lt;Integer\u0026gt; a = new ArrayList\u0026lt;\u0026gt;(); a.add(1); // a 未逃逸，在栈上分配 } public List\u0026lt;Integer\u0026gt; test1(){ List\u0026lt;Integer\u0026gt; a = new ArrayList\u0026lt;\u0026gt;(); a.add(1); return a // 发生逃逸，因此分配在堆上 } 区别 不同于JVM运行时的逃逸分析，Golang的逃逸分析是在编译期完成。 golang的逃逸分析只针对指针。一个值引用变量如果没有被取址，那么它永远不可能逃逸。 go version go1.13.4 darwin/amd64 验证某个函数的变量是否发生逃逸的方法：\ngo run -gcflags \u0026ldquo;-m -l\u0026rdquo; (-m打印逃逸分析信息，-l禁止内联编译)\ngo tool compile -S xxxx.go | grep runtime.newobject（汇编代码中搜newobject指令，这个指令用于生成堆对象）\n备注： 关于-gcflags \u0026ldquo;-m -l\u0026quot;的输出，有两种情况：\nMoved to heap: xxx xxx escapes to heap 二者都表示发生了逃逸，当xxx变量为指针的时候，出现第二种；当xxx变量为值类型时，为上一种，测试代码：\n1 2 3 4 5 6 7 8 type S int func main(){ a := S(0) b := make([]*S, 2) b[0] = \u0026amp;a c := new(S) b[1] = c } Golang逃逸分析 本文探究什么时候，什么情况下会发生逃逸\ncase 1 最基本的情况\n在某个函数中new或者字面量创建出的变量，将其指针作为函数返回值，则该变量一定发生逃逸 下面是例子:\n1 2 3 4 func test() *User{ a := User{} return \u0026amp;a } case 2 需要验证文章开头情况的正确性，也就是当某个值取指针并传给另一个函数的时候，是否有逃逸：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 type User struct{ Username string Password string Age\tint } func main(){ a := \u0026#34;aaa\u0026#34; u := \u0026amp;User{a, \u0026#34;123\u0026#34;, 12} Call1(u) } func Call1(u *User){ fmt.Printf(\u0026#34;%v\u0026#34;, u) } 逃逸情况:\n-\u0026gt; go run -gcflags \u0026#34;-m -l\u0026#34; main.go # command-line-arguments ./main.go:18:12: leaking param: u ./main.go:19:12: Call1... argument does bnot escape ./main.go:19:13 u escapes to heap ./main.go:14:23 \u0026amp;User literal escapes to heap 可见发生了逃逸，这里将指针传给一个函数并打印，如果不打印，只对u进行读写：\n1 2 3 4 func Call1(u *User) int{ u.Username = \u0026#34;bbb\u0026#34; return u.Age * 20 } 结果:\n-\u0026gt; go run -gcflags \u0026#34;-m -l\u0026#34; main.go # command-line-arguments ./main.go:19:12: Call1 u does not escape ./main.go:14:23 main \u0026amp;User literal does not escape 并没有发生逃逸。其实如果只是对u进行读写，不管调用几次函数，传了几次指针，都不会逃逸。所以我们可以怀疑fmt.Printf的源码有问题，可以发现传入的u被赋值给了pp指针的一个成员变量\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // Printf formats according to a format specifier and writes to standard output. // It returns the number of bytes written and any write error encountered. func Printf(format string, a ...interface{}) (n int, err error) { return Fprintf(os.Stdout, format, a...) } // Fprintf formats according to a format specifier and writes to w. // It returns the number of bytes written and any write error encountered. func Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error) { p := newPrinter() p.doPrintf(format, a) n, err = w.Write(p.buf) p.free() return } // doPrintf里有 // .... p.printArg(a[argNum], rune(c)) // .... func (p *pp) printArg(arg interface{}, verb rune) { p.arg = arg p.value = reflect.Value{} // .... } 这个pp类型的指针p是由构造函数newPrinter返回，根据case1，p一定会发生逃逸，而p引用了传入指针，所以我们可以总结：\n被已经逃逸的变量引用的指针，一定发生逃逸。 case3 上述备注代码的例子：\n1 2 3 4 5 func main(){ a := make([]*int, 1) b := 12 a[0] = \u0026amp;b } 实际上这个代码中, slice a不会逃逸，而被a引用的b会逃逸。类似的情况会发生在map和chan之中\n1 2 3 4 5 6 7 8 9 10 11 12 13 func main(){ a := make([]*int, 1) b := 12 a[0] = \u0026amp;b c := make(map[string]*int) d := 14 c[\u0026#34;aaa\u0026#34;] = \u0026amp;d e := make(chan *int, 1) f := 15 e \u0026lt;- \u0026amp;f } 结果可以发现, b, d, f都逃逸了。所以我们可以得出结论：\n被指针类型的slice, map和chan引用的指针一定会发生逃逸。 备注： stack overflow上有人提问为何使用指针的chan比使用值得chan慢%30， 答案就在这里。使用指针的chan发生逃逸，gc拖慢了速度。 总结与深入本质 变量的逃逸，本质由于对于stack栈帧的内存分配，对于函数的调用将开辟一个栈帧frame，在这个栈帧内定义局部变量，当传出栈帧内创建的变量引用到前一个栈帧离去，如果函数结束，那么原来这块栈帧有可能被其他覆盖，这个传出去的引用就有问题。所以编译器把这种函数返回的变量可能在后续被引用的情况，将变量逃逸到堆上是一个非常合理的策略。 GopherCon SG 2019 1. When a value could possibly be reference after the function that constructed the value returns. 2. When the compiler determines a value is too large to fit on the stack. 3. When the compiler doesn\u0026#39;t know the size of a value at compile time. 我们得出指针必然逃逸的情况：\n在某个函数中new或者字面量创建出的变量，将其指针作为函数返回，则该变量一定发生逃逸（构造函数返回的指针变量一定逃逸） 被已经逃逸的变量引用的指针，一定发生逃逸 被指针类型slice, map和chan引用的指针，一定发生逃逸 同时我们也得出一些必然不会逃逸的情况：\n指针被未发生逃逸的变量引用 仅仅在函数内对变量做取址操作，而未将指针传出 有些情况可能发生逃逸，也可能不会发生逃逸 ：\n将指针作为入参传给别的函数，这里还是要看指针在被传入的函数中的处理过程，如果发生了上述三种情况，则会逃逸；否则不会发生逃逸。 因此，对于文章开头的问题，我们不能仅仅依据使用值引用作为函数入参可能因为copy导致额外内存开销而放弃这种值引用类型入参的写法。因为如果函数内有造成变量逃逸的操作情形，gc可能会成为程序效率不高的瓶颈。\n对io.Reader的解释 1 2 3 4 5 6 7 8 type Reader struct{ Read(p []byte) (n int, err error) } // Instead of type Reader struct{ Read(n int) (b []byte, err error) } 对于一个Reader来说当然第二种写法更为贴近逻辑，但是根据逃逸分析，第二种写法明显在不断的Read时在堆上产生过多的垃圾。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // escape to heap func main(){ b := read() // use b } func read() []byte{ // return a new slice b := make([]byte, 32) return b } // stay on stack func main(){ b := make([]byte, 32) read(b) // use b } func read(b []byte){ // write into slice } 几点强调 Optimize for correctness, not performance. Go only puts function variables on the stakc if it can prove a variable is not used after the function returned. Sharing down typically stay on the stack (传递指针给函数) Sharing up typically escapes to the heap (返回指针，不过不必须，都加了typically，比如内联可能会让情形不太一样) Ask the compiler to find out 深入逃逸和内联 逃逸的深入解释 ​ 前面尝试了几个例子去分析逃逸的场景，实际上我们还是需要理解其内部机制，才能把收益最大化（开发效率v.s.运行效率）。逃逸分析的本质是当compiler发现函数变量将脱离函数栈的有效域或被函数栈域外的变量所引用时，把变量分配在堆上而不是栈上，分析一些典型的场景：\n上述讨论过的，函数返回变量地址，或者返回包含变量地址的结构体。\n把变量地址写入channel或者sync.Pool，compiler无法获取goroutine如何使用这个变量，也就无法在编译的时候决定变量的生命周期。\n闭包可能导致闭包上下文逃逸，\nslice变量超过cap重新分配时，将在堆上进行，栈的大小毕竟是固定和有限的。\n上述讨论过的把变量地址赋值给可扩容容器（map, slice）时。\n把变量赋给可扩容interface容器（k或v为interface的map，或[]interface）的时候。\n几乎涉及到interface的地方都有可能导致对象逃逸，MyInterface(x).Foo(a)会导致a逃逸，如果a是引用语义(pointer, slice, map etc.)，那么a也会分配到堆上。涉及到interface的很多逃逸优化都很保守，比如reflect.ValueOf(x)会显式调用escapes(x)导致x逃逸。\n我们分析一下slice重分配的场景。这个场景是在堆上发生的，因为slice重分配时，会发生数据迁移，此时会把原本slice len内的元素浅拷贝到新的space。这个浅拷贝会导致新的slice(堆内存)引用了p(栈内存)的内容，而栈内存和堆内存的生命周期不一样，导致了可能出现函数return了以后，堆内存引用无效的栈内存的情形，这无疑会影响到运行的稳定。所以即使slice变量本身没有显式得逃逸，由于隐式的数据迁移，compiler会保守把slice或者map的指针元素逃逸到堆上。\n对于interface相关的，interface{}把值语义变为引用语义，其本质是type+pointer，这个pointer指向实际的data (源码分析开坑)。如果把值语义的变量赋值给interface容器，那么容器会持有变量的引用，所以这个变量会逃逸到堆上分配。\n案例里也分析了，fmt.Printf会导致逃逸，其实fmt.Sprintf或者logrus.Debugf都会导致所有传入参数逃逸，因为不定参数实际上是slice语法糖，编译器无法确定这些函数不会对参数slice进行append操作导致重分配，所以基于保守策略，都会把这些传入的参数分配到堆上以保证浅拷贝是准确的。\n这里我评价golang编译器的逃逸策略为保守应该是比较合适的，好的逃逸分析需要在编译期更深入地理解程序，这无疑非常困难，特别是涉及到interface{}，指针，可扩展容器的时候。\n内联 关于内联我需要在另一篇post中深入讨论，这里简单地说些感受。逃逸分析+GC很好用但是如果没有内联就会显得很昂贵，所有函数返回的地方会有一道“墙”，任何想要从墙逃逸到墙外的变量都会分配到堆上，比如：\n1 2 3 4 5 6 7 8 9 10 11 func NewCoord() *Coord{ return \u0026amp;Coord{ x : 1, z : 2, } } func foo(){ c := NewCoord() return c.x } 像NewCoord这样简单的构造函数都会导致返回值分配在堆上，抽离函数的代价也会更大。所以Go的内联，逃逸分析，GC像是三剑客，共同把其他语言避之不及的指针变得cheap。\nGo1.9开始对内联做了比较大的runtime优化，开始支持mid-stack inline ，并且通过-l编译参数指定内联等级(参数定义)。并且只在-l=4中提供了mid-stack inline，Go官方统计，这大概可以提升9%的性能，不过也增加了11%左右的二进制大小。\nGo1.10做一些interface相关的优化，比如devirtualization , compiler能够知道interface具体对象的情况下(如var i Iface = \u0026amp;myStruct{})可以直接生成对象相关代码调用(而非内联)，无需走interface方法查找。不过目前这个优化还不完善，还不能应用于逃逸分析优化。\nGo1.12开始默认支持了mid-stack inline\n在目前的项目中，似乎还不需要去调整内联参数，因为这个操作是个trade-off，过于激进的内联会导致生成的二进制文件更大你，CPU intstruction cache miss也可能会增加。默认等级的内联大部分时候都工作得很好并且保持稳定，到Go1.13为止，对interface方法的调用还不能被内联（哪怕compiler知道其具体的类型）。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 type I interface { F() int } type A struct{ x int y int } func (a *A) F() int { z := a.x + a.y return z } func BenchmarkX(b *testing.B) { b.ReportAllocs() for i:=0; i\u0026lt;b.N; i++ { // F() 会被内联 0.36 ns/op // var a = \u0026amp;A{} // a.F() // 对Interface的方法调用不能被内联 18.4 ns/op var i I = \u0026amp;A{} i.F() } } 对于一些偏底层基础的结构体，像上述的外层抽象了接口interface用于提供简单的对字段的访问设置，按照目前的分析和测试，内联会把字段访问速度提升一个数量级。\nPS： 个人的感受是目前Go interfaced的内联做的不够好，或许可以用公共API返回具体类型而不是interface，比如etcdclient.New, grpc.NewServer这些都是这样实践的，它们通过private fields加public methods让外部用起来像interface一样，但是数据逻辑层可能实践起来比较麻烦，因为Go的访问控制太差。\n","permalink":"http://localhost:64667/posts/programming/golang/golang-escape-analysis/","summary":"\u003cp\u003e\u003cem\u003e\u003cstrong\u003e问题： golang函数传参是不是应该和c一样，尽量不要直接传结构体，而是要传结构体指针？\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"逃逸分析\"\u003e逃逸分析\u003c/h2\u003e\n\u003cp\u003e逃逸分析指的是，在计算机语言编译器优化原理中，分析指针动态范围的方法，和编译器优化原理的指针分析和外形分析相关联。当变量（或者对象）在方法中被分配后，其指针有可能被返回或者被全局引用，这种现象就是指针（或引用）的逃逸（Escape）。\u003c/p\u003e\n\u003cp\u003e其实在java概念中有一个误解 \u0026mdash; new出来的东西都在堆上，栈上存的是它的引用。 这句话在现代JVM上有问题，就是因为逃逸分析机制。简单来说，就是JVM的逃逸分析会在运行时(runtime)检测当前方法栈帧(frame)内new出来的对象的引用，是否被传出当前的栈帧。如果传出，就会发生逃逸，没有传出则不会。对于未发生逃逸的变量，则会直接在栈上分配内存。因为栈上内存由在函数返回时自动回收，而堆上的的内存需要gc去回收，如果程序中有大量逃逸的对象，那么势必会增加gc的压力。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003etest\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eArrayList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// a 未逃逸，在栈上分配\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003etest1\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eArrayList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 发生逃逸，因此分配在堆上\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"区别\"\u003e区别\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e不同于JVM运行时的逃逸分析，Golang的逃逸分析是在编译期完成。\u003c/li\u003e\n\u003cli\u003egolang的逃逸分析只针对指针。一个值引用变量如果没有被取址，那么它永远不可能逃逸。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ego version go1.13.4 darwin/amd64\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e验证某个函数的变量是否发生逃逸的方法：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003ego run -gcflags \u0026ldquo;-m -l\u0026rdquo; (-m打印逃逸分析信息，-l禁止内联编译)\u003c/p\u003e","title":"Golang逃逸分析"},{"content":"Design pattern Builder Pattern scenario：build complicated object 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 package msg type Message struct { Header *Header Body *Body } type Header struct { SrcAddr string SrcPort uint64 DestAddr string DestPort uint64 Items map[string]string } type Body struct { Items []string } // Message对象的复杂对象 type builder struct{ once *sync.Once msg *Message } // 返回Builder对象 func Builder() *builder{ return \u0026amp;builder{ once: \u0026amp;sync.Once{}, msg: \u0026amp;Message{Header: \u0026amp;Header{}, Body: \u0026amp;Body{}}, } } func (b *builder) WithSrcAddr(srcAddr string) *builder{ b.msg.Header.SrcAddr = srcAddr return b } //...... func (b *builder) WithHeaderItem(key, value string) *builder{ //map只初始化一次 b.once.Do(func(){ b.msg.Header.Items = make(map[string]string) }) b.msg.Header.Items[key] = value return b } func (b *builder) WithBodyItem(record string) *builder{ b.msg.Body.Items = append(b.msg.Body.Items, record) return b } func (b *builder) Build() *Message{ return b.msg } Test code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package test func TestMessageBuilder(t *testing.T) { // 使用消息建造者进行对象创建 message := msg.Builder(). WithSrcAddr(\u0026#34;192.168.0.1\u0026#34;). WithSrcPort(1234). WithDestAddr(\u0026#34;192.168.0.2\u0026#34;). WithDestPort(8080). WithHeaderItem(\u0026#34;contents\u0026#34;, \u0026#34;application/json\u0026#34;). WithBodyItem(\u0026#34;record1\u0026#34;). WithBodyItem(\u0026#34;record2\u0026#34;). Build() if message.Header.SrcAddr != \u0026#34;192.168.0.1\u0026#34; { t.Errorf(\u0026#34;expect src address 192.168.0.1, but actual %s.\u0026#34;, message.Header.SrcAddr) } if message.Body.Items[0] != \u0026#34;record1\u0026#34; { t.Errorf(\u0026#34;expect body item0 record1, but actual %s.\u0026#34;, message.Body.Items[0]) } } Abstract Factory Pattern 常规的工厂模式，如果新增一个对象，需要修改原来的工厂对象代码，违反单一职责原则，最好增加一个抽象层。\ninterfaces definitions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package plugin //插件抽象接口定义 type Plugin interface{} // 输入插件，用于接收消息 type Input interface{ Plugin Receive() string } // 过滤插件，用于处理消息 type Filter interface{ Plugin Process(msg string) string } // 输出插件，用于发送消息 type Output interface{ Plugin Send(msg string) } pipeline composition 管道由上述三种插件定义\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 package pipeline ... // 消息管道的定义 type Pipeline struct { input plugin.Input filter plugin.Filter output plugin.Output } // 一个消息的处理流程为 input -\u0026gt; filter -\u0026gt; output func (p *Pipeline) Exec() { msg := p.input.Receive() msg = p.filter.Process(msg) p.output.Send(msg) } plugins implementation 定义三种插件的具体实现\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 package plugin ... // input插件名称与类型的映射关系，主要用于通过反射创建input对象 var inputNames = make(map[string]reflect.Type) // Hello input插件，接收“Hello World”消息 type HelloInput struct {} func (h *HelloInput) Receive() string { return \u0026#34;Hello World\u0026#34; } // 初始化input插件映射关系表 func init() { inputNames[\u0026#34;hello\u0026#34;] = reflect.TypeOf(HelloInput{}) } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package plugin ... // filter插件名称与类型的映射关系，主要用于通过反射创建filter对象 var filterNames = make(map[string]reflect.Type) // Upper filter插件，将消息全部字母转成大写 type UpperFilter struct {} func (u *UpperFilter) Process(msg string) string { return strings.ToUpper(msg) } // 初始化filter插件映射关系表 func init() { filterNames[\u0026#34;upper\u0026#34;] = reflect.TypeOf(UpperFilter{}) } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package plugin ... // output插件名称与类型的映射关系，主要用于通过反射创建output对象 var outputNames = make(map[string]reflect.Type) // Console output插件，将消息输出到控制台上 type ConsoleOutput struct {} func (c *ConsoleOutput) Send(msg string) { fmt.Println(msg) } // 初始化output插件映射关系表 func init() { outputNames[\u0026#34;console\u0026#34;] = reflect.TypeOf(ConsoleOutput{}) } abstract factory interface definition \u0026amp; implementation 定义抽象工厂接口，和对应插件的工厂实现\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package plugin ... // 插件抽象工厂接口 type Factory interface { Create(conf Config) Plugin } // input插件工厂对象，实现Factory接口 type InputFactory struct{} // 读取配置，通过反射机制进行对象实例化 func (i *InputFactory) Create(conf Config) Plugin { t, _ := inputNames[conf.Name] return reflect.New(t).Interface().(Plugin) } // filter和output插件工厂实现类似 type FilterFactory struct{} func (f *FilterFactory) Create(conf Config) Plugin { t, _ := filterNames[conf.Name] return reflect.New(t).Interface().(Plugin) } type OutputFactory struct{} func (o *OutputFactory) Create(conf Config) Plugin { t, _ := outputNames[conf.Name] return reflect.New(t).Interface().(Plugin) } pipeline factory definition 最后定义pipeline工厂方法，调用plugin.Factory 抽象工厂完成pipeline对象的实例化\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package pipeline ... // 保存用于创建Plugin的工厂实例，其中map的key为插件类型，value为抽象工厂接口 var pluginFactories = make(map[plugin.Type]plugin.Factory) // 根据plugin.Type返回对应Plugin类型的工厂实例 func factoryOf(t plugin.Type) plugin.Factory { factory, _ := pluginFactories[t] return factory } // pipeline工厂方法，根据配置创建一个Pipeline实例 func Of(conf Config) *Pipeline { p := \u0026amp;Pipeline{} p.input = factoryOf(plugin.InputType).Create(conf.Input).(plugin.Input) p.filter = factoryOf(plugin.FilterType).Create(conf.Filter).(plugin.Filter) p.output = factoryOf(plugin.OutputType).Create(conf.Output).(plugin.Output) return p } // 初始化插件工厂对象 func init() { pluginFactories[plugin.InputType] = \u0026amp;plugin.InputFactory{} pluginFactories[plugin.FilterType] = \u0026amp;plugin.FilterFactory{} pluginFactories[plugin.OutputType] = \u0026amp;plugin.OutputFactory{} } Prototype Pattern 场景：对象的复制，如果对象成员变量复杂，或者对象有不可见变量，即会有问题\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 package prototype ... // 原型复制抽象接口 type Prototype interface { clone() Prototype } type Message struct { Header *Header Body *Body } func (m *Message) clone() Prototype { msg := *m return \u0026amp;msg } Adapter Pattern 最常用的模式之一，典型场景是系统中老的接口过时或者即将废弃，可以新增一个适配器，把老的接口适配成新的接口使用，践行了开闭原则。该模式即把一个接口adaptee，通过适配器adapter转换成client锁期望的另一个接口target，也就是adapter通过实现target接口，并在对应的方法里调用adaptee的接口实现。\n继续消息处理系统的例子，目前系统的输入都来自HelloInput, 假设需要新增一个kafka消息队列中接收数据的功能，其中kafka消费者的接口如下：\n1 2 3 4 5 6 7 8 9 package kafka type Records struct{ Items []string } type Comsumer interface{ Poll() Records } 而Pipeline的设计是通过plugin.Input接口进行消息接收，所以这个kafka的接口无法直接集成。因此需要用适配器\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package plugin ... type KafkaInput struct { status Status consumer kafka.Consumer } func (k *KafkaInput) Receive() *msg.Message { records := k.consumer.Poll() if k.status != Started { fmt.Println(\u0026#34;Kafka input plugin is not running, input nothing.\u0026#34;) return nil } return msg.Builder(). WithHeaderItem(\u0026#34;content\u0026#34;, \u0026#34;kafka\u0026#34;). WithBodyItems(records.Items). Build() } // 在输入插件映射关系中加入kafka，用于通过反射创建input对象 func init() { inputNames[\u0026#34;hello\u0026#34;] = reflect.TypeOf(HelloInput{}) inputNames[\u0026#34;kafka\u0026#34;] = reflect.TypeOf(KafkaInput{}) } 这里有个问题就是KafkaInput这个对象的成员构造问题，需要特别的init函数去初始化，可以考虑在Plugin接口新增一个Init方法，用于定义插件的一些初始化操作，并在工厂返回实例前调用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package plugin ... type Plugin interface { Start() Stop() Status() Status // 新增初始化方法，在插件工厂返回实例前调用 Init() } // 修改后的插件工厂实现如下 func (i *InputFactory) Create(conf Config) Plugin { t, _ := inputNames[conf.Name] p := reflect.New(t).Interface().(Plugin) // 返回插件实例前调用Init函数，完成相关初始化方法 p.Init() return p } // KakkaInput的Init函数实现 func (k *KafkaInput) Init() { k.consumer = \u0026amp;kafka.MockConsumer{} } 上述的MockConsumer的实现如下：\n1 2 3 4 5 6 7 8 9 package kafka ... type MockConsumer struct {} func (m *MockConsumer) Poll() *Records { records := \u0026amp;Records{} records.Items = append(records.Items, \u0026#34;i am mock consumer.\u0026#34;) return records } Test code 测试代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 package test ... func TestKafkaInputPipeline(t *testing.T) { config := pipeline.Config{ Name: \u0026#34;pipeline2\u0026#34;, Input: plugin.Config{ PluginType: plugin.InputType, Name: \u0026#34;kafka\u0026#34;, }, Filter: plugin.Config{ PluginType: plugin.FilterType, Name: \u0026#34;upper\u0026#34;, }, Output: plugin.Config{ PluginType: plugin.OutputType, Name: \u0026#34;console\u0026#34;, }, } p := pipeline.Of(config) p.Start() p.Exec() p.Stop() } // 运行结果 === RUN TestKafkaInputPipeline Console output plugin started. Upper filter plugin started. Kafka input plugin started. Pipeline started. Output: Header:map[content:kafka], Body:[I AM MOCK CONSUMER.] Kafka input plugin stopped. Upper filter plugin stopped. Console output plugin stopped. Pipeline stopped. --- PASS: TestKafkaInputPipeline (0.00s) PASS Bridge Pattern 场景： 如果一个对象存在多个变化的方向，而且每个变化方向都需要扩展，桥接是好的选择。\n实际上上述的消息处理系统就是这样，一个pipeline有三个特征，且pipeline只依赖这三个接口而非具体的实现细节。\nProxy Pattern 代理模式为一个对象提供一种代理以控制对该对象的访问，使用率非常高。\n","permalink":"http://localhost:64667/posts/programming/design-pattern/design-pattern/","summary":"\u003ch1 id=\"design-pattern\"\u003eDesign pattern\u003c/h1\u003e\n\u003ch2 id=\"builder-pattern\"\u003eBuilder Pattern\u003c/h2\u003e\n\u003ch3 id=\"scenariobuild-complicated-object\"\u003escenario：build complicated object\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e41\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e42\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e43\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e44\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e45\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e46\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e47\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e48\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e49\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e50\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e51\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e52\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e53\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e54\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emsg\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003eMessage\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eHeader\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eHeader\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eBody\u003c/span\u003e   \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eBody\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003eHeader\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eSrcAddr\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eSrcPort\u003c/span\u003e  \u003cspan class=\"kt\"\u003euint64\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eDestAddr\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eDestPort\u003c/span\u003e \u003cspan class=\"kt\"\u003euint64\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eItems\u003c/span\u003e    \u003cspan class=\"kd\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003eBody\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003eItems\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Message对象的复杂对象\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003ebuilder\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003eonce\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003esync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eOnce\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003emsg\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eMessage\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 返回Builder对象\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eBuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ebuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ebuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003eonce\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003esync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eOnce\u003c/span\u003e\u003cspan class=\"p\"\u003e{},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003eMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003eHeader\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003eHeader\u003c/span\u003e\u003cspan class=\"p\"\u003e{},\u003c/span\u003e \u003cspan class=\"nx\"\u003eBody\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003eBody\u003c/span\u003e\u003cspan class=\"p\"\u003e{}},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ebuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eWithSrcAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esrcAddr\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ebuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eHeader\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSrcAddr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003esrcAddr\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//......\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ebuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eWithHeaderItem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003evalue\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ebuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"c1\"\u003e//map只初始化一次\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eonce\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eDo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eHeader\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eItems\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eHeader\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eItems\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003evalue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ebuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eWithBodyItem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erecord\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ebuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eBody\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eItems\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eBody\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eItems\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003erecord\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ebuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nf\"\u003eBuild\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emsg\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"test-code\"\u003eTest code\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003etest\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003eTestMessageBuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003etesting\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"c1\"\u003e// 使用消息建造者进行对象创建\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003emessage\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eBuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nf\"\u003eWithSrcAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;192.168.0.1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nf\"\u003eWithSrcPort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1234\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nf\"\u003eWithDestAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;192.168.0.2\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nf\"\u003eWithDestPort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e8080\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nf\"\u003eWithHeaderItem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;contents\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;application/json\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nf\"\u003eWithBodyItem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;record1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nf\"\u003eWithBodyItem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;record2\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nf\"\u003eBuild\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eHeader\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSrcAddr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;192.168.0.1\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eErrorf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;expect src address 192.168.0.1, but actual %s.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eHeader\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSrcAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eBody\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eItems\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;record1\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eErrorf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;expect body item0 record1, but actual %s.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eBody\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eItems\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"abstract-factory-pattern\"\u003eAbstract Factory Pattern\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"abstract factory\" loading=\"lazy\" src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1ghkw23e4r3j31bs0nge82.jpg?imageslim\"\u003e\u003c/p\u003e","title":"Design Pattern: Overview"}]