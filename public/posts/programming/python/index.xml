<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python on CctoctoFX</title>
    <link>http://localhost:63119/posts/programming/python/</link>
    <description>Recent content in Python on CctoctoFX</description>
    <image>
      <title>CctoctoFX</title>
      <url>http://localhost:63119/imgs/icon_head.png</url>
      <link>http://localhost:63119/imgs/icon_head.png</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Mon, 14 Dec 2020 16:20:29 +0800</lastBuildDate>
    <atom:link href="http://localhost:63119/posts/programming/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python类自定义</title>
      <link>http://localhost:63119/posts/programming/python/python-functionality/</link>
      <pubDate>Mon, 14 Dec 2020 16:20:29 +0800</pubDate>
      <guid>http://localhost:63119/posts/programming/python/python-functionality/</guid>
      <description>&lt;h2 id=&#34;python类关键字&#34;&gt;python类关键字&lt;/h2&gt;
&lt;h3 id=&#34;__init__-vs-__new__&#34;&gt;&lt;code&gt;__init__&lt;/code&gt; vs &lt;code&gt;__new__&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;__init__&lt;/code&gt;为初始化方法，&lt;code&gt;__new__&lt;/code&gt;为真正的构造函数。&lt;/p&gt;
&lt;h3 id=&#34;描述符descriptor&#34;&gt;描述符Descriptor&lt;/h3&gt;
&lt;h3 id=&#34;__contains__&#34;&gt;&lt;code&gt;__contains__&lt;/code&gt;&lt;/h3&gt;
&lt;h3 id=&#34;__slots__&#34;&gt;&lt;code&gt;__slots__&lt;/code&gt;&lt;/h3&gt;
&lt;h3 id=&#34;定制类&#34;&gt;定制类&lt;/h3&gt;
&lt;h3 id=&#34;type&#34;&gt;type()&lt;/h3&gt;
&lt;p&gt;python作为动态语言，和静态语言最大的不同，即函数和类的定义，不是编译的时候创建的而是动态创建的。我们常见的对类的定义:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello, &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;.&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from hello import Hello
&amp;gt;&amp;gt;&amp;gt; h = Hello()
&amp;gt;&amp;gt;&amp;gt; h.hello()
Hello, world.
&amp;gt;&amp;gt;&amp;gt; print(type(Hello))
&amp;lt;class &amp;#39;type&amp;#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print(type(h))
&amp;lt;class &amp;#39;hello.Hello&amp;#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;type()函数可以查看一类类型或者变量的类型，&lt;code&gt;Hello&lt;/code&gt;是一个class， 它的类型是个&lt;code&gt;type&lt;/code&gt;，而&lt;code&gt;h&lt;/code&gt;是一个instance, 它的类型就是class &lt;code&gt;Hello&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;同时有一个概念，就是type()不仅可以返回对象的类型，还可以创建出新的类型。我们可以不用定义&lt;code&gt;class Hello() ...&lt;/code&gt;而动态创建出Hello类。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; def fn(self, name=&amp;#39;world&amp;#39;): # 先定义函数
...     print(&amp;#39;Hello, %s.&amp;#39; % name)
...
&amp;gt;&amp;gt;&amp;gt; Hello = type(&amp;#39;Hello&amp;#39;, (object,), dict(hello=fn)) # 创建Hello class
&amp;gt;&amp;gt;&amp;gt; h = Hello()
&amp;gt;&amp;gt;&amp;gt; h.hello()
Hello, world.
&amp;gt;&amp;gt;&amp;gt; print(type(Hello))
&amp;lt;class &amp;#39;type&amp;#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print(type(h))
&amp;lt;class &amp;#39;__main__.Hello&amp;#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建一个class对象，&lt;code&gt;type()&lt;/code&gt;函数传入3个参数：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
